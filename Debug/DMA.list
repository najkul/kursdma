
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006648  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  080067e8  080067e8  000167e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf0  08006bf0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006bf0  08006bf0  00016bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bf8  08006bf8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bfc  08006bfc  00016bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  200001dc  08006ddc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08006ddc  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc1e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dce  00000000  00000000  0002be2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0002dbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  0002e3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029c9  00000000  00000000  0002ead0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4df  00000000  00000000  00031499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008757a  00000000  00000000  0003b978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c2ef2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc8  00000000  00000000  000c2f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080067d0 	.word	0x080067d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080067d0 	.word	0x080067d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_DMA_Init+0x3c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <MX_DMA_Init+0x3c>)
 8000ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_DMA_Init+0x3c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2010      	movs	r0, #16
 8000ed8:	f000 fca7 	bl	800182a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000edc:	2010      	movs	r0, #16
 8000ede:	f000 fcc0 	bl	8001862 <HAL_NVIC_EnableIRQ>

}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b40      	ldr	r3, [pc, #256]	; (800100c <MX_GPIO_Init+0x11c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a3f      	ldr	r2, [pc, #252]	; (800100c <MX_GPIO_Init+0x11c>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b3d      	ldr	r3, [pc, #244]	; (800100c <MX_GPIO_Init+0x11c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b39      	ldr	r3, [pc, #228]	; (800100c <MX_GPIO_Init+0x11c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a38      	ldr	r2, [pc, #224]	; (800100c <MX_GPIO_Init+0x11c>)
 8000f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b36      	ldr	r3, [pc, #216]	; (800100c <MX_GPIO_Init+0x11c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b32      	ldr	r3, [pc, #200]	; (800100c <MX_GPIO_Init+0x11c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a31      	ldr	r2, [pc, #196]	; (800100c <MX_GPIO_Init+0x11c>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b2f      	ldr	r3, [pc, #188]	; (800100c <MX_GPIO_Init+0x11c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	; (800100c <MX_GPIO_Init+0x11c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a2a      	ldr	r2, [pc, #168]	; (800100c <MX_GPIO_Init+0x11c>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <MX_GPIO_Init+0x11c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	21e0      	movs	r1, #224	; 0xe0
 8000f7a:	4825      	ldr	r0, [pc, #148]	; (8001010 <MX_GPIO_Init+0x120>)
 8000f7c:	f001 fa12 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2130      	movs	r1, #48	; 0x30
 8000f84:	4823      	ldr	r0, [pc, #140]	; (8001014 <MX_GPIO_Init+0x124>)
 8000f86:	f001 fa0d 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4822      	ldr	r0, [pc, #136]	; (8001018 <MX_GPIO_Init+0x128>)
 8000f90:	f001 fa08 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	481a      	ldr	r0, [pc, #104]	; (8001014 <MX_GPIO_Init+0x124>)
 8000fac:	f001 f876 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 8000fb0:	23e0      	movs	r3, #224	; 0xe0
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4812      	ldr	r0, [pc, #72]	; (8001010 <MX_GPIO_Init+0x120>)
 8000fc8:	f001 f868 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LD5_Pin|LD6_Pin;
 8000fcc:	2330      	movs	r3, #48	; 0x30
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480c      	ldr	r0, [pc, #48]	; (8001014 <MX_GPIO_Init+0x124>)
 8000fe4:	f001 f85a 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD7_Pin;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD7_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <MX_GPIO_Init+0x128>)
 8001000:	f001 f84c 	bl	800209c <HAL_GPIO_Init>

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40020000 	.word	0x40020000
 8001014:	40020800 	.word	0x40020800
 8001018:	40020400 	.word	0x40020400

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001020:	f000 fab6 	bl	8001590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001024:	f000 f812 	bl	800104c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001028:	f7ff ff62 	bl	8000ef0 <MX_GPIO_Init>
  MX_DMA_Init();
 800102c:	f7ff ff40 	bl	8000eb0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001030:	f000 f9e0 	bl	80013f4 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001034:	f000 f874 	bl	8001120 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

HAL_UARTEx_ReceiveToIdle_DMA(&huart2,ReceiveForDMA,32);
 8001038:	2220      	movs	r2, #32
 800103a:	4902      	ldr	r1, [pc, #8]	; (8001044 <main+0x28>)
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <main+0x2c>)
 800103e:	f001 fe8c 	bl	8002d5a <HAL_UARTEx_ReceiveToIdle_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001042:	e7fe      	b.n	8001042 <main+0x26>
 8001044:	20000248 	.word	0x20000248
 8001048:	2000030c 	.word	0x2000030c

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b094      	sub	sp, #80	; 0x50
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	2230      	movs	r2, #48	; 0x30
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fede 	bl	8003e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <SystemClock_Config+0xcc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	4a27      	ldr	r2, [pc, #156]	; (8001118 <SystemClock_Config+0xcc>)
 800107a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107e:	6413      	str	r3, [r2, #64]	; 0x40
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a21      	ldr	r2, [pc, #132]	; (800111c <SystemClock_Config+0xd0>)
 8001096:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a8:	2302      	movs	r3, #2
 80010aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ac:	2301      	movs	r3, #1
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b0:	2310      	movs	r3, #16
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b4:	2302      	movs	r3, #2
 80010b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010bc:	2310      	movs	r3, #16
 80010be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010c6:	2304      	movs	r3, #4
 80010c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ca:	2304      	movs	r3, #4
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 f980 	bl	80023d8 <HAL_RCC_OscConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010de:	f000 f845 	bl	800116c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	230f      	movs	r3, #15
 80010e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e6:	2302      	movs	r3, #2
 80010e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2102      	movs	r1, #2
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fbe2 	bl	80028c8 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800110a:	f000 f82f 	bl	800116c <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	; 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2026      	movs	r0, #38	; 0x26
 800112a:	f000 fb7e 	bl	800182a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800112e:	2026      	movs	r0, #38	; 0x26
 8001130:	f000 fb97 	bl	8001862 <HAL_NVIC_EnableIRQ>
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a05      	ldr	r2, [pc, #20]	; (8001160 <HAL_UARTEx_RxEventCallback+0x28>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d104      	bne.n	8001158 <HAL_UARTEx_RxEventCallback+0x20>
//					ReceiveLine++;
//				}
//			}
//		}

		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, ReceiveForDMA, 32);
 800114e:	2220      	movs	r2, #32
 8001150:	4904      	ldr	r1, [pc, #16]	; (8001164 <HAL_UARTEx_RxEventCallback+0x2c>)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_UARTEx_RxEventCallback+0x30>)
 8001154:	f001 fe01 	bl	8002d5a <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40004400 	.word	0x40004400
 8001164:	20000248 	.word	0x20000248
 8001168:	2000030c 	.word	0x2000030c

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	e7fe      	b.n	8001174 <Error_Handler+0x8>
	...

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_MspInit+0x4c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <HAL_MspInit+0x4c>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_MspInit+0x4c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <HAL_MspInit+0x4c>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011b6:	2007      	movs	r0, #7
 80011b8:	f000 fb2c 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <NMI_Handler+0x4>

080011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler+0x4>

080011da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001214:	f000 fa0e 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <DMA1_Stream5_IRQHandler+0x10>)
 8001222:	f000 fcd1 	bl	8001bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200002ac 	.word	0x200002ac

08001230 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <USART2_IRQHandler+0x10>)
 8001236:	f001 fdf5 	bl	8002e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000030c 	.word	0x2000030c

08001244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	return 1;
 8001248:	2301      	movs	r3, #1
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_kill>:

int _kill(int pid, int sig)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800125e:	f002 fdb3 	bl	8003dc8 <__errno>
 8001262:	4603      	mov	r3, r0
 8001264:	2216      	movs	r2, #22
 8001266:	601a      	str	r2, [r3, #0]
	return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_exit>:

void _exit (int status)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800127c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ffe7 	bl	8001254 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001286:	e7fe      	b.n	8001286 <_exit+0x12>

08001288 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00a      	b.n	80012b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800129a:	f3af 8000 	nop.w
 800129e:	4601      	mov	r1, r0
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	b2ca      	uxtb	r2, r1
 80012a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbf0      	blt.n	800129a <_read+0x12>
	}

return len;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	e009      	b.n	80012e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbf1      	blt.n	80012d4 <_write+0x12>
	}
	return len;
 80012f0:	687b      	ldr	r3, [r7, #4]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_close>:

int _close(int file)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
	return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001322:	605a      	str	r2, [r3, #4]
	return 0;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_isatty>:

int _isatty(int file)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
	return 1;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f002 fd18 	bl	8003dc8 <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20020000 	.word	0x20020000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	200001f8 	.word	0x200001f8
 80013cc:	20000368 	.word	0x20000368

080013d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <SystemInit+0x20>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <SystemInit+0x20>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <MX_USART2_UART_Init+0x50>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 800142c:	f001 fc48 	bl	8002cc0 <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001436:	f7ff fe99 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000030c 	.word	0x2000030c
 8001444:	40004400 	.word	0x40004400

08001448 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a30      	ldr	r2, [pc, #192]	; (8001528 <HAL_UART_MspInit+0xe0>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d159      	bne.n	800151e <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b2f      	ldr	r3, [pc, #188]	; (800152c <HAL_UART_MspInit+0xe4>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a2e      	ldr	r2, [pc, #184]	; (800152c <HAL_UART_MspInit+0xe4>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b2c      	ldr	r3, [pc, #176]	; (800152c <HAL_UART_MspInit+0xe4>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b28      	ldr	r3, [pc, #160]	; (800152c <HAL_UART_MspInit+0xe4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a27      	ldr	r2, [pc, #156]	; (800152c <HAL_UART_MspInit+0xe4>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <HAL_UART_MspInit+0xe4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014a2:	230c      	movs	r3, #12
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b2:	2307      	movs	r3, #7
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	481c      	ldr	r0, [pc, #112]	; (8001530 <HAL_UART_MspInit+0xe8>)
 80014be:	f000 fded 	bl	800209c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <HAL_UART_MspInit+0xec>)
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <HAL_UART_MspInit+0xf0>)
 80014c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_UART_MspInit+0xec>)
 80014ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_UART_MspInit+0xec>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <HAL_UART_MspInit+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_UART_MspInit+0xec>)
 80014de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_UART_MspInit+0xec>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_UART_MspInit+0xec>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_UART_MspInit+0xec>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_UART_MspInit+0xec>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <HAL_UART_MspInit+0xec>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001502:	480c      	ldr	r0, [pc, #48]	; (8001534 <HAL_UART_MspInit+0xec>)
 8001504:	f000 f9c8 	bl	8001898 <HAL_DMA_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800150e:	f7ff fe2d 	bl	800116c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_UART_MspInit+0xec>)
 8001516:	639a      	str	r2, [r3, #56]	; 0x38
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_UART_MspInit+0xec>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40004400 	.word	0x40004400
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	200002ac 	.word	0x200002ac
 8001538:	40026088 	.word	0x40026088

0800153c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800153c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001574 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001542:	490e      	ldr	r1, [pc, #56]	; (800157c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001544:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001558:	4c0b      	ldr	r4, [pc, #44]	; (8001588 <LoopFillZerobss+0x26>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001566:	f7ff ff33 	bl	80013d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156a:	f002 fc33 	bl	8003dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156e:	f7ff fd55 	bl	800101c <main>
  bx  lr    
 8001572:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001574:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800157c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001580:	08006c00 	.word	0x08006c00
  ldr r2, =_sbss
 8001584:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001588:	20000364 	.word	0x20000364

0800158c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC_IRQHandler>
	...

08001590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <HAL_Init+0x40>)
 800159a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_Init+0x40>)
 80015a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_Init+0x40>)
 80015b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f000 f92b 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015be:	2000      	movs	r0, #0
 80015c0:	f000 f808 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c4:	f7ff fdd8 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023c00 	.word	0x40023c00

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x54>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x58>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f943 	bl	800187e <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00e      	b.n	8001620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d80a      	bhi.n	800161e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001610:	f000 f90b 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_InitTick+0x5c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000000 	.word	0x20000000
 800162c:	20000008 	.word	0x20000008
 8001630:	20000004 	.word	0x20000004

08001634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_IncTick+0x20>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x24>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <HAL_IncTick+0x24>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000008 	.word	0x20000008
 8001658:	20000350 	.word	0x20000350

0800165c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return uwTick;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_GetTick+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000350 	.word	0x20000350

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db0b      	blt.n	8001702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <__NVIC_EnableIRQ+0x38>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	2001      	movs	r0, #1
 80016fa:	fa00 f202 	lsl.w	r2, r0, r2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff29 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff3e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff31 	bl	80016d8 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff feda 	bl	800165c <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e099      	b.n	80019e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d4:	e00f      	b.n	80018f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d6:	f7ff fec1 	bl	800165c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d908      	bls.n	80018f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2220      	movs	r2, #32
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2203      	movs	r2, #3
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e078      	b.n	80019e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1e8      	bne.n	80018d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <HAL_DMA_Init+0x158>)
 8001910:	4013      	ands	r3, r2
 8001912:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001922:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	2b04      	cmp	r3, #4
 800194e:	d107      	bne.n	8001960 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	4313      	orrs	r3, r2
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f023 0307 	bic.w	r3, r3, #7
 8001976:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	2b04      	cmp	r3, #4
 8001988:	d117      	bne.n	80019ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4313      	orrs	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00e      	beq.n	80019ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fb01 	bl	8001fa4 <DMA_CheckFifoParam>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2240      	movs	r2, #64	; 0x40
 80019ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019b6:	2301      	movs	r3, #1
 80019b8:	e016      	b.n	80019e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 fab8 	bl	8001f38 <DMA_CalcBaseAndBitshift>
 80019c8:	4603      	mov	r3, r0
 80019ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	223f      	movs	r2, #63	; 0x3f
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	f010803f 	.word	0xf010803f

080019f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_DMA_Start_IT+0x26>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e040      	b.n	8001a9c <HAL_DMA_Start_IT+0xa8>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d12f      	bne.n	8001a8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2202      	movs	r2, #2
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 fa4a 	bl	8001edc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	223f      	movs	r2, #63	; 0x3f
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0216 	orr.w	r2, r2, #22
 8001a62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0208 	orr.w	r2, r2, #8
 8001a7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	e005      	b.n	8001a9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a96:	2302      	movs	r3, #2
 8001a98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ab2:	f7ff fdd3 	bl	800165c <HAL_GetTick>
 8001ab6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d008      	beq.n	8001ad6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2280      	movs	r2, #128	; 0x80
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e052      	b.n	8001b7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0216 	bic.w	r2, r2, #22
 8001ae4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001af4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d103      	bne.n	8001b06 <HAL_DMA_Abort+0x62>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0208 	bic.w	r2, r2, #8
 8001b14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0201 	bic.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b26:	e013      	b.n	8001b50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b28:	f7ff fd98 	bl	800165c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	d90c      	bls.n	8001b50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2203      	movs	r2, #3
 8001b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e015      	b.n	8001b7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1e4      	bne.n	8001b28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b62:	223f      	movs	r2, #63	; 0x3f
 8001b64:	409a      	lsls	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d004      	beq.n	8001ba2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2280      	movs	r2, #128	; 0x80
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00c      	b.n	8001bbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2205      	movs	r2, #5
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bd4:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <HAL_DMA_IRQHandler+0x258>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a92      	ldr	r2, [pc, #584]	; (8001e24 <HAL_DMA_IRQHandler+0x25c>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	0a9b      	lsrs	r3, r3, #10
 8001be0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d01a      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0204 	bic.w	r2, r2, #4
 8001c1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c20:	2208      	movs	r2, #8
 8001c22:	409a      	lsls	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	2201      	movs	r2, #1
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d012      	beq.n	8001c6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	2201      	movs	r2, #1
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c62:	f043 0202 	orr.w	r2, r3, #2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	2204      	movs	r2, #4
 8001c70:	409a      	lsls	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d012      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00b      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f043 0204 	orr.w	r2, r3, #4
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d043      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d03c      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d018      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d108      	bne.n	8001cf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d024      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	4798      	blx	r3
 8001cf6:	e01f      	b.n	8001d38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01b      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
 8001d08:	e016      	b.n	8001d38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d107      	bne.n	8001d28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0208 	bic.w	r2, r2, #8
 8001d26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 808e 	beq.w	8001e66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8086 	beq.w	8001e66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2220      	movs	r2, #32
 8001d60:	409a      	lsls	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d136      	bne.n	8001de0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0216 	bic.w	r2, r2, #22
 8001d80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d103      	bne.n	8001da2 <HAL_DMA_IRQHandler+0x1da>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0208 	bic.w	r2, r2, #8
 8001db0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	223f      	movs	r2, #63	; 0x3f
 8001db8:	409a      	lsls	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d07d      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	4798      	blx	r3
        }
        return;
 8001dde:	e078      	b.n	8001ed2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01c      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d108      	bne.n	8001e0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d030      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
 8001e0c:	e02b      	b.n	8001e66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d027      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	4798      	blx	r3
 8001e1e:	e022      	b.n	8001e66 <HAL_DMA_IRQHandler+0x29e>
 8001e20:	20000000 	.word	0x20000000
 8001e24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0210 	bic.w	r2, r2, #16
 8001e44:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d032      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d022      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3301      	adds	r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d307      	bcc.n	8001eae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f2      	bne.n	8001e92 <HAL_DMA_IRQHandler+0x2ca>
 8001eac:	e000      	b.n	8001eb0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001eae:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
 8001ed0:	e000      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ed2:	bf00      	nop
    }
  }
}
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop

08001edc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ef8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b40      	cmp	r3, #64	; 0x40
 8001f08:	d108      	bne.n	8001f1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f1a:	e007      	b.n	8001f2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	60da      	str	r2, [r3, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	3b10      	subs	r3, #16
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <DMA_CalcBaseAndBitshift+0x64>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f52:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <DMA_CalcBaseAndBitshift+0x68>)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d909      	bls.n	8001f7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f6e:	f023 0303 	bic.w	r3, r3, #3
 8001f72:	1d1a      	adds	r2, r3, #4
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	659a      	str	r2, [r3, #88]	; 0x58
 8001f78:	e007      	b.n	8001f8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	aaaaaaab 	.word	0xaaaaaaab
 8001fa0:	08006800 	.word	0x08006800

08001fa4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d11f      	bne.n	8001ffe <DMA_CheckFifoParam+0x5a>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d856      	bhi.n	8002072 <DMA_CheckFifoParam+0xce>
 8001fc4:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <DMA_CheckFifoParam+0x28>)
 8001fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fca:	bf00      	nop
 8001fcc:	08001fdd 	.word	0x08001fdd
 8001fd0:	08001fef 	.word	0x08001fef
 8001fd4:	08001fdd 	.word	0x08001fdd
 8001fd8:	08002073 	.word	0x08002073
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d046      	beq.n	8002076 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fec:	e043      	b.n	8002076 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ff6:	d140      	bne.n	800207a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ffc:	e03d      	b.n	800207a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002006:	d121      	bne.n	800204c <DMA_CheckFifoParam+0xa8>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d837      	bhi.n	800207e <DMA_CheckFifoParam+0xda>
 800200e:	a201      	add	r2, pc, #4	; (adr r2, 8002014 <DMA_CheckFifoParam+0x70>)
 8002010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002014:	08002025 	.word	0x08002025
 8002018:	0800202b 	.word	0x0800202b
 800201c:	08002025 	.word	0x08002025
 8002020:	0800203d 	.word	0x0800203d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
      break;
 8002028:	e030      	b.n	800208c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d025      	beq.n	8002082 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800203a:	e022      	b.n	8002082 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002044:	d11f      	bne.n	8002086 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800204a:	e01c      	b.n	8002086 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d903      	bls.n	800205a <DMA_CheckFifoParam+0xb6>
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d003      	beq.n	8002060 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002058:	e018      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
      break;
 800205e:	e015      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00e      	beq.n	800208a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
      break;
 8002070:	e00b      	b.n	800208a <DMA_CheckFifoParam+0xe6>
      break;
 8002072:	bf00      	nop
 8002074:	e00a      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 8002076:	bf00      	nop
 8002078:	e008      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 800207a:	bf00      	nop
 800207c:	e006      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 800207e:	bf00      	nop
 8002080:	e004      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 8002082:	bf00      	nop
 8002084:	e002      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;   
 8002086:	bf00      	nop
 8002088:	e000      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 800208a:	bf00      	nop
    }
  } 
  
  return status; 
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop

0800209c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	e159      	b.n	800236c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020b8:	2201      	movs	r2, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	f040 8148 	bne.w	8002366 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d005      	beq.n	80020ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d130      	bne.n	8002150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	2203      	movs	r2, #3
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002124:	2201      	movs	r2, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 0201 	and.w	r2, r3, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b03      	cmp	r3, #3
 800215a:	d017      	beq.n	800218c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d123      	bne.n	80021e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	08da      	lsrs	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3208      	adds	r2, #8
 80021a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	08da      	lsrs	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3208      	adds	r2, #8
 80021da:	69b9      	ldr	r1, [r7, #24]
 80021dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0203 	and.w	r2, r3, #3
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80a2 	beq.w	8002366 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b57      	ldr	r3, [pc, #348]	; (8002384 <HAL_GPIO_Init+0x2e8>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	4a56      	ldr	r2, [pc, #344]	; (8002384 <HAL_GPIO_Init+0x2e8>)
 800222c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002230:	6453      	str	r3, [r2, #68]	; 0x44
 8002232:	4b54      	ldr	r3, [pc, #336]	; (8002384 <HAL_GPIO_Init+0x2e8>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800223e:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_GPIO_Init+0x2ec>)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3302      	adds	r3, #2
 8002246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	220f      	movs	r2, #15
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a49      	ldr	r2, [pc, #292]	; (800238c <HAL_GPIO_Init+0x2f0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d019      	beq.n	800229e <HAL_GPIO_Init+0x202>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a48      	ldr	r2, [pc, #288]	; (8002390 <HAL_GPIO_Init+0x2f4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0x1fe>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a47      	ldr	r2, [pc, #284]	; (8002394 <HAL_GPIO_Init+0x2f8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00d      	beq.n	8002296 <HAL_GPIO_Init+0x1fa>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a46      	ldr	r2, [pc, #280]	; (8002398 <HAL_GPIO_Init+0x2fc>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <HAL_GPIO_Init+0x1f6>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a45      	ldr	r2, [pc, #276]	; (800239c <HAL_GPIO_Init+0x300>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_GPIO_Init+0x1f2>
 800228a:	2304      	movs	r3, #4
 800228c:	e008      	b.n	80022a0 <HAL_GPIO_Init+0x204>
 800228e:	2307      	movs	r3, #7
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x204>
 8002292:	2303      	movs	r3, #3
 8002294:	e004      	b.n	80022a0 <HAL_GPIO_Init+0x204>
 8002296:	2302      	movs	r3, #2
 8002298:	e002      	b.n	80022a0 <HAL_GPIO_Init+0x204>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_GPIO_Init+0x204>
 800229e:	2300      	movs	r3, #0
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	f002 0203 	and.w	r2, r2, #3
 80022a6:	0092      	lsls	r2, r2, #2
 80022a8:	4093      	lsls	r3, r2
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b0:	4935      	ldr	r1, [pc, #212]	; (8002388 <HAL_GPIO_Init+0x2ec>)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	3302      	adds	r3, #2
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022be:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <HAL_GPIO_Init+0x304>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e2:	4a2f      	ldr	r2, [pc, #188]	; (80023a0 <HAL_GPIO_Init+0x304>)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022e8:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <HAL_GPIO_Init+0x304>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230c:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <HAL_GPIO_Init+0x304>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002312:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <HAL_GPIO_Init+0x304>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002336:	4a1a      	ldr	r2, [pc, #104]	; (80023a0 <HAL_GPIO_Init+0x304>)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800233c:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <HAL_GPIO_Init+0x304>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002360:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <HAL_GPIO_Init+0x304>)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3301      	adds	r3, #1
 800236a:	61fb      	str	r3, [r7, #28]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	2b0f      	cmp	r3, #15
 8002370:	f67f aea2 	bls.w	80020b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3724      	adds	r7, #36	; 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	40013800 	.word	0x40013800
 800238c:	40020000 	.word	0x40020000
 8002390:	40020400 	.word	0x40020400
 8002394:	40020800 	.word	0x40020800
 8002398:	40020c00 	.word	0x40020c00
 800239c:	40021000 	.word	0x40021000
 80023a0:	40013c00 	.word	0x40013c00

080023a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	807b      	strh	r3, [r7, #2]
 80023b0:	4613      	mov	r3, r2
 80023b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b4:	787b      	ldrb	r3, [r7, #1]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023c0:	e003      	b.n	80023ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023c2:	887b      	ldrh	r3, [r7, #2]
 80023c4:	041a      	lsls	r2, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	619a      	str	r2, [r3, #24]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e264      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d075      	beq.n	80024e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023f6:	4ba3      	ldr	r3, [pc, #652]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d00c      	beq.n	800241c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002402:	4ba0      	ldr	r3, [pc, #640]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800240a:	2b08      	cmp	r3, #8
 800240c:	d112      	bne.n	8002434 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240e:	4b9d      	ldr	r3, [pc, #628]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800241a:	d10b      	bne.n	8002434 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	4b99      	ldr	r3, [pc, #612]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d05b      	beq.n	80024e0 <HAL_RCC_OscConfig+0x108>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d157      	bne.n	80024e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e23f      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243c:	d106      	bne.n	800244c <HAL_RCC_OscConfig+0x74>
 800243e:	4b91      	ldr	r3, [pc, #580]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a90      	ldr	r2, [pc, #576]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e01d      	b.n	8002488 <HAL_RCC_OscConfig+0xb0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0x98>
 8002456:	4b8b      	ldr	r3, [pc, #556]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a8a      	ldr	r2, [pc, #552]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b88      	ldr	r3, [pc, #544]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a87      	ldr	r2, [pc, #540]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_OscConfig+0xb0>
 8002470:	4b84      	ldr	r3, [pc, #528]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a83      	ldr	r2, [pc, #524]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b81      	ldr	r3, [pc, #516]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a80      	ldr	r2, [pc, #512]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7ff f8e4 	bl	800165c <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002498:	f7ff f8e0 	bl	800165c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e204      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b76      	ldr	r3, [pc, #472]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0xc0>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff f8d0 	bl	800165c <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c0:	f7ff f8cc 	bl	800165c <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e1f0      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	4b6c      	ldr	r3, [pc, #432]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0xe8>
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d063      	beq.n	80025b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ee:	4b65      	ldr	r3, [pc, #404]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fa:	4b62      	ldr	r3, [pc, #392]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002502:	2b08      	cmp	r3, #8
 8002504:	d11c      	bne.n	8002540 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002506:	4b5f      	ldr	r3, [pc, #380]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d116      	bne.n	8002540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002512:	4b5c      	ldr	r3, [pc, #368]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_RCC_OscConfig+0x152>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d001      	beq.n	800252a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e1c4      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252a:	4b56      	ldr	r3, [pc, #344]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4952      	ldr	r1, [pc, #328]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253e:	e03a      	b.n	80025b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d020      	beq.n	800258a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002548:	4b4f      	ldr	r3, [pc, #316]	; (8002688 <HAL_RCC_OscConfig+0x2b0>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7ff f885 	bl	800165c <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002556:	f7ff f881 	bl	800165c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e1a5      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	4b46      	ldr	r3, [pc, #280]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002574:	4b43      	ldr	r3, [pc, #268]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4940      	ldr	r1, [pc, #256]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]
 8002588:	e015      	b.n	80025b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258a:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <HAL_RCC_OscConfig+0x2b0>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7ff f864 	bl	800165c <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002598:	f7ff f860 	bl	800165c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e184      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d030      	beq.n	8002624 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ca:	4b30      	ldr	r3, [pc, #192]	; (800268c <HAL_RCC_OscConfig+0x2b4>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7ff f844 	bl	800165c <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d8:	f7ff f840 	bl	800165c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e164      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x200>
 80025f6:	e015      	b.n	8002624 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f8:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_OscConfig+0x2b4>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fe:	f7ff f82d 	bl	800165c <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002606:	f7ff f829 	bl	800165c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e14d      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 800261a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80a0 	beq.w	8002772 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10f      	bne.n	8002662 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002650:	6413      	str	r3, [r2, #64]	; 0x40
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265e:	2301      	movs	r3, #1
 8002660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_OscConfig+0x2b8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d121      	bne.n	80026b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_RCC_OscConfig+0x2b8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a07      	ldr	r2, [pc, #28]	; (8002690 <HAL_RCC_OscConfig+0x2b8>)
 8002674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267a:	f7fe ffef 	bl	800165c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002680:	e011      	b.n	80026a6 <HAL_RCC_OscConfig+0x2ce>
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
 8002688:	42470000 	.word	0x42470000
 800268c:	42470e80 	.word	0x42470e80
 8002690:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002694:	f7fe ffe2 	bl	800165c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e106      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a6:	4b85      	ldr	r3, [pc, #532]	; (80028bc <HAL_RCC_OscConfig+0x4e4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d106      	bne.n	80026c8 <HAL_RCC_OscConfig+0x2f0>
 80026ba:	4b81      	ldr	r3, [pc, #516]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	4a80      	ldr	r2, [pc, #512]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6713      	str	r3, [r2, #112]	; 0x70
 80026c6:	e01c      	b.n	8002702 <HAL_RCC_OscConfig+0x32a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	d10c      	bne.n	80026ea <HAL_RCC_OscConfig+0x312>
 80026d0:	4b7b      	ldr	r3, [pc, #492]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a7a      	ldr	r2, [pc, #488]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
 80026dc:	4b78      	ldr	r3, [pc, #480]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a77      	ldr	r2, [pc, #476]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
 80026e8:	e00b      	b.n	8002702 <HAL_RCC_OscConfig+0x32a>
 80026ea:	4b75      	ldr	r3, [pc, #468]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a74      	ldr	r2, [pc, #464]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
 80026f6:	4b72      	ldr	r3, [pc, #456]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a71      	ldr	r2, [pc, #452]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d015      	beq.n	8002736 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7fe ffa7 	bl	800165c <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7fe ffa3 	bl	800165c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e0c5      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	4b65      	ldr	r3, [pc, #404]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ee      	beq.n	8002712 <HAL_RCC_OscConfig+0x33a>
 8002734:	e014      	b.n	8002760 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002736:	f7fe ff91 	bl	800165c <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe ff8d 	bl	800165c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e0af      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	4b5a      	ldr	r3, [pc, #360]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ee      	bne.n	800273e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d105      	bne.n	8002772 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4b56      	ldr	r3, [pc, #344]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a55      	ldr	r2, [pc, #340]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 800276c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 809b 	beq.w	80028b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800277c:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 030c 	and.w	r3, r3, #12
 8002784:	2b08      	cmp	r3, #8
 8002786:	d05c      	beq.n	8002842 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d141      	bne.n	8002814 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002790:	4b4c      	ldr	r3, [pc, #304]	; (80028c4 <HAL_RCC_OscConfig+0x4ec>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7fe ff61 	bl	800165c <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279e:	f7fe ff5d 	bl	800165c <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e081      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b0:	4b43      	ldr	r3, [pc, #268]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f0      	bne.n	800279e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69da      	ldr	r2, [r3, #28]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	019b      	lsls	r3, r3, #6
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	085b      	lsrs	r3, r3, #1
 80027d4:	3b01      	subs	r3, #1
 80027d6:	041b      	lsls	r3, r3, #16
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	061b      	lsls	r3, r3, #24
 80027e0:	4937      	ldr	r1, [pc, #220]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e6:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <HAL_RCC_OscConfig+0x4ec>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe ff36 	bl	800165c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe ff32 	bl	800165c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e056      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x41c>
 8002812:	e04e      	b.n	80028b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002814:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_RCC_OscConfig+0x4ec>)
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7fe ff1f 	bl	800165c <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002822:	f7fe ff1b 	bl	800165c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e03f      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f0      	bne.n	8002822 <HAL_RCC_OscConfig+0x44a>
 8002840:	e037      	b.n	80028b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e032      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800284e:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <HAL_RCC_OscConfig+0x4e8>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d028      	beq.n	80028ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d121      	bne.n	80028ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d11a      	bne.n	80028ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800287e:	4013      	ands	r3, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002884:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002886:	4293      	cmp	r3, r2
 8002888:	d111      	bne.n	80028ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	085b      	lsrs	r3, r3, #1
 8002896:	3b01      	subs	r3, #1
 8002898:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d107      	bne.n	80028ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40007000 	.word	0x40007000
 80028c0:	40023800 	.word	0x40023800
 80028c4:	42470060 	.word	0x42470060

080028c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0cc      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028dc:	4b68      	ldr	r3, [pc, #416]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d90c      	bls.n	8002904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b63      	ldr	r3, [pc, #396]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0b8      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800291c:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a58      	ldr	r2, [pc, #352]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002934:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800293e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002940:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	494d      	ldr	r1, [pc, #308]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d044      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d119      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e07f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d003      	beq.n	8002986 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002982:	2b03      	cmp	r3, #3
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002986:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e06f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002996:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e067      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f023 0203 	bic.w	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4934      	ldr	r1, [pc, #208]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b8:	f7fe fe50 	bl	800165c <HAL_GetTick>
 80029bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c0:	f7fe fe4c 	bl	800165c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e04f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 020c 	and.w	r2, r3, #12
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1eb      	bne.n	80029c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d20c      	bcs.n	8002a10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e032      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4916      	ldr	r1, [pc, #88]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	490e      	ldr	r1, [pc, #56]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a4e:	f000 f821 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002a52:	4602      	mov	r2, r0
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	490a      	ldr	r1, [pc, #40]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 8002a60:	5ccb      	ldrb	r3, [r1, r3]
 8002a62:	fa22 f303 	lsr.w	r3, r2, r3
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fdb0 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023c00 	.word	0x40023c00
 8002a84:	40023800 	.word	0x40023800
 8002a88:	080067e8 	.word	0x080067e8
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	20000004 	.word	0x20000004

08002a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aac:	4b67      	ldr	r3, [pc, #412]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d00d      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	f200 80bd 	bhi.w	8002c38 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d003      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0x3a>
 8002ac6:	e0b7      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac8:	4b61      	ldr	r3, [pc, #388]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002aca:	60bb      	str	r3, [r7, #8]
       break;
 8002acc:	e0b7      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ace:	4b61      	ldr	r3, [pc, #388]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ad0:	60bb      	str	r3, [r7, #8]
      break;
 8002ad2:	e0b4      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad4:	4b5d      	ldr	r3, [pc, #372]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002adc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ade:	4b5b      	ldr	r3, [pc, #364]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d04d      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aea:	4b58      	ldr	r3, [pc, #352]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	099b      	lsrs	r3, r3, #6
 8002af0:	461a      	mov	r2, r3
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	ea02 0800 	and.w	r8, r2, r0
 8002b02:	ea03 0901 	and.w	r9, r3, r1
 8002b06:	4640      	mov	r0, r8
 8002b08:	4649      	mov	r1, r9
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	014b      	lsls	r3, r1, #5
 8002b14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b18:	0142      	lsls	r2, r0, #5
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	ebb0 0008 	subs.w	r0, r0, r8
 8002b22:	eb61 0109 	sbc.w	r1, r1, r9
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	018b      	lsls	r3, r1, #6
 8002b30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b34:	0182      	lsls	r2, r0, #6
 8002b36:	1a12      	subs	r2, r2, r0
 8002b38:	eb63 0301 	sbc.w	r3, r3, r1
 8002b3c:	f04f 0000 	mov.w	r0, #0
 8002b40:	f04f 0100 	mov.w	r1, #0
 8002b44:	00d9      	lsls	r1, r3, #3
 8002b46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b4a:	00d0      	lsls	r0, r2, #3
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	eb12 0208 	adds.w	r2, r2, r8
 8002b54:	eb43 0309 	adc.w	r3, r3, r9
 8002b58:	f04f 0000 	mov.w	r0, #0
 8002b5c:	f04f 0100 	mov.w	r1, #0
 8002b60:	0259      	lsls	r1, r3, #9
 8002b62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b66:	0250      	lsls	r0, r2, #9
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	461a      	mov	r2, r3
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	f7fe f81e 	bl	8000bb8 <__aeabi_uldivmod>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4613      	mov	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	e04a      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b86:	4b31      	ldr	r3, [pc, #196]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	099b      	lsrs	r3, r3, #6
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b96:	f04f 0100 	mov.w	r1, #0
 8002b9a:	ea02 0400 	and.w	r4, r2, r0
 8002b9e:	ea03 0501 	and.w	r5, r3, r1
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	014b      	lsls	r3, r1, #5
 8002bb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bb4:	0142      	lsls	r2, r0, #5
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	1b00      	subs	r0, r0, r4
 8002bbc:	eb61 0105 	sbc.w	r1, r1, r5
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	018b      	lsls	r3, r1, #6
 8002bca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bce:	0182      	lsls	r2, r0, #6
 8002bd0:	1a12      	subs	r2, r2, r0
 8002bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd6:	f04f 0000 	mov.w	r0, #0
 8002bda:	f04f 0100 	mov.w	r1, #0
 8002bde:	00d9      	lsls	r1, r3, #3
 8002be0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002be4:	00d0      	lsls	r0, r2, #3
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	1912      	adds	r2, r2, r4
 8002bec:	eb45 0303 	adc.w	r3, r5, r3
 8002bf0:	f04f 0000 	mov.w	r0, #0
 8002bf4:	f04f 0100 	mov.w	r1, #0
 8002bf8:	0299      	lsls	r1, r3, #10
 8002bfa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bfe:	0290      	lsls	r0, r2, #10
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	f7fd ffd2 	bl	8000bb8 <__aeabi_uldivmod>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4613      	mov	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	0c1b      	lsrs	r3, r3, #16
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	3301      	adds	r3, #1
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	60bb      	str	r3, [r7, #8]
      break;
 8002c36:	e002      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c3a:	60bb      	str	r3, [r7, #8]
      break;
 8002c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	007a1200 	.word	0x007a1200

08002c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000000 	.word	0x20000000

08002c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c74:	f7ff fff0 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0a9b      	lsrs	r3, r3, #10
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4903      	ldr	r1, [pc, #12]	; (8002c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40023800 	.word	0x40023800
 8002c94:	080067f8 	.word	0x080067f8

08002c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c9c:	f7ff ffdc 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	0b5b      	lsrs	r3, r3, #13
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4903      	ldr	r1, [pc, #12]	; (8002cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	080067f8 	.word	0x080067f8

08002cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e03f      	b.n	8002d52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fe fbae 	bl	8001448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2224      	movs	r2, #36	; 0x24
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fe97 	bl	8003a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695a      	ldr	r2, [r3, #20]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b08c      	sub	sp, #48	; 0x30
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	4613      	mov	r3, r2
 8002d66:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d152      	bne.n	8002e1a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e04b      	b.n	8002e1c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e044      	b.n	8002e1c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fbea 	bl	8003580 <UART_Start_Receive_DMA>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d12c      	bne.n	8002e14 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d125      	bne.n	8002e0e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	e853 3f00 	ldrex	r3, [r3]
 8002de6:	617b      	str	r3, [r7, #20]
   return(result);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f043 0310 	orr.w	r3, r3, #16
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002df8:	627a      	str	r2, [r7, #36]	; 0x24
 8002dfa:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	6a39      	ldr	r1, [r7, #32]
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e00:	e841 2300 	strex	r3, r2, [r1]
 8002e04:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e5      	bne.n	8002dd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8002e0c:	e002      	b.n	8002e14 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002e14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e18:	e000      	b.n	8002e1c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3730      	adds	r7, #48	; 0x30
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b0ba      	sub	sp, #232	; 0xe8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10f      	bne.n	8002e8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_UART_IRQHandler+0x66>
 8002e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fd1d 	bl	80038c2 <UART_Receive_IT>
      return;
 8002e88:	e256      	b.n	8003338 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80de 	beq.w	8003050 <HAL_UART_IRQHandler+0x22c>
 8002e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d106      	bne.n	8002eae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80d1 	beq.w	8003050 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xae>
 8002eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f043 0201 	orr.w	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xd2>
 8002ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f043 0202 	orr.w	r2, r3, #2
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_UART_IRQHandler+0xf6>
 8002f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f043 0204 	orr.w	r2, r3, #4
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d011      	beq.n	8002f4a <HAL_UART_IRQHandler+0x126>
 8002f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d105      	bne.n	8002f3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f043 0208 	orr.w	r2, r3, #8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 81ed 	beq.w	800332e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_UART_IRQHandler+0x14e>
 8002f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fca8 	bl	80038c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <HAL_UART_IRQHandler+0x17a>
 8002f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d04f      	beq.n	800303e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fbb0 	bl	8003704 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d141      	bne.n	8003036 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3314      	adds	r3, #20
 8002fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fc0:	e853 3f00 	ldrex	r3, [r3]
 8002fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3314      	adds	r3, #20
 8002fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1d9      	bne.n	8002fb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	2b00      	cmp	r3, #0
 8003004:	d013      	beq.n	800302e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	4a7d      	ldr	r2, [pc, #500]	; (8003200 <HAL_UART_IRQHandler+0x3dc>)
 800300c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fdb6 	bl	8001b84 <HAL_DMA_Abort_IT>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003028:	4610      	mov	r0, r2
 800302a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302c:	e00e      	b.n	800304c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f9a4 	bl	800337c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003034:	e00a      	b.n	800304c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f9a0 	bl	800337c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303c:	e006      	b.n	800304c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f99c 	bl	800337c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800304a:	e170      	b.n	800332e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800304c:	bf00      	nop
    return;
 800304e:	e16e      	b.n	800332e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	2b01      	cmp	r3, #1
 8003056:	f040 814a 	bne.w	80032ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800305a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8143 	beq.w	80032ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 813c 	beq.w	80032ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	f040 80b4 	bne.w	8003204 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8140 	beq.w	8003332 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030ba:	429a      	cmp	r2, r3
 80030bc:	f080 8139 	bcs.w	8003332 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d2:	f000 8088 	beq.w	80031e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	330c      	adds	r3, #12
 80030dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030e4:	e853 3f00 	ldrex	r3, [r3]
 80030e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	330c      	adds	r3, #12
 80030fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003102:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800310e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003112:	e841 2300 	strex	r3, r2, [r1]
 8003116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800311a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1d9      	bne.n	80030d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3314      	adds	r3, #20
 8003128:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3314      	adds	r3, #20
 8003142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003146:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800314a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800314e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003152:	e841 2300 	strex	r3, r2, [r1]
 8003156:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1e1      	bne.n	8003122 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3314      	adds	r3, #20
 8003164:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003168:	e853 3f00 	ldrex	r3, [r3]
 800316c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800316e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3314      	adds	r3, #20
 800317e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003182:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003184:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003188:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e3      	bne.n	800315e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	330c      	adds	r3, #12
 80031aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b6:	f023 0310 	bic.w	r3, r3, #16
 80031ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80031c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80031ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031d0:	e841 2300 	strex	r3, r2, [r1]
 80031d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e3      	bne.n	80031a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe fc5f 	bl	8001aa4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	4619      	mov	r1, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd ff9e 	bl	8001138 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031fc:	e099      	b.n	8003332 <HAL_UART_IRQHandler+0x50e>
 80031fe:	bf00      	nop
 8003200:	080037cb 	.word	0x080037cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800320c:	b29b      	uxth	r3, r3
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 808b 	beq.w	8003336 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003220:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 8086 	beq.w	8003336 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800323a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	330c      	adds	r3, #12
 800324a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800324e:	647a      	str	r2, [r7, #68]	; 0x44
 8003250:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003252:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003256:	e841 2300 	strex	r3, r2, [r1]
 800325a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800325c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1e3      	bne.n	800322a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3314      	adds	r3, #20
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	623b      	str	r3, [r7, #32]
   return(result);
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3314      	adds	r3, #20
 8003282:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003286:	633a      	str	r2, [r7, #48]	; 0x30
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800328c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e3      	bne.n	8003262 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	330c      	adds	r3, #12
 80032ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	e853 3f00 	ldrex	r3, [r3]
 80032b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0310 	bic.w	r3, r3, #16
 80032be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	330c      	adds	r3, #12
 80032c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032cc:	61fa      	str	r2, [r7, #28]
 80032ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	69b9      	ldr	r1, [r7, #24]
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	617b      	str	r3, [r7, #20]
   return(result);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e3      	bne.n	80032a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032e4:	4619      	mov	r1, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd ff26 	bl	8001138 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032ec:	e023      	b.n	8003336 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_UART_IRQHandler+0x4ea>
 80032fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fa73 	bl	80037f2 <UART_Transmit_IT>
    return;
 800330c:	e014      	b.n	8003338 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800330e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00e      	beq.n	8003338 <HAL_UART_IRQHandler+0x514>
 800331a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d008      	beq.n	8003338 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fab3 	bl	8003892 <UART_EndTransmit_IT>
    return;
 800332c:	e004      	b.n	8003338 <HAL_UART_IRQHandler+0x514>
    return;
 800332e:	bf00      	nop
 8003330:	e002      	b.n	8003338 <HAL_UART_IRQHandler+0x514>
      return;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <HAL_UART_IRQHandler+0x514>
      return;
 8003336:	bf00      	nop
  }
}
 8003338:	37e8      	adds	r7, #232	; 0xe8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop

08003340 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b09c      	sub	sp, #112	; 0x70
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d172      	bne.n	8003492 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80033ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ae:	2200      	movs	r2, #0
 80033b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	330c      	adds	r3, #12
 80033b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033bc:	e853 3f00 	ldrex	r3, [r3]
 80033c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	330c      	adds	r3, #12
 80033d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80033d4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e5      	bne.n	80033b2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3314      	adds	r3, #20
 80033ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	667b      	str	r3, [r7, #100]	; 0x64
 80033fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3314      	adds	r3, #20
 8003404:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003406:	647a      	str	r2, [r7, #68]	; 0x44
 8003408:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800340c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1e5      	bne.n	80033e6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800341a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3314      	adds	r3, #20
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	e853 3f00 	ldrex	r3, [r3]
 8003428:	623b      	str	r3, [r7, #32]
   return(result);
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003430:	663b      	str	r3, [r7, #96]	; 0x60
 8003432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3314      	adds	r3, #20
 8003438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800343a:	633a      	str	r2, [r7, #48]	; 0x30
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1e5      	bne.n	800341a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800344e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	2b01      	cmp	r3, #1
 800345c:	d119      	bne.n	8003492 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	330c      	adds	r3, #12
 8003464:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	e853 3f00 	ldrex	r3, [r3]
 800346c:	60fb      	str	r3, [r7, #12]
   return(result);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f023 0310 	bic.w	r3, r3, #16
 8003474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	330c      	adds	r3, #12
 800347c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800347e:	61fa      	str	r2, [r7, #28]
 8003480:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	69b9      	ldr	r1, [r7, #24]
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	617b      	str	r3, [r7, #20]
   return(result);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e5      	bne.n	800345e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	2b01      	cmp	r3, #1
 8003498:	d106      	bne.n	80034a8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800349a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800349c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800349e:	4619      	mov	r1, r3
 80034a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80034a2:	f7fd fe49 	bl	8001138 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034a6:	e002      	b.n	80034ae <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80034a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80034aa:	f7ff ff53 	bl	8003354 <HAL_UART_RxCpltCallback>
}
 80034ae:	bf00      	nop
 80034b0:	3770      	adds	r7, #112	; 0x70
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d108      	bne.n	80034de <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	4619      	mov	r1, r3
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7fd fe2e 	bl	8001138 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034dc:	e002      	b.n	80034e4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7ff ff42 	bl	8003368 <HAL_UART_RxHalfCpltCallback>
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	2b80      	cmp	r3, #128	; 0x80
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b21      	cmp	r3, #33	; 0x21
 800351e:	d108      	bne.n	8003532 <UART_DMAError+0x46>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2200      	movs	r2, #0
 800352a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800352c:	68b8      	ldr	r0, [r7, #8]
 800352e:	f000 f8c1 	bl	80036b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b22      	cmp	r3, #34	; 0x22
 8003552:	d108      	bne.n	8003566 <UART_DMAError+0x7a>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d005      	beq.n	8003566 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2200      	movs	r2, #0
 800355e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003560:	68b8      	ldr	r0, [r7, #8]
 8003562:	f000 f8cf 	bl	8003704 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f043 0210 	orr.w	r2, r3, #16
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003572:	68b8      	ldr	r0, [r7, #8]
 8003574:	f7ff ff02 	bl	800337c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b098      	sub	sp, #96	; 0x60
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2222      	movs	r2, #34	; 0x22
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	4a3e      	ldr	r2, [pc, #248]	; (80036a8 <UART_Start_Receive_DMA+0x128>)
 80035ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	4a3d      	ldr	r2, [pc, #244]	; (80036ac <UART_Start_Receive_DMA+0x12c>)
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	4a3c      	ldr	r2, [pc, #240]	; (80036b0 <UART_Start_Receive_DMA+0x130>)
 80035be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	2200      	movs	r2, #0
 80035c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80035c8:	f107 0308 	add.w	r3, r7, #8
 80035cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4619      	mov	r1, r3
 80035da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	f7fe fa08 	bl	80019f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80035e4:	2300      	movs	r3, #0
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003618:	65bb      	str	r3, [r7, #88]	; 0x58
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
 8003620:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003622:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003624:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e5      	bne.n	8003602 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3314      	adds	r3, #20
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	657b      	str	r3, [r7, #84]	; 0x54
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3314      	adds	r3, #20
 8003654:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003656:	63ba      	str	r2, [r7, #56]	; 0x38
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800365c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1e5      	bne.n	8003636 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3314      	adds	r3, #20
 8003670:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	617b      	str	r3, [r7, #20]
   return(result);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003680:	653b      	str	r3, [r7, #80]	; 0x50
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3314      	adds	r3, #20
 8003688:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800368a:	627a      	str	r2, [r7, #36]	; 0x24
 800368c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	6a39      	ldr	r1, [r7, #32]
 8003690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	61fb      	str	r3, [r7, #28]
   return(result);
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e5      	bne.n	800366a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3760      	adds	r7, #96	; 0x60
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	08003391 	.word	0x08003391
 80036ac:	080034b7 	.word	0x080034b7
 80036b0:	080034ed 	.word	0x080034ed

080036b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	; 0x24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	61ba      	str	r2, [r7, #24]
 80036de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6979      	ldr	r1, [r7, #20]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e5      	bne.n	80036bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80036f8:	bf00      	nop
 80036fa:	3724      	adds	r7, #36	; 0x24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003704:	b480      	push	{r7}
 8003706:	b095      	sub	sp, #84	; 0x54
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	330c      	adds	r3, #12
 8003712:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800372c:	643a      	str	r2, [r7, #64]	; 0x40
 800372e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003732:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e5      	bne.n	800370c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3314      	adds	r3, #20
 8003746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f023 0301 	bic.w	r3, r3, #1
 8003756:	64bb      	str	r3, [r7, #72]	; 0x48
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3314      	adds	r3, #20
 800375e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003760:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	2b01      	cmp	r3, #1
 800377a:	d119      	bne.n	80037b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	330c      	adds	r3, #12
 8003782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	e853 3f00 	ldrex	r3, [r3]
 800378a:	60bb      	str	r3, [r7, #8]
   return(result);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f023 0310 	bic.w	r3, r3, #16
 8003792:	647b      	str	r3, [r7, #68]	; 0x44
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	330c      	adds	r3, #12
 800379a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800379c:	61ba      	str	r2, [r7, #24]
 800379e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	6979      	ldr	r1, [r7, #20]
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	e841 2300 	strex	r3, r2, [r1]
 80037a8:	613b      	str	r3, [r7, #16]
   return(result);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e5      	bne.n	800377c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037be:	bf00      	nop
 80037c0:	3754      	adds	r7, #84	; 0x54
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff fdc9 	bl	800337c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b21      	cmp	r3, #33	; 0x21
 8003804:	d13e      	bne.n	8003884 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380e:	d114      	bne.n	800383a <UART_Transmit_IT+0x48>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d110      	bne.n	800383a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800382c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	1c9a      	adds	r2, r3, #2
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	621a      	str	r2, [r3, #32]
 8003838:	e008      	b.n	800384c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	1c59      	adds	r1, r3, #1
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6211      	str	r1, [r2, #32]
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29b      	uxth	r3, r3
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4619      	mov	r1, r3
 800385a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10f      	bne.n	8003880 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800386e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800387e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	e000      	b.n	8003886 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003884:	2302      	movs	r3, #2
  }
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff fd44 	bl	8003340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b08c      	sub	sp, #48	; 0x30
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b22      	cmp	r3, #34	; 0x22
 80038d4:	f040 80ab 	bne.w	8003a2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e0:	d117      	bne.n	8003912 <UART_Receive_IT+0x50>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d113      	bne.n	8003912 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003900:	b29a      	uxth	r2, r3
 8003902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003904:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	1c9a      	adds	r2, r3, #2
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
 8003910:	e026      	b.n	8003960 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003918:	2300      	movs	r3, #0
 800391a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003924:	d007      	beq.n	8003936 <UART_Receive_IT+0x74>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <UART_Receive_IT+0x82>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	e008      	b.n	8003956 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003950:	b2da      	uxtb	r2, r3
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29b      	uxth	r3, r3
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4619      	mov	r1, r3
 800396e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003970:	2b00      	cmp	r3, #0
 8003972:	d15a      	bne.n	8003a2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0220 	bic.w	r2, r2, #32
 8003982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003992:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d135      	bne.n	8003a20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	613b      	str	r3, [r7, #16]
   return(result);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f023 0310 	bic.w	r3, r3, #16
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039da:	623a      	str	r2, [r7, #32]
 80039dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	69f9      	ldr	r1, [r7, #28]
 80039e0:	6a3a      	ldr	r2, [r7, #32]
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e5      	bne.n	80039ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d10a      	bne.n	8003a12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a16:	4619      	mov	r1, r3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7fd fb8d 	bl	8001138 <HAL_UARTEx_RxEventCallback>
 8003a1e:	e002      	b.n	8003a26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fc97 	bl	8003354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e002      	b.n	8003a30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e000      	b.n	8003a30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a2e:	2302      	movs	r3, #2
  }
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3730      	adds	r7, #48	; 0x30
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a3c:	b09f      	sub	sp, #124	; 0x7c
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4e:	68d9      	ldr	r1, [r3, #12]
 8003a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	ea40 0301 	orr.w	r3, r0, r1
 8003a58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a7c:	f021 010c 	bic.w	r1, r1, #12
 8003a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a86:	430b      	orrs	r3, r1
 8003a88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a96:	6999      	ldr	r1, [r3, #24]
 8003a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	ea40 0301 	orr.w	r3, r0, r1
 8003aa0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4bc5      	ldr	r3, [pc, #788]	; (8003dbc <UART_SetConfig+0x384>)
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d004      	beq.n	8003ab6 <UART_SetConfig+0x7e>
 8003aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4bc3      	ldr	r3, [pc, #780]	; (8003dc0 <UART_SetConfig+0x388>)
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d103      	bne.n	8003abe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ab6:	f7ff f8ef 	bl	8002c98 <HAL_RCC_GetPCLK2Freq>
 8003aba:	6778      	str	r0, [r7, #116]	; 0x74
 8003abc:	e002      	b.n	8003ac4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003abe:	f7ff f8d7 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8003ac2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003acc:	f040 80b6 	bne.w	8003c3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad2:	461c      	mov	r4, r3
 8003ad4:	f04f 0500 	mov.w	r5, #0
 8003ad8:	4622      	mov	r2, r4
 8003ada:	462b      	mov	r3, r5
 8003adc:	1891      	adds	r1, r2, r2
 8003ade:	6439      	str	r1, [r7, #64]	; 0x40
 8003ae0:	415b      	adcs	r3, r3
 8003ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ae8:	1912      	adds	r2, r2, r4
 8003aea:	eb45 0303 	adc.w	r3, r5, r3
 8003aee:	f04f 0000 	mov.w	r0, #0
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	00d9      	lsls	r1, r3, #3
 8003af8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003afc:	00d0      	lsls	r0, r2, #3
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	1911      	adds	r1, r2, r4
 8003b04:	6639      	str	r1, [r7, #96]	; 0x60
 8003b06:	416b      	adcs	r3, r5
 8003b08:	667b      	str	r3, [r7, #100]	; 0x64
 8003b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	1891      	adds	r1, r2, r2
 8003b16:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b18:	415b      	adcs	r3, r3
 8003b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b24:	f7fd f848 	bl	8000bb8 <__aeabi_uldivmod>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4ba5      	ldr	r3, [pc, #660]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	011e      	lsls	r6, r3, #4
 8003b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b38:	461c      	mov	r4, r3
 8003b3a:	f04f 0500 	mov.w	r5, #0
 8003b3e:	4622      	mov	r2, r4
 8003b40:	462b      	mov	r3, r5
 8003b42:	1891      	adds	r1, r2, r2
 8003b44:	6339      	str	r1, [r7, #48]	; 0x30
 8003b46:	415b      	adcs	r3, r3
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
 8003b4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b4e:	1912      	adds	r2, r2, r4
 8003b50:	eb45 0303 	adc.w	r3, r5, r3
 8003b54:	f04f 0000 	mov.w	r0, #0
 8003b58:	f04f 0100 	mov.w	r1, #0
 8003b5c:	00d9      	lsls	r1, r3, #3
 8003b5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b62:	00d0      	lsls	r0, r2, #3
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	1911      	adds	r1, r2, r4
 8003b6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b6c:	416b      	adcs	r3, r5
 8003b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	461a      	mov	r2, r3
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	1891      	adds	r1, r2, r2
 8003b7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b7e:	415b      	adcs	r3, r3
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b8a:	f7fd f815 	bl	8000bb8 <__aeabi_uldivmod>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4b8c      	ldr	r3, [pc, #560]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003b94:	fba3 1302 	umull	r1, r3, r3, r2
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	2164      	movs	r1, #100	; 0x64
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	3332      	adds	r3, #50	; 0x32
 8003ba6:	4a87      	ldr	r2, [pc, #540]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bb4:	441e      	add	r6, r3
 8003bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	1894      	adds	r4, r2, r2
 8003bc4:	623c      	str	r4, [r7, #32]
 8003bc6:	415b      	adcs	r3, r3
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bce:	1812      	adds	r2, r2, r0
 8003bd0:	eb41 0303 	adc.w	r3, r1, r3
 8003bd4:	f04f 0400 	mov.w	r4, #0
 8003bd8:	f04f 0500 	mov.w	r5, #0
 8003bdc:	00dd      	lsls	r5, r3, #3
 8003bde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003be2:	00d4      	lsls	r4, r2, #3
 8003be4:	4622      	mov	r2, r4
 8003be6:	462b      	mov	r3, r5
 8003be8:	1814      	adds	r4, r2, r0
 8003bea:	653c      	str	r4, [r7, #80]	; 0x50
 8003bec:	414b      	adcs	r3, r1
 8003bee:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	1891      	adds	r1, r2, r2
 8003bfc:	61b9      	str	r1, [r7, #24]
 8003bfe:	415b      	adcs	r3, r3
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c0a:	f7fc ffd5 	bl	8000bb8 <__aeabi_uldivmod>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4b6c      	ldr	r3, [pc, #432]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003c14:	fba3 1302 	umull	r1, r3, r3, r2
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	2164      	movs	r1, #100	; 0x64
 8003c1c:	fb01 f303 	mul.w	r3, r1, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	3332      	adds	r3, #50	; 0x32
 8003c26:	4a67      	ldr	r2, [pc, #412]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	f003 0207 	and.w	r2, r3, #7
 8003c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4432      	add	r2, r6
 8003c38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c3a:	e0b9      	b.n	8003db0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c3e:	461c      	mov	r4, r3
 8003c40:	f04f 0500 	mov.w	r5, #0
 8003c44:	4622      	mov	r2, r4
 8003c46:	462b      	mov	r3, r5
 8003c48:	1891      	adds	r1, r2, r2
 8003c4a:	6139      	str	r1, [r7, #16]
 8003c4c:	415b      	adcs	r3, r3
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c54:	1912      	adds	r2, r2, r4
 8003c56:	eb45 0303 	adc.w	r3, r5, r3
 8003c5a:	f04f 0000 	mov.w	r0, #0
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	00d9      	lsls	r1, r3, #3
 8003c64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c68:	00d0      	lsls	r0, r2, #3
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	eb12 0804 	adds.w	r8, r2, r4
 8003c72:	eb43 0905 	adc.w	r9, r3, r5
 8003c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	008b      	lsls	r3, r1, #2
 8003c8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c8e:	0082      	lsls	r2, r0, #2
 8003c90:	4640      	mov	r0, r8
 8003c92:	4649      	mov	r1, r9
 8003c94:	f7fc ff90 	bl	8000bb8 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4b49      	ldr	r3, [pc, #292]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	011e      	lsls	r6, r3, #4
 8003ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f04f 0100 	mov.w	r1, #0
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	1894      	adds	r4, r2, r2
 8003cb4:	60bc      	str	r4, [r7, #8]
 8003cb6:	415b      	adcs	r3, r3
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cbe:	1812      	adds	r2, r2, r0
 8003cc0:	eb41 0303 	adc.w	r3, r1, r3
 8003cc4:	f04f 0400 	mov.w	r4, #0
 8003cc8:	f04f 0500 	mov.w	r5, #0
 8003ccc:	00dd      	lsls	r5, r3, #3
 8003cce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cd2:	00d4      	lsls	r4, r2, #3
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	462b      	mov	r3, r5
 8003cd8:	1814      	adds	r4, r2, r0
 8003cda:	64bc      	str	r4, [r7, #72]	; 0x48
 8003cdc:	414b      	adcs	r3, r1
 8003cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f04f 0100 	mov.w	r1, #0
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	008b      	lsls	r3, r1, #2
 8003cf4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cf8:	0082      	lsls	r2, r0, #2
 8003cfa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003cfe:	f7fc ff5b 	bl	8000bb8 <__aeabi_uldivmod>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4b2f      	ldr	r3, [pc, #188]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003d08:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	2164      	movs	r1, #100	; 0x64
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	3332      	adds	r3, #50	; 0x32
 8003d1a:	4a2a      	ldr	r2, [pc, #168]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d26:	441e      	add	r6, r3
 8003d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f04f 0100 	mov.w	r1, #0
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	1894      	adds	r4, r2, r2
 8003d36:	603c      	str	r4, [r7, #0]
 8003d38:	415b      	adcs	r3, r3
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d40:	1812      	adds	r2, r2, r0
 8003d42:	eb41 0303 	adc.w	r3, r1, r3
 8003d46:	f04f 0400 	mov.w	r4, #0
 8003d4a:	f04f 0500 	mov.w	r5, #0
 8003d4e:	00dd      	lsls	r5, r3, #3
 8003d50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d54:	00d4      	lsls	r4, r2, #3
 8003d56:	4622      	mov	r2, r4
 8003d58:	462b      	mov	r3, r5
 8003d5a:	eb12 0a00 	adds.w	sl, r2, r0
 8003d5e:	eb43 0b01 	adc.w	fp, r3, r1
 8003d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f04f 0100 	mov.w	r1, #0
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	008b      	lsls	r3, r1, #2
 8003d76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d7a:	0082      	lsls	r2, r0, #2
 8003d7c:	4650      	mov	r0, sl
 8003d7e:	4659      	mov	r1, fp
 8003d80:	f7fc ff1a 	bl	8000bb8 <__aeabi_uldivmod>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	2164      	movs	r1, #100	; 0x64
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	3332      	adds	r3, #50	; 0x32
 8003d9c:	4a09      	ldr	r2, [pc, #36]	; (8003dc4 <UART_SetConfig+0x38c>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	f003 020f 	and.w	r2, r3, #15
 8003da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4432      	add	r2, r6
 8003dae:	609a      	str	r2, [r3, #8]
}
 8003db0:	bf00      	nop
 8003db2:	377c      	adds	r7, #124	; 0x7c
 8003db4:	46bd      	mov	sp, r7
 8003db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dba:	bf00      	nop
 8003dbc:	40011000 	.word	0x40011000
 8003dc0:	40011400 	.word	0x40011400
 8003dc4:	51eb851f 	.word	0x51eb851f

08003dc8 <__errno>:
 8003dc8:	4b01      	ldr	r3, [pc, #4]	; (8003dd0 <__errno+0x8>)
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	2000000c 	.word	0x2000000c

08003dd4 <__libc_init_array>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	4d0d      	ldr	r5, [pc, #52]	; (8003e0c <__libc_init_array+0x38>)
 8003dd8:	4c0d      	ldr	r4, [pc, #52]	; (8003e10 <__libc_init_array+0x3c>)
 8003dda:	1b64      	subs	r4, r4, r5
 8003ddc:	10a4      	asrs	r4, r4, #2
 8003dde:	2600      	movs	r6, #0
 8003de0:	42a6      	cmp	r6, r4
 8003de2:	d109      	bne.n	8003df8 <__libc_init_array+0x24>
 8003de4:	4d0b      	ldr	r5, [pc, #44]	; (8003e14 <__libc_init_array+0x40>)
 8003de6:	4c0c      	ldr	r4, [pc, #48]	; (8003e18 <__libc_init_array+0x44>)
 8003de8:	f002 fcf2 	bl	80067d0 <_init>
 8003dec:	1b64      	subs	r4, r4, r5
 8003dee:	10a4      	asrs	r4, r4, #2
 8003df0:	2600      	movs	r6, #0
 8003df2:	42a6      	cmp	r6, r4
 8003df4:	d105      	bne.n	8003e02 <__libc_init_array+0x2e>
 8003df6:	bd70      	pop	{r4, r5, r6, pc}
 8003df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfc:	4798      	blx	r3
 8003dfe:	3601      	adds	r6, #1
 8003e00:	e7ee      	b.n	8003de0 <__libc_init_array+0xc>
 8003e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e06:	4798      	blx	r3
 8003e08:	3601      	adds	r6, #1
 8003e0a:	e7f2      	b.n	8003df2 <__libc_init_array+0x1e>
 8003e0c:	08006bf8 	.word	0x08006bf8
 8003e10:	08006bf8 	.word	0x08006bf8
 8003e14:	08006bf8 	.word	0x08006bf8
 8003e18:	08006bfc 	.word	0x08006bfc

08003e1c <memset>:
 8003e1c:	4402      	add	r2, r0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d100      	bne.n	8003e26 <memset+0xa>
 8003e24:	4770      	bx	lr
 8003e26:	f803 1b01 	strb.w	r1, [r3], #1
 8003e2a:	e7f9      	b.n	8003e20 <memset+0x4>

08003e2c <__cvt>:
 8003e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e30:	ec55 4b10 	vmov	r4, r5, d0
 8003e34:	2d00      	cmp	r5, #0
 8003e36:	460e      	mov	r6, r1
 8003e38:	4619      	mov	r1, r3
 8003e3a:	462b      	mov	r3, r5
 8003e3c:	bfbb      	ittet	lt
 8003e3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003e42:	461d      	movlt	r5, r3
 8003e44:	2300      	movge	r3, #0
 8003e46:	232d      	movlt	r3, #45	; 0x2d
 8003e48:	700b      	strb	r3, [r1, #0]
 8003e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003e50:	4691      	mov	r9, r2
 8003e52:	f023 0820 	bic.w	r8, r3, #32
 8003e56:	bfbc      	itt	lt
 8003e58:	4622      	movlt	r2, r4
 8003e5a:	4614      	movlt	r4, r2
 8003e5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e60:	d005      	beq.n	8003e6e <__cvt+0x42>
 8003e62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e66:	d100      	bne.n	8003e6a <__cvt+0x3e>
 8003e68:	3601      	adds	r6, #1
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	e000      	b.n	8003e70 <__cvt+0x44>
 8003e6e:	2103      	movs	r1, #3
 8003e70:	ab03      	add	r3, sp, #12
 8003e72:	9301      	str	r3, [sp, #4]
 8003e74:	ab02      	add	r3, sp, #8
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	ec45 4b10 	vmov	d0, r4, r5
 8003e7c:	4653      	mov	r3, sl
 8003e7e:	4632      	mov	r2, r6
 8003e80:	f000 fcea 	bl	8004858 <_dtoa_r>
 8003e84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e88:	4607      	mov	r7, r0
 8003e8a:	d102      	bne.n	8003e92 <__cvt+0x66>
 8003e8c:	f019 0f01 	tst.w	r9, #1
 8003e90:	d022      	beq.n	8003ed8 <__cvt+0xac>
 8003e92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e96:	eb07 0906 	add.w	r9, r7, r6
 8003e9a:	d110      	bne.n	8003ebe <__cvt+0x92>
 8003e9c:	783b      	ldrb	r3, [r7, #0]
 8003e9e:	2b30      	cmp	r3, #48	; 0x30
 8003ea0:	d10a      	bne.n	8003eb8 <__cvt+0x8c>
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	f7fc fe15 	bl	8000ad8 <__aeabi_dcmpeq>
 8003eae:	b918      	cbnz	r0, 8003eb8 <__cvt+0x8c>
 8003eb0:	f1c6 0601 	rsb	r6, r6, #1
 8003eb4:	f8ca 6000 	str.w	r6, [sl]
 8003eb8:	f8da 3000 	ldr.w	r3, [sl]
 8003ebc:	4499      	add	r9, r3
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	f7fc fe07 	bl	8000ad8 <__aeabi_dcmpeq>
 8003eca:	b108      	cbz	r0, 8003ed0 <__cvt+0xa4>
 8003ecc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003ed0:	2230      	movs	r2, #48	; 0x30
 8003ed2:	9b03      	ldr	r3, [sp, #12]
 8003ed4:	454b      	cmp	r3, r9
 8003ed6:	d307      	bcc.n	8003ee8 <__cvt+0xbc>
 8003ed8:	9b03      	ldr	r3, [sp, #12]
 8003eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003edc:	1bdb      	subs	r3, r3, r7
 8003ede:	4638      	mov	r0, r7
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	b004      	add	sp, #16
 8003ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee8:	1c59      	adds	r1, r3, #1
 8003eea:	9103      	str	r1, [sp, #12]
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	e7f0      	b.n	8003ed2 <__cvt+0xa6>

08003ef0 <__exponent>:
 8003ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2900      	cmp	r1, #0
 8003ef6:	bfb8      	it	lt
 8003ef8:	4249      	neglt	r1, r1
 8003efa:	f803 2b02 	strb.w	r2, [r3], #2
 8003efe:	bfb4      	ite	lt
 8003f00:	222d      	movlt	r2, #45	; 0x2d
 8003f02:	222b      	movge	r2, #43	; 0x2b
 8003f04:	2909      	cmp	r1, #9
 8003f06:	7042      	strb	r2, [r0, #1]
 8003f08:	dd2a      	ble.n	8003f60 <__exponent+0x70>
 8003f0a:	f10d 0407 	add.w	r4, sp, #7
 8003f0e:	46a4      	mov	ip, r4
 8003f10:	270a      	movs	r7, #10
 8003f12:	46a6      	mov	lr, r4
 8003f14:	460a      	mov	r2, r1
 8003f16:	fb91 f6f7 	sdiv	r6, r1, r7
 8003f1a:	fb07 1516 	mls	r5, r7, r6, r1
 8003f1e:	3530      	adds	r5, #48	; 0x30
 8003f20:	2a63      	cmp	r2, #99	; 0x63
 8003f22:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003f26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003f2a:	4631      	mov	r1, r6
 8003f2c:	dcf1      	bgt.n	8003f12 <__exponent+0x22>
 8003f2e:	3130      	adds	r1, #48	; 0x30
 8003f30:	f1ae 0502 	sub.w	r5, lr, #2
 8003f34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003f38:	1c44      	adds	r4, r0, #1
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	4561      	cmp	r1, ip
 8003f3e:	d30a      	bcc.n	8003f56 <__exponent+0x66>
 8003f40:	f10d 0209 	add.w	r2, sp, #9
 8003f44:	eba2 020e 	sub.w	r2, r2, lr
 8003f48:	4565      	cmp	r5, ip
 8003f4a:	bf88      	it	hi
 8003f4c:	2200      	movhi	r2, #0
 8003f4e:	4413      	add	r3, r2
 8003f50:	1a18      	subs	r0, r3, r0
 8003f52:	b003      	add	sp, #12
 8003f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003f5e:	e7ed      	b.n	8003f3c <__exponent+0x4c>
 8003f60:	2330      	movs	r3, #48	; 0x30
 8003f62:	3130      	adds	r1, #48	; 0x30
 8003f64:	7083      	strb	r3, [r0, #2]
 8003f66:	70c1      	strb	r1, [r0, #3]
 8003f68:	1d03      	adds	r3, r0, #4
 8003f6a:	e7f1      	b.n	8003f50 <__exponent+0x60>

08003f6c <_printf_float>:
 8003f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f70:	ed2d 8b02 	vpush	{d8}
 8003f74:	b08d      	sub	sp, #52	; 0x34
 8003f76:	460c      	mov	r4, r1
 8003f78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003f7c:	4616      	mov	r6, r2
 8003f7e:	461f      	mov	r7, r3
 8003f80:	4605      	mov	r5, r0
 8003f82:	f001 fa67 	bl	8005454 <_localeconv_r>
 8003f86:	f8d0 a000 	ldr.w	sl, [r0]
 8003f8a:	4650      	mov	r0, sl
 8003f8c:	f7fc f928 	bl	80001e0 <strlen>
 8003f90:	2300      	movs	r3, #0
 8003f92:	930a      	str	r3, [sp, #40]	; 0x28
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	9305      	str	r3, [sp, #20]
 8003f98:	f8d8 3000 	ldr.w	r3, [r8]
 8003f9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003fa0:	3307      	adds	r3, #7
 8003fa2:	f023 0307 	bic.w	r3, r3, #7
 8003fa6:	f103 0208 	add.w	r2, r3, #8
 8003faa:	f8c8 2000 	str.w	r2, [r8]
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003fb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003fba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003fbe:	9307      	str	r3, [sp, #28]
 8003fc0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003fc4:	ee08 0a10 	vmov	s16, r0
 8003fc8:	4b9f      	ldr	r3, [pc, #636]	; (8004248 <_printf_float+0x2dc>)
 8003fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fd2:	f7fc fdb3 	bl	8000b3c <__aeabi_dcmpun>
 8003fd6:	bb88      	cbnz	r0, 800403c <_printf_float+0xd0>
 8003fd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fdc:	4b9a      	ldr	r3, [pc, #616]	; (8004248 <_printf_float+0x2dc>)
 8003fde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fe2:	f7fc fd8d 	bl	8000b00 <__aeabi_dcmple>
 8003fe6:	bb48      	cbnz	r0, 800403c <_printf_float+0xd0>
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2300      	movs	r3, #0
 8003fec:	4640      	mov	r0, r8
 8003fee:	4649      	mov	r1, r9
 8003ff0:	f7fc fd7c 	bl	8000aec <__aeabi_dcmplt>
 8003ff4:	b110      	cbz	r0, 8003ffc <_printf_float+0x90>
 8003ff6:	232d      	movs	r3, #45	; 0x2d
 8003ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ffc:	4b93      	ldr	r3, [pc, #588]	; (800424c <_printf_float+0x2e0>)
 8003ffe:	4894      	ldr	r0, [pc, #592]	; (8004250 <_printf_float+0x2e4>)
 8004000:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004004:	bf94      	ite	ls
 8004006:	4698      	movls	r8, r3
 8004008:	4680      	movhi	r8, r0
 800400a:	2303      	movs	r3, #3
 800400c:	6123      	str	r3, [r4, #16]
 800400e:	9b05      	ldr	r3, [sp, #20]
 8004010:	f023 0204 	bic.w	r2, r3, #4
 8004014:	6022      	str	r2, [r4, #0]
 8004016:	f04f 0900 	mov.w	r9, #0
 800401a:	9700      	str	r7, [sp, #0]
 800401c:	4633      	mov	r3, r6
 800401e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004020:	4621      	mov	r1, r4
 8004022:	4628      	mov	r0, r5
 8004024:	f000 f9d8 	bl	80043d8 <_printf_common>
 8004028:	3001      	adds	r0, #1
 800402a:	f040 8090 	bne.w	800414e <_printf_float+0x1e2>
 800402e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004032:	b00d      	add	sp, #52	; 0x34
 8004034:	ecbd 8b02 	vpop	{d8}
 8004038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800403c:	4642      	mov	r2, r8
 800403e:	464b      	mov	r3, r9
 8004040:	4640      	mov	r0, r8
 8004042:	4649      	mov	r1, r9
 8004044:	f7fc fd7a 	bl	8000b3c <__aeabi_dcmpun>
 8004048:	b140      	cbz	r0, 800405c <_printf_float+0xf0>
 800404a:	464b      	mov	r3, r9
 800404c:	2b00      	cmp	r3, #0
 800404e:	bfbc      	itt	lt
 8004050:	232d      	movlt	r3, #45	; 0x2d
 8004052:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004056:	487f      	ldr	r0, [pc, #508]	; (8004254 <_printf_float+0x2e8>)
 8004058:	4b7f      	ldr	r3, [pc, #508]	; (8004258 <_printf_float+0x2ec>)
 800405a:	e7d1      	b.n	8004000 <_printf_float+0x94>
 800405c:	6863      	ldr	r3, [r4, #4]
 800405e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004062:	9206      	str	r2, [sp, #24]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	d13f      	bne.n	80040e8 <_printf_float+0x17c>
 8004068:	2306      	movs	r3, #6
 800406a:	6063      	str	r3, [r4, #4]
 800406c:	9b05      	ldr	r3, [sp, #20]
 800406e:	6861      	ldr	r1, [r4, #4]
 8004070:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004074:	2300      	movs	r3, #0
 8004076:	9303      	str	r3, [sp, #12]
 8004078:	ab0a      	add	r3, sp, #40	; 0x28
 800407a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800407e:	ab09      	add	r3, sp, #36	; 0x24
 8004080:	ec49 8b10 	vmov	d0, r8, r9
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	6022      	str	r2, [r4, #0]
 8004088:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800408c:	4628      	mov	r0, r5
 800408e:	f7ff fecd 	bl	8003e2c <__cvt>
 8004092:	9b06      	ldr	r3, [sp, #24]
 8004094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004096:	2b47      	cmp	r3, #71	; 0x47
 8004098:	4680      	mov	r8, r0
 800409a:	d108      	bne.n	80040ae <_printf_float+0x142>
 800409c:	1cc8      	adds	r0, r1, #3
 800409e:	db02      	blt.n	80040a6 <_printf_float+0x13a>
 80040a0:	6863      	ldr	r3, [r4, #4]
 80040a2:	4299      	cmp	r1, r3
 80040a4:	dd41      	ble.n	800412a <_printf_float+0x1be>
 80040a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80040aa:	fa5f fb8b 	uxtb.w	fp, fp
 80040ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80040b2:	d820      	bhi.n	80040f6 <_printf_float+0x18a>
 80040b4:	3901      	subs	r1, #1
 80040b6:	465a      	mov	r2, fp
 80040b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80040bc:	9109      	str	r1, [sp, #36]	; 0x24
 80040be:	f7ff ff17 	bl	8003ef0 <__exponent>
 80040c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040c4:	1813      	adds	r3, r2, r0
 80040c6:	2a01      	cmp	r2, #1
 80040c8:	4681      	mov	r9, r0
 80040ca:	6123      	str	r3, [r4, #16]
 80040cc:	dc02      	bgt.n	80040d4 <_printf_float+0x168>
 80040ce:	6822      	ldr	r2, [r4, #0]
 80040d0:	07d2      	lsls	r2, r2, #31
 80040d2:	d501      	bpl.n	80040d8 <_printf_float+0x16c>
 80040d4:	3301      	adds	r3, #1
 80040d6:	6123      	str	r3, [r4, #16]
 80040d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d09c      	beq.n	800401a <_printf_float+0xae>
 80040e0:	232d      	movs	r3, #45	; 0x2d
 80040e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e6:	e798      	b.n	800401a <_printf_float+0xae>
 80040e8:	9a06      	ldr	r2, [sp, #24]
 80040ea:	2a47      	cmp	r2, #71	; 0x47
 80040ec:	d1be      	bne.n	800406c <_printf_float+0x100>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1bc      	bne.n	800406c <_printf_float+0x100>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e7b9      	b.n	800406a <_printf_float+0xfe>
 80040f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80040fa:	d118      	bne.n	800412e <_printf_float+0x1c2>
 80040fc:	2900      	cmp	r1, #0
 80040fe:	6863      	ldr	r3, [r4, #4]
 8004100:	dd0b      	ble.n	800411a <_printf_float+0x1ae>
 8004102:	6121      	str	r1, [r4, #16]
 8004104:	b913      	cbnz	r3, 800410c <_printf_float+0x1a0>
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	07d0      	lsls	r0, r2, #31
 800410a:	d502      	bpl.n	8004112 <_printf_float+0x1a6>
 800410c:	3301      	adds	r3, #1
 800410e:	440b      	add	r3, r1
 8004110:	6123      	str	r3, [r4, #16]
 8004112:	65a1      	str	r1, [r4, #88]	; 0x58
 8004114:	f04f 0900 	mov.w	r9, #0
 8004118:	e7de      	b.n	80040d8 <_printf_float+0x16c>
 800411a:	b913      	cbnz	r3, 8004122 <_printf_float+0x1b6>
 800411c:	6822      	ldr	r2, [r4, #0]
 800411e:	07d2      	lsls	r2, r2, #31
 8004120:	d501      	bpl.n	8004126 <_printf_float+0x1ba>
 8004122:	3302      	adds	r3, #2
 8004124:	e7f4      	b.n	8004110 <_printf_float+0x1a4>
 8004126:	2301      	movs	r3, #1
 8004128:	e7f2      	b.n	8004110 <_printf_float+0x1a4>
 800412a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800412e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004130:	4299      	cmp	r1, r3
 8004132:	db05      	blt.n	8004140 <_printf_float+0x1d4>
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	6121      	str	r1, [r4, #16]
 8004138:	07d8      	lsls	r0, r3, #31
 800413a:	d5ea      	bpl.n	8004112 <_printf_float+0x1a6>
 800413c:	1c4b      	adds	r3, r1, #1
 800413e:	e7e7      	b.n	8004110 <_printf_float+0x1a4>
 8004140:	2900      	cmp	r1, #0
 8004142:	bfd4      	ite	le
 8004144:	f1c1 0202 	rsble	r2, r1, #2
 8004148:	2201      	movgt	r2, #1
 800414a:	4413      	add	r3, r2
 800414c:	e7e0      	b.n	8004110 <_printf_float+0x1a4>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	055a      	lsls	r2, r3, #21
 8004152:	d407      	bmi.n	8004164 <_printf_float+0x1f8>
 8004154:	6923      	ldr	r3, [r4, #16]
 8004156:	4642      	mov	r2, r8
 8004158:	4631      	mov	r1, r6
 800415a:	4628      	mov	r0, r5
 800415c:	47b8      	blx	r7
 800415e:	3001      	adds	r0, #1
 8004160:	d12c      	bne.n	80041bc <_printf_float+0x250>
 8004162:	e764      	b.n	800402e <_printf_float+0xc2>
 8004164:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004168:	f240 80e0 	bls.w	800432c <_printf_float+0x3c0>
 800416c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004170:	2200      	movs	r2, #0
 8004172:	2300      	movs	r3, #0
 8004174:	f7fc fcb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004178:	2800      	cmp	r0, #0
 800417a:	d034      	beq.n	80041e6 <_printf_float+0x27a>
 800417c:	4a37      	ldr	r2, [pc, #220]	; (800425c <_printf_float+0x2f0>)
 800417e:	2301      	movs	r3, #1
 8004180:	4631      	mov	r1, r6
 8004182:	4628      	mov	r0, r5
 8004184:	47b8      	blx	r7
 8004186:	3001      	adds	r0, #1
 8004188:	f43f af51 	beq.w	800402e <_printf_float+0xc2>
 800418c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004190:	429a      	cmp	r2, r3
 8004192:	db02      	blt.n	800419a <_printf_float+0x22e>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	07d8      	lsls	r0, r3, #31
 8004198:	d510      	bpl.n	80041bc <_printf_float+0x250>
 800419a:	ee18 3a10 	vmov	r3, s16
 800419e:	4652      	mov	r2, sl
 80041a0:	4631      	mov	r1, r6
 80041a2:	4628      	mov	r0, r5
 80041a4:	47b8      	blx	r7
 80041a6:	3001      	adds	r0, #1
 80041a8:	f43f af41 	beq.w	800402e <_printf_float+0xc2>
 80041ac:	f04f 0800 	mov.w	r8, #0
 80041b0:	f104 091a 	add.w	r9, r4, #26
 80041b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041b6:	3b01      	subs	r3, #1
 80041b8:	4543      	cmp	r3, r8
 80041ba:	dc09      	bgt.n	80041d0 <_printf_float+0x264>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	079b      	lsls	r3, r3, #30
 80041c0:	f100 8105 	bmi.w	80043ce <_printf_float+0x462>
 80041c4:	68e0      	ldr	r0, [r4, #12]
 80041c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041c8:	4298      	cmp	r0, r3
 80041ca:	bfb8      	it	lt
 80041cc:	4618      	movlt	r0, r3
 80041ce:	e730      	b.n	8004032 <_printf_float+0xc6>
 80041d0:	2301      	movs	r3, #1
 80041d2:	464a      	mov	r2, r9
 80041d4:	4631      	mov	r1, r6
 80041d6:	4628      	mov	r0, r5
 80041d8:	47b8      	blx	r7
 80041da:	3001      	adds	r0, #1
 80041dc:	f43f af27 	beq.w	800402e <_printf_float+0xc2>
 80041e0:	f108 0801 	add.w	r8, r8, #1
 80041e4:	e7e6      	b.n	80041b4 <_printf_float+0x248>
 80041e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	dc39      	bgt.n	8004260 <_printf_float+0x2f4>
 80041ec:	4a1b      	ldr	r2, [pc, #108]	; (800425c <_printf_float+0x2f0>)
 80041ee:	2301      	movs	r3, #1
 80041f0:	4631      	mov	r1, r6
 80041f2:	4628      	mov	r0, r5
 80041f4:	47b8      	blx	r7
 80041f6:	3001      	adds	r0, #1
 80041f8:	f43f af19 	beq.w	800402e <_printf_float+0xc2>
 80041fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004200:	4313      	orrs	r3, r2
 8004202:	d102      	bne.n	800420a <_printf_float+0x29e>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	07d9      	lsls	r1, r3, #31
 8004208:	d5d8      	bpl.n	80041bc <_printf_float+0x250>
 800420a:	ee18 3a10 	vmov	r3, s16
 800420e:	4652      	mov	r2, sl
 8004210:	4631      	mov	r1, r6
 8004212:	4628      	mov	r0, r5
 8004214:	47b8      	blx	r7
 8004216:	3001      	adds	r0, #1
 8004218:	f43f af09 	beq.w	800402e <_printf_float+0xc2>
 800421c:	f04f 0900 	mov.w	r9, #0
 8004220:	f104 0a1a 	add.w	sl, r4, #26
 8004224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004226:	425b      	negs	r3, r3
 8004228:	454b      	cmp	r3, r9
 800422a:	dc01      	bgt.n	8004230 <_printf_float+0x2c4>
 800422c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800422e:	e792      	b.n	8004156 <_printf_float+0x1ea>
 8004230:	2301      	movs	r3, #1
 8004232:	4652      	mov	r2, sl
 8004234:	4631      	mov	r1, r6
 8004236:	4628      	mov	r0, r5
 8004238:	47b8      	blx	r7
 800423a:	3001      	adds	r0, #1
 800423c:	f43f aef7 	beq.w	800402e <_printf_float+0xc2>
 8004240:	f109 0901 	add.w	r9, r9, #1
 8004244:	e7ee      	b.n	8004224 <_printf_float+0x2b8>
 8004246:	bf00      	nop
 8004248:	7fefffff 	.word	0x7fefffff
 800424c:	0800680c 	.word	0x0800680c
 8004250:	08006810 	.word	0x08006810
 8004254:	08006818 	.word	0x08006818
 8004258:	08006814 	.word	0x08006814
 800425c:	0800681c 	.word	0x0800681c
 8004260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004264:	429a      	cmp	r2, r3
 8004266:	bfa8      	it	ge
 8004268:	461a      	movge	r2, r3
 800426a:	2a00      	cmp	r2, #0
 800426c:	4691      	mov	r9, r2
 800426e:	dc37      	bgt.n	80042e0 <_printf_float+0x374>
 8004270:	f04f 0b00 	mov.w	fp, #0
 8004274:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004278:	f104 021a 	add.w	r2, r4, #26
 800427c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800427e:	9305      	str	r3, [sp, #20]
 8004280:	eba3 0309 	sub.w	r3, r3, r9
 8004284:	455b      	cmp	r3, fp
 8004286:	dc33      	bgt.n	80042f0 <_printf_float+0x384>
 8004288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800428c:	429a      	cmp	r2, r3
 800428e:	db3b      	blt.n	8004308 <_printf_float+0x39c>
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	07da      	lsls	r2, r3, #31
 8004294:	d438      	bmi.n	8004308 <_printf_float+0x39c>
 8004296:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004298:	9b05      	ldr	r3, [sp, #20]
 800429a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	eba2 0901 	sub.w	r9, r2, r1
 80042a2:	4599      	cmp	r9, r3
 80042a4:	bfa8      	it	ge
 80042a6:	4699      	movge	r9, r3
 80042a8:	f1b9 0f00 	cmp.w	r9, #0
 80042ac:	dc35      	bgt.n	800431a <_printf_float+0x3ae>
 80042ae:	f04f 0800 	mov.w	r8, #0
 80042b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042b6:	f104 0a1a 	add.w	sl, r4, #26
 80042ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	eba3 0309 	sub.w	r3, r3, r9
 80042c4:	4543      	cmp	r3, r8
 80042c6:	f77f af79 	ble.w	80041bc <_printf_float+0x250>
 80042ca:	2301      	movs	r3, #1
 80042cc:	4652      	mov	r2, sl
 80042ce:	4631      	mov	r1, r6
 80042d0:	4628      	mov	r0, r5
 80042d2:	47b8      	blx	r7
 80042d4:	3001      	adds	r0, #1
 80042d6:	f43f aeaa 	beq.w	800402e <_printf_float+0xc2>
 80042da:	f108 0801 	add.w	r8, r8, #1
 80042de:	e7ec      	b.n	80042ba <_printf_float+0x34e>
 80042e0:	4613      	mov	r3, r2
 80042e2:	4631      	mov	r1, r6
 80042e4:	4642      	mov	r2, r8
 80042e6:	4628      	mov	r0, r5
 80042e8:	47b8      	blx	r7
 80042ea:	3001      	adds	r0, #1
 80042ec:	d1c0      	bne.n	8004270 <_printf_float+0x304>
 80042ee:	e69e      	b.n	800402e <_printf_float+0xc2>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4631      	mov	r1, r6
 80042f4:	4628      	mov	r0, r5
 80042f6:	9205      	str	r2, [sp, #20]
 80042f8:	47b8      	blx	r7
 80042fa:	3001      	adds	r0, #1
 80042fc:	f43f ae97 	beq.w	800402e <_printf_float+0xc2>
 8004300:	9a05      	ldr	r2, [sp, #20]
 8004302:	f10b 0b01 	add.w	fp, fp, #1
 8004306:	e7b9      	b.n	800427c <_printf_float+0x310>
 8004308:	ee18 3a10 	vmov	r3, s16
 800430c:	4652      	mov	r2, sl
 800430e:	4631      	mov	r1, r6
 8004310:	4628      	mov	r0, r5
 8004312:	47b8      	blx	r7
 8004314:	3001      	adds	r0, #1
 8004316:	d1be      	bne.n	8004296 <_printf_float+0x32a>
 8004318:	e689      	b.n	800402e <_printf_float+0xc2>
 800431a:	9a05      	ldr	r2, [sp, #20]
 800431c:	464b      	mov	r3, r9
 800431e:	4442      	add	r2, r8
 8004320:	4631      	mov	r1, r6
 8004322:	4628      	mov	r0, r5
 8004324:	47b8      	blx	r7
 8004326:	3001      	adds	r0, #1
 8004328:	d1c1      	bne.n	80042ae <_printf_float+0x342>
 800432a:	e680      	b.n	800402e <_printf_float+0xc2>
 800432c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800432e:	2a01      	cmp	r2, #1
 8004330:	dc01      	bgt.n	8004336 <_printf_float+0x3ca>
 8004332:	07db      	lsls	r3, r3, #31
 8004334:	d538      	bpl.n	80043a8 <_printf_float+0x43c>
 8004336:	2301      	movs	r3, #1
 8004338:	4642      	mov	r2, r8
 800433a:	4631      	mov	r1, r6
 800433c:	4628      	mov	r0, r5
 800433e:	47b8      	blx	r7
 8004340:	3001      	adds	r0, #1
 8004342:	f43f ae74 	beq.w	800402e <_printf_float+0xc2>
 8004346:	ee18 3a10 	vmov	r3, s16
 800434a:	4652      	mov	r2, sl
 800434c:	4631      	mov	r1, r6
 800434e:	4628      	mov	r0, r5
 8004350:	47b8      	blx	r7
 8004352:	3001      	adds	r0, #1
 8004354:	f43f ae6b 	beq.w	800402e <_printf_float+0xc2>
 8004358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800435c:	2200      	movs	r2, #0
 800435e:	2300      	movs	r3, #0
 8004360:	f7fc fbba 	bl	8000ad8 <__aeabi_dcmpeq>
 8004364:	b9d8      	cbnz	r0, 800439e <_printf_float+0x432>
 8004366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004368:	f108 0201 	add.w	r2, r8, #1
 800436c:	3b01      	subs	r3, #1
 800436e:	4631      	mov	r1, r6
 8004370:	4628      	mov	r0, r5
 8004372:	47b8      	blx	r7
 8004374:	3001      	adds	r0, #1
 8004376:	d10e      	bne.n	8004396 <_printf_float+0x42a>
 8004378:	e659      	b.n	800402e <_printf_float+0xc2>
 800437a:	2301      	movs	r3, #1
 800437c:	4652      	mov	r2, sl
 800437e:	4631      	mov	r1, r6
 8004380:	4628      	mov	r0, r5
 8004382:	47b8      	blx	r7
 8004384:	3001      	adds	r0, #1
 8004386:	f43f ae52 	beq.w	800402e <_printf_float+0xc2>
 800438a:	f108 0801 	add.w	r8, r8, #1
 800438e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004390:	3b01      	subs	r3, #1
 8004392:	4543      	cmp	r3, r8
 8004394:	dcf1      	bgt.n	800437a <_printf_float+0x40e>
 8004396:	464b      	mov	r3, r9
 8004398:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800439c:	e6dc      	b.n	8004158 <_printf_float+0x1ec>
 800439e:	f04f 0800 	mov.w	r8, #0
 80043a2:	f104 0a1a 	add.w	sl, r4, #26
 80043a6:	e7f2      	b.n	800438e <_printf_float+0x422>
 80043a8:	2301      	movs	r3, #1
 80043aa:	4642      	mov	r2, r8
 80043ac:	e7df      	b.n	800436e <_printf_float+0x402>
 80043ae:	2301      	movs	r3, #1
 80043b0:	464a      	mov	r2, r9
 80043b2:	4631      	mov	r1, r6
 80043b4:	4628      	mov	r0, r5
 80043b6:	47b8      	blx	r7
 80043b8:	3001      	adds	r0, #1
 80043ba:	f43f ae38 	beq.w	800402e <_printf_float+0xc2>
 80043be:	f108 0801 	add.w	r8, r8, #1
 80043c2:	68e3      	ldr	r3, [r4, #12]
 80043c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043c6:	1a5b      	subs	r3, r3, r1
 80043c8:	4543      	cmp	r3, r8
 80043ca:	dcf0      	bgt.n	80043ae <_printf_float+0x442>
 80043cc:	e6fa      	b.n	80041c4 <_printf_float+0x258>
 80043ce:	f04f 0800 	mov.w	r8, #0
 80043d2:	f104 0919 	add.w	r9, r4, #25
 80043d6:	e7f4      	b.n	80043c2 <_printf_float+0x456>

080043d8 <_printf_common>:
 80043d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043dc:	4616      	mov	r6, r2
 80043de:	4699      	mov	r9, r3
 80043e0:	688a      	ldr	r2, [r1, #8]
 80043e2:	690b      	ldr	r3, [r1, #16]
 80043e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bfb8      	it	lt
 80043ec:	4613      	movlt	r3, r2
 80043ee:	6033      	str	r3, [r6, #0]
 80043f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043f4:	4607      	mov	r7, r0
 80043f6:	460c      	mov	r4, r1
 80043f8:	b10a      	cbz	r2, 80043fe <_printf_common+0x26>
 80043fa:	3301      	adds	r3, #1
 80043fc:	6033      	str	r3, [r6, #0]
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	0699      	lsls	r1, r3, #26
 8004402:	bf42      	ittt	mi
 8004404:	6833      	ldrmi	r3, [r6, #0]
 8004406:	3302      	addmi	r3, #2
 8004408:	6033      	strmi	r3, [r6, #0]
 800440a:	6825      	ldr	r5, [r4, #0]
 800440c:	f015 0506 	ands.w	r5, r5, #6
 8004410:	d106      	bne.n	8004420 <_printf_common+0x48>
 8004412:	f104 0a19 	add.w	sl, r4, #25
 8004416:	68e3      	ldr	r3, [r4, #12]
 8004418:	6832      	ldr	r2, [r6, #0]
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	42ab      	cmp	r3, r5
 800441e:	dc26      	bgt.n	800446e <_printf_common+0x96>
 8004420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004424:	1e13      	subs	r3, r2, #0
 8004426:	6822      	ldr	r2, [r4, #0]
 8004428:	bf18      	it	ne
 800442a:	2301      	movne	r3, #1
 800442c:	0692      	lsls	r2, r2, #26
 800442e:	d42b      	bmi.n	8004488 <_printf_common+0xb0>
 8004430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004434:	4649      	mov	r1, r9
 8004436:	4638      	mov	r0, r7
 8004438:	47c0      	blx	r8
 800443a:	3001      	adds	r0, #1
 800443c:	d01e      	beq.n	800447c <_printf_common+0xa4>
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	68e5      	ldr	r5, [r4, #12]
 8004442:	6832      	ldr	r2, [r6, #0]
 8004444:	f003 0306 	and.w	r3, r3, #6
 8004448:	2b04      	cmp	r3, #4
 800444a:	bf08      	it	eq
 800444c:	1aad      	subeq	r5, r5, r2
 800444e:	68a3      	ldr	r3, [r4, #8]
 8004450:	6922      	ldr	r2, [r4, #16]
 8004452:	bf0c      	ite	eq
 8004454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004458:	2500      	movne	r5, #0
 800445a:	4293      	cmp	r3, r2
 800445c:	bfc4      	itt	gt
 800445e:	1a9b      	subgt	r3, r3, r2
 8004460:	18ed      	addgt	r5, r5, r3
 8004462:	2600      	movs	r6, #0
 8004464:	341a      	adds	r4, #26
 8004466:	42b5      	cmp	r5, r6
 8004468:	d11a      	bne.n	80044a0 <_printf_common+0xc8>
 800446a:	2000      	movs	r0, #0
 800446c:	e008      	b.n	8004480 <_printf_common+0xa8>
 800446e:	2301      	movs	r3, #1
 8004470:	4652      	mov	r2, sl
 8004472:	4649      	mov	r1, r9
 8004474:	4638      	mov	r0, r7
 8004476:	47c0      	blx	r8
 8004478:	3001      	adds	r0, #1
 800447a:	d103      	bne.n	8004484 <_printf_common+0xac>
 800447c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004484:	3501      	adds	r5, #1
 8004486:	e7c6      	b.n	8004416 <_printf_common+0x3e>
 8004488:	18e1      	adds	r1, r4, r3
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	2030      	movs	r0, #48	; 0x30
 800448e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004492:	4422      	add	r2, r4
 8004494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800449c:	3302      	adds	r3, #2
 800449e:	e7c7      	b.n	8004430 <_printf_common+0x58>
 80044a0:	2301      	movs	r3, #1
 80044a2:	4622      	mov	r2, r4
 80044a4:	4649      	mov	r1, r9
 80044a6:	4638      	mov	r0, r7
 80044a8:	47c0      	blx	r8
 80044aa:	3001      	adds	r0, #1
 80044ac:	d0e6      	beq.n	800447c <_printf_common+0xa4>
 80044ae:	3601      	adds	r6, #1
 80044b0:	e7d9      	b.n	8004466 <_printf_common+0x8e>
	...

080044b4 <_printf_i>:
 80044b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044b8:	460c      	mov	r4, r1
 80044ba:	4691      	mov	r9, r2
 80044bc:	7e27      	ldrb	r7, [r4, #24]
 80044be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044c0:	2f78      	cmp	r7, #120	; 0x78
 80044c2:	4680      	mov	r8, r0
 80044c4:	469a      	mov	sl, r3
 80044c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044ca:	d807      	bhi.n	80044dc <_printf_i+0x28>
 80044cc:	2f62      	cmp	r7, #98	; 0x62
 80044ce:	d80a      	bhi.n	80044e6 <_printf_i+0x32>
 80044d0:	2f00      	cmp	r7, #0
 80044d2:	f000 80d8 	beq.w	8004686 <_printf_i+0x1d2>
 80044d6:	2f58      	cmp	r7, #88	; 0x58
 80044d8:	f000 80a3 	beq.w	8004622 <_printf_i+0x16e>
 80044dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044e4:	e03a      	b.n	800455c <_printf_i+0xa8>
 80044e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044ea:	2b15      	cmp	r3, #21
 80044ec:	d8f6      	bhi.n	80044dc <_printf_i+0x28>
 80044ee:	a001      	add	r0, pc, #4	; (adr r0, 80044f4 <_printf_i+0x40>)
 80044f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044f4:	0800454d 	.word	0x0800454d
 80044f8:	08004561 	.word	0x08004561
 80044fc:	080044dd 	.word	0x080044dd
 8004500:	080044dd 	.word	0x080044dd
 8004504:	080044dd 	.word	0x080044dd
 8004508:	080044dd 	.word	0x080044dd
 800450c:	08004561 	.word	0x08004561
 8004510:	080044dd 	.word	0x080044dd
 8004514:	080044dd 	.word	0x080044dd
 8004518:	080044dd 	.word	0x080044dd
 800451c:	080044dd 	.word	0x080044dd
 8004520:	0800466d 	.word	0x0800466d
 8004524:	08004591 	.word	0x08004591
 8004528:	0800464f 	.word	0x0800464f
 800452c:	080044dd 	.word	0x080044dd
 8004530:	080044dd 	.word	0x080044dd
 8004534:	0800468f 	.word	0x0800468f
 8004538:	080044dd 	.word	0x080044dd
 800453c:	08004591 	.word	0x08004591
 8004540:	080044dd 	.word	0x080044dd
 8004544:	080044dd 	.word	0x080044dd
 8004548:	08004657 	.word	0x08004657
 800454c:	680b      	ldr	r3, [r1, #0]
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	600a      	str	r2, [r1, #0]
 8004554:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800455c:	2301      	movs	r3, #1
 800455e:	e0a3      	b.n	80046a8 <_printf_i+0x1f4>
 8004560:	6825      	ldr	r5, [r4, #0]
 8004562:	6808      	ldr	r0, [r1, #0]
 8004564:	062e      	lsls	r6, r5, #24
 8004566:	f100 0304 	add.w	r3, r0, #4
 800456a:	d50a      	bpl.n	8004582 <_printf_i+0xce>
 800456c:	6805      	ldr	r5, [r0, #0]
 800456e:	600b      	str	r3, [r1, #0]
 8004570:	2d00      	cmp	r5, #0
 8004572:	da03      	bge.n	800457c <_printf_i+0xc8>
 8004574:	232d      	movs	r3, #45	; 0x2d
 8004576:	426d      	negs	r5, r5
 8004578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800457c:	485e      	ldr	r0, [pc, #376]	; (80046f8 <_printf_i+0x244>)
 800457e:	230a      	movs	r3, #10
 8004580:	e019      	b.n	80045b6 <_printf_i+0x102>
 8004582:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004586:	6805      	ldr	r5, [r0, #0]
 8004588:	600b      	str	r3, [r1, #0]
 800458a:	bf18      	it	ne
 800458c:	b22d      	sxthne	r5, r5
 800458e:	e7ef      	b.n	8004570 <_printf_i+0xbc>
 8004590:	680b      	ldr	r3, [r1, #0]
 8004592:	6825      	ldr	r5, [r4, #0]
 8004594:	1d18      	adds	r0, r3, #4
 8004596:	6008      	str	r0, [r1, #0]
 8004598:	0628      	lsls	r0, r5, #24
 800459a:	d501      	bpl.n	80045a0 <_printf_i+0xec>
 800459c:	681d      	ldr	r5, [r3, #0]
 800459e:	e002      	b.n	80045a6 <_printf_i+0xf2>
 80045a0:	0669      	lsls	r1, r5, #25
 80045a2:	d5fb      	bpl.n	800459c <_printf_i+0xe8>
 80045a4:	881d      	ldrh	r5, [r3, #0]
 80045a6:	4854      	ldr	r0, [pc, #336]	; (80046f8 <_printf_i+0x244>)
 80045a8:	2f6f      	cmp	r7, #111	; 0x6f
 80045aa:	bf0c      	ite	eq
 80045ac:	2308      	moveq	r3, #8
 80045ae:	230a      	movne	r3, #10
 80045b0:	2100      	movs	r1, #0
 80045b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045b6:	6866      	ldr	r6, [r4, #4]
 80045b8:	60a6      	str	r6, [r4, #8]
 80045ba:	2e00      	cmp	r6, #0
 80045bc:	bfa2      	ittt	ge
 80045be:	6821      	ldrge	r1, [r4, #0]
 80045c0:	f021 0104 	bicge.w	r1, r1, #4
 80045c4:	6021      	strge	r1, [r4, #0]
 80045c6:	b90d      	cbnz	r5, 80045cc <_printf_i+0x118>
 80045c8:	2e00      	cmp	r6, #0
 80045ca:	d04d      	beq.n	8004668 <_printf_i+0x1b4>
 80045cc:	4616      	mov	r6, r2
 80045ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80045d2:	fb03 5711 	mls	r7, r3, r1, r5
 80045d6:	5dc7      	ldrb	r7, [r0, r7]
 80045d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045dc:	462f      	mov	r7, r5
 80045de:	42bb      	cmp	r3, r7
 80045e0:	460d      	mov	r5, r1
 80045e2:	d9f4      	bls.n	80045ce <_printf_i+0x11a>
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d10b      	bne.n	8004600 <_printf_i+0x14c>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	07df      	lsls	r7, r3, #31
 80045ec:	d508      	bpl.n	8004600 <_printf_i+0x14c>
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	6861      	ldr	r1, [r4, #4]
 80045f2:	4299      	cmp	r1, r3
 80045f4:	bfde      	ittt	le
 80045f6:	2330      	movle	r3, #48	; 0x30
 80045f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045fc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004600:	1b92      	subs	r2, r2, r6
 8004602:	6122      	str	r2, [r4, #16]
 8004604:	f8cd a000 	str.w	sl, [sp]
 8004608:	464b      	mov	r3, r9
 800460a:	aa03      	add	r2, sp, #12
 800460c:	4621      	mov	r1, r4
 800460e:	4640      	mov	r0, r8
 8004610:	f7ff fee2 	bl	80043d8 <_printf_common>
 8004614:	3001      	adds	r0, #1
 8004616:	d14c      	bne.n	80046b2 <_printf_i+0x1fe>
 8004618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800461c:	b004      	add	sp, #16
 800461e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004622:	4835      	ldr	r0, [pc, #212]	; (80046f8 <_printf_i+0x244>)
 8004624:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	680e      	ldr	r6, [r1, #0]
 800462c:	061f      	lsls	r7, r3, #24
 800462e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004632:	600e      	str	r6, [r1, #0]
 8004634:	d514      	bpl.n	8004660 <_printf_i+0x1ac>
 8004636:	07d9      	lsls	r1, r3, #31
 8004638:	bf44      	itt	mi
 800463a:	f043 0320 	orrmi.w	r3, r3, #32
 800463e:	6023      	strmi	r3, [r4, #0]
 8004640:	b91d      	cbnz	r5, 800464a <_printf_i+0x196>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	f023 0320 	bic.w	r3, r3, #32
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	2310      	movs	r3, #16
 800464c:	e7b0      	b.n	80045b0 <_printf_i+0xfc>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	f043 0320 	orr.w	r3, r3, #32
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	2378      	movs	r3, #120	; 0x78
 8004658:	4828      	ldr	r0, [pc, #160]	; (80046fc <_printf_i+0x248>)
 800465a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800465e:	e7e3      	b.n	8004628 <_printf_i+0x174>
 8004660:	065e      	lsls	r6, r3, #25
 8004662:	bf48      	it	mi
 8004664:	b2ad      	uxthmi	r5, r5
 8004666:	e7e6      	b.n	8004636 <_printf_i+0x182>
 8004668:	4616      	mov	r6, r2
 800466a:	e7bb      	b.n	80045e4 <_printf_i+0x130>
 800466c:	680b      	ldr	r3, [r1, #0]
 800466e:	6826      	ldr	r6, [r4, #0]
 8004670:	6960      	ldr	r0, [r4, #20]
 8004672:	1d1d      	adds	r5, r3, #4
 8004674:	600d      	str	r5, [r1, #0]
 8004676:	0635      	lsls	r5, r6, #24
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	d501      	bpl.n	8004680 <_printf_i+0x1cc>
 800467c:	6018      	str	r0, [r3, #0]
 800467e:	e002      	b.n	8004686 <_printf_i+0x1d2>
 8004680:	0671      	lsls	r1, r6, #25
 8004682:	d5fb      	bpl.n	800467c <_printf_i+0x1c8>
 8004684:	8018      	strh	r0, [r3, #0]
 8004686:	2300      	movs	r3, #0
 8004688:	6123      	str	r3, [r4, #16]
 800468a:	4616      	mov	r6, r2
 800468c:	e7ba      	b.n	8004604 <_printf_i+0x150>
 800468e:	680b      	ldr	r3, [r1, #0]
 8004690:	1d1a      	adds	r2, r3, #4
 8004692:	600a      	str	r2, [r1, #0]
 8004694:	681e      	ldr	r6, [r3, #0]
 8004696:	6862      	ldr	r2, [r4, #4]
 8004698:	2100      	movs	r1, #0
 800469a:	4630      	mov	r0, r6
 800469c:	f7fb fda8 	bl	80001f0 <memchr>
 80046a0:	b108      	cbz	r0, 80046a6 <_printf_i+0x1f2>
 80046a2:	1b80      	subs	r0, r0, r6
 80046a4:	6060      	str	r0, [r4, #4]
 80046a6:	6863      	ldr	r3, [r4, #4]
 80046a8:	6123      	str	r3, [r4, #16]
 80046aa:	2300      	movs	r3, #0
 80046ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b0:	e7a8      	b.n	8004604 <_printf_i+0x150>
 80046b2:	6923      	ldr	r3, [r4, #16]
 80046b4:	4632      	mov	r2, r6
 80046b6:	4649      	mov	r1, r9
 80046b8:	4640      	mov	r0, r8
 80046ba:	47d0      	blx	sl
 80046bc:	3001      	adds	r0, #1
 80046be:	d0ab      	beq.n	8004618 <_printf_i+0x164>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	079b      	lsls	r3, r3, #30
 80046c4:	d413      	bmi.n	80046ee <_printf_i+0x23a>
 80046c6:	68e0      	ldr	r0, [r4, #12]
 80046c8:	9b03      	ldr	r3, [sp, #12]
 80046ca:	4298      	cmp	r0, r3
 80046cc:	bfb8      	it	lt
 80046ce:	4618      	movlt	r0, r3
 80046d0:	e7a4      	b.n	800461c <_printf_i+0x168>
 80046d2:	2301      	movs	r3, #1
 80046d4:	4632      	mov	r2, r6
 80046d6:	4649      	mov	r1, r9
 80046d8:	4640      	mov	r0, r8
 80046da:	47d0      	blx	sl
 80046dc:	3001      	adds	r0, #1
 80046de:	d09b      	beq.n	8004618 <_printf_i+0x164>
 80046e0:	3501      	adds	r5, #1
 80046e2:	68e3      	ldr	r3, [r4, #12]
 80046e4:	9903      	ldr	r1, [sp, #12]
 80046e6:	1a5b      	subs	r3, r3, r1
 80046e8:	42ab      	cmp	r3, r5
 80046ea:	dcf2      	bgt.n	80046d2 <_printf_i+0x21e>
 80046ec:	e7eb      	b.n	80046c6 <_printf_i+0x212>
 80046ee:	2500      	movs	r5, #0
 80046f0:	f104 0619 	add.w	r6, r4, #25
 80046f4:	e7f5      	b.n	80046e2 <_printf_i+0x22e>
 80046f6:	bf00      	nop
 80046f8:	0800681e 	.word	0x0800681e
 80046fc:	0800682f 	.word	0x0800682f

08004700 <__assert_func>:
 8004700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004702:	4614      	mov	r4, r2
 8004704:	461a      	mov	r2, r3
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <__assert_func+0x2c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4605      	mov	r5, r0
 800470c:	68d8      	ldr	r0, [r3, #12]
 800470e:	b14c      	cbz	r4, 8004724 <__assert_func+0x24>
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <__assert_func+0x30>)
 8004712:	9100      	str	r1, [sp, #0]
 8004714:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004718:	4906      	ldr	r1, [pc, #24]	; (8004734 <__assert_func+0x34>)
 800471a:	462b      	mov	r3, r5
 800471c:	f000 fe88 	bl	8005430 <fiprintf>
 8004720:	f001 fd34 	bl	800618c <abort>
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <__assert_func+0x38>)
 8004726:	461c      	mov	r4, r3
 8004728:	e7f3      	b.n	8004712 <__assert_func+0x12>
 800472a:	bf00      	nop
 800472c:	2000000c 	.word	0x2000000c
 8004730:	08006840 	.word	0x08006840
 8004734:	0800684d 	.word	0x0800684d
 8004738:	0800687b 	.word	0x0800687b

0800473c <quorem>:
 800473c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004740:	6903      	ldr	r3, [r0, #16]
 8004742:	690c      	ldr	r4, [r1, #16]
 8004744:	42a3      	cmp	r3, r4
 8004746:	4607      	mov	r7, r0
 8004748:	f2c0 8081 	blt.w	800484e <quorem+0x112>
 800474c:	3c01      	subs	r4, #1
 800474e:	f101 0814 	add.w	r8, r1, #20
 8004752:	f100 0514 	add.w	r5, r0, #20
 8004756:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004760:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004764:	3301      	adds	r3, #1
 8004766:	429a      	cmp	r2, r3
 8004768:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800476c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004770:	fbb2 f6f3 	udiv	r6, r2, r3
 8004774:	d331      	bcc.n	80047da <quorem+0x9e>
 8004776:	f04f 0e00 	mov.w	lr, #0
 800477a:	4640      	mov	r0, r8
 800477c:	46ac      	mov	ip, r5
 800477e:	46f2      	mov	sl, lr
 8004780:	f850 2b04 	ldr.w	r2, [r0], #4
 8004784:	b293      	uxth	r3, r2
 8004786:	fb06 e303 	mla	r3, r6, r3, lr
 800478a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800478e:	b29b      	uxth	r3, r3
 8004790:	ebaa 0303 	sub.w	r3, sl, r3
 8004794:	0c12      	lsrs	r2, r2, #16
 8004796:	f8dc a000 	ldr.w	sl, [ip]
 800479a:	fb06 e202 	mla	r2, r6, r2, lr
 800479e:	fa13 f38a 	uxtah	r3, r3, sl
 80047a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80047a6:	fa1f fa82 	uxth.w	sl, r2
 80047aa:	f8dc 2000 	ldr.w	r2, [ip]
 80047ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80047b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047bc:	4581      	cmp	r9, r0
 80047be:	f84c 3b04 	str.w	r3, [ip], #4
 80047c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80047c6:	d2db      	bcs.n	8004780 <quorem+0x44>
 80047c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80047cc:	b92b      	cbnz	r3, 80047da <quorem+0x9e>
 80047ce:	9b01      	ldr	r3, [sp, #4]
 80047d0:	3b04      	subs	r3, #4
 80047d2:	429d      	cmp	r5, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	d32e      	bcc.n	8004836 <quorem+0xfa>
 80047d8:	613c      	str	r4, [r7, #16]
 80047da:	4638      	mov	r0, r7
 80047dc:	f001 f8e4 	bl	80059a8 <__mcmp>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	db24      	blt.n	800482e <quorem+0xf2>
 80047e4:	3601      	adds	r6, #1
 80047e6:	4628      	mov	r0, r5
 80047e8:	f04f 0c00 	mov.w	ip, #0
 80047ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80047f0:	f8d0 e000 	ldr.w	lr, [r0]
 80047f4:	b293      	uxth	r3, r2
 80047f6:	ebac 0303 	sub.w	r3, ip, r3
 80047fa:	0c12      	lsrs	r2, r2, #16
 80047fc:	fa13 f38e 	uxtah	r3, r3, lr
 8004800:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004804:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004808:	b29b      	uxth	r3, r3
 800480a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800480e:	45c1      	cmp	r9, r8
 8004810:	f840 3b04 	str.w	r3, [r0], #4
 8004814:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004818:	d2e8      	bcs.n	80047ec <quorem+0xb0>
 800481a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800481e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004822:	b922      	cbnz	r2, 800482e <quorem+0xf2>
 8004824:	3b04      	subs	r3, #4
 8004826:	429d      	cmp	r5, r3
 8004828:	461a      	mov	r2, r3
 800482a:	d30a      	bcc.n	8004842 <quorem+0x106>
 800482c:	613c      	str	r4, [r7, #16]
 800482e:	4630      	mov	r0, r6
 8004830:	b003      	add	sp, #12
 8004832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	3b04      	subs	r3, #4
 800483a:	2a00      	cmp	r2, #0
 800483c:	d1cc      	bne.n	80047d8 <quorem+0x9c>
 800483e:	3c01      	subs	r4, #1
 8004840:	e7c7      	b.n	80047d2 <quorem+0x96>
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	3b04      	subs	r3, #4
 8004846:	2a00      	cmp	r2, #0
 8004848:	d1f0      	bne.n	800482c <quorem+0xf0>
 800484a:	3c01      	subs	r4, #1
 800484c:	e7eb      	b.n	8004826 <quorem+0xea>
 800484e:	2000      	movs	r0, #0
 8004850:	e7ee      	b.n	8004830 <quorem+0xf4>
 8004852:	0000      	movs	r0, r0
 8004854:	0000      	movs	r0, r0
	...

08004858 <_dtoa_r>:
 8004858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485c:	ed2d 8b02 	vpush	{d8}
 8004860:	ec57 6b10 	vmov	r6, r7, d0
 8004864:	b095      	sub	sp, #84	; 0x54
 8004866:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004868:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800486c:	9105      	str	r1, [sp, #20]
 800486e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004872:	4604      	mov	r4, r0
 8004874:	9209      	str	r2, [sp, #36]	; 0x24
 8004876:	930f      	str	r3, [sp, #60]	; 0x3c
 8004878:	b975      	cbnz	r5, 8004898 <_dtoa_r+0x40>
 800487a:	2010      	movs	r0, #16
 800487c:	f000 fdee 	bl	800545c <malloc>
 8004880:	4602      	mov	r2, r0
 8004882:	6260      	str	r0, [r4, #36]	; 0x24
 8004884:	b920      	cbnz	r0, 8004890 <_dtoa_r+0x38>
 8004886:	4bb2      	ldr	r3, [pc, #712]	; (8004b50 <_dtoa_r+0x2f8>)
 8004888:	21ea      	movs	r1, #234	; 0xea
 800488a:	48b2      	ldr	r0, [pc, #712]	; (8004b54 <_dtoa_r+0x2fc>)
 800488c:	f7ff ff38 	bl	8004700 <__assert_func>
 8004890:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004894:	6005      	str	r5, [r0, #0]
 8004896:	60c5      	str	r5, [r0, #12]
 8004898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800489a:	6819      	ldr	r1, [r3, #0]
 800489c:	b151      	cbz	r1, 80048b4 <_dtoa_r+0x5c>
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	604a      	str	r2, [r1, #4]
 80048a2:	2301      	movs	r3, #1
 80048a4:	4093      	lsls	r3, r2
 80048a6:	608b      	str	r3, [r1, #8]
 80048a8:	4620      	mov	r0, r4
 80048aa:	f000 fe3f 	bl	800552c <_Bfree>
 80048ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	1e3b      	subs	r3, r7, #0
 80048b6:	bfb9      	ittee	lt
 80048b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80048bc:	9303      	strlt	r3, [sp, #12]
 80048be:	2300      	movge	r3, #0
 80048c0:	f8c8 3000 	strge.w	r3, [r8]
 80048c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80048c8:	4ba3      	ldr	r3, [pc, #652]	; (8004b58 <_dtoa_r+0x300>)
 80048ca:	bfbc      	itt	lt
 80048cc:	2201      	movlt	r2, #1
 80048ce:	f8c8 2000 	strlt.w	r2, [r8]
 80048d2:	ea33 0309 	bics.w	r3, r3, r9
 80048d6:	d11b      	bne.n	8004910 <_dtoa_r+0xb8>
 80048d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048da:	f242 730f 	movw	r3, #9999	; 0x270f
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80048e4:	4333      	orrs	r3, r6
 80048e6:	f000 857a 	beq.w	80053de <_dtoa_r+0xb86>
 80048ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048ec:	b963      	cbnz	r3, 8004908 <_dtoa_r+0xb0>
 80048ee:	4b9b      	ldr	r3, [pc, #620]	; (8004b5c <_dtoa_r+0x304>)
 80048f0:	e024      	b.n	800493c <_dtoa_r+0xe4>
 80048f2:	4b9b      	ldr	r3, [pc, #620]	; (8004b60 <_dtoa_r+0x308>)
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	3308      	adds	r3, #8
 80048f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	9800      	ldr	r0, [sp, #0]
 80048fe:	b015      	add	sp, #84	; 0x54
 8004900:	ecbd 8b02 	vpop	{d8}
 8004904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004908:	4b94      	ldr	r3, [pc, #592]	; (8004b5c <_dtoa_r+0x304>)
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	3303      	adds	r3, #3
 800490e:	e7f3      	b.n	80048f8 <_dtoa_r+0xa0>
 8004910:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004914:	2200      	movs	r2, #0
 8004916:	ec51 0b17 	vmov	r0, r1, d7
 800491a:	2300      	movs	r3, #0
 800491c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004920:	f7fc f8da 	bl	8000ad8 <__aeabi_dcmpeq>
 8004924:	4680      	mov	r8, r0
 8004926:	b158      	cbz	r0, 8004940 <_dtoa_r+0xe8>
 8004928:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800492a:	2301      	movs	r3, #1
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8551 	beq.w	80053d8 <_dtoa_r+0xb80>
 8004936:	488b      	ldr	r0, [pc, #556]	; (8004b64 <_dtoa_r+0x30c>)
 8004938:	6018      	str	r0, [r3, #0]
 800493a:	1e43      	subs	r3, r0, #1
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	e7dd      	b.n	80048fc <_dtoa_r+0xa4>
 8004940:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004944:	aa12      	add	r2, sp, #72	; 0x48
 8004946:	a913      	add	r1, sp, #76	; 0x4c
 8004948:	4620      	mov	r0, r4
 800494a:	f001 f8d1 	bl	8005af0 <__d2b>
 800494e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004952:	4683      	mov	fp, r0
 8004954:	2d00      	cmp	r5, #0
 8004956:	d07c      	beq.n	8004a52 <_dtoa_r+0x1fa>
 8004958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800495a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800495e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004962:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004966:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800496a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800496e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004972:	4b7d      	ldr	r3, [pc, #500]	; (8004b68 <_dtoa_r+0x310>)
 8004974:	2200      	movs	r2, #0
 8004976:	4630      	mov	r0, r6
 8004978:	4639      	mov	r1, r7
 800497a:	f7fb fc8d 	bl	8000298 <__aeabi_dsub>
 800497e:	a36e      	add	r3, pc, #440	; (adr r3, 8004b38 <_dtoa_r+0x2e0>)
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	f7fb fe40 	bl	8000608 <__aeabi_dmul>
 8004988:	a36d      	add	r3, pc, #436	; (adr r3, 8004b40 <_dtoa_r+0x2e8>)
 800498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498e:	f7fb fc85 	bl	800029c <__adddf3>
 8004992:	4606      	mov	r6, r0
 8004994:	4628      	mov	r0, r5
 8004996:	460f      	mov	r7, r1
 8004998:	f7fb fdcc 	bl	8000534 <__aeabi_i2d>
 800499c:	a36a      	add	r3, pc, #424	; (adr r3, 8004b48 <_dtoa_r+0x2f0>)
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	f7fb fe31 	bl	8000608 <__aeabi_dmul>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4630      	mov	r0, r6
 80049ac:	4639      	mov	r1, r7
 80049ae:	f7fb fc75 	bl	800029c <__adddf3>
 80049b2:	4606      	mov	r6, r0
 80049b4:	460f      	mov	r7, r1
 80049b6:	f7fc f8d7 	bl	8000b68 <__aeabi_d2iz>
 80049ba:	2200      	movs	r2, #0
 80049bc:	4682      	mov	sl, r0
 80049be:	2300      	movs	r3, #0
 80049c0:	4630      	mov	r0, r6
 80049c2:	4639      	mov	r1, r7
 80049c4:	f7fc f892 	bl	8000aec <__aeabi_dcmplt>
 80049c8:	b148      	cbz	r0, 80049de <_dtoa_r+0x186>
 80049ca:	4650      	mov	r0, sl
 80049cc:	f7fb fdb2 	bl	8000534 <__aeabi_i2d>
 80049d0:	4632      	mov	r2, r6
 80049d2:	463b      	mov	r3, r7
 80049d4:	f7fc f880 	bl	8000ad8 <__aeabi_dcmpeq>
 80049d8:	b908      	cbnz	r0, 80049de <_dtoa_r+0x186>
 80049da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80049de:	f1ba 0f16 	cmp.w	sl, #22
 80049e2:	d854      	bhi.n	8004a8e <_dtoa_r+0x236>
 80049e4:	4b61      	ldr	r3, [pc, #388]	; (8004b6c <_dtoa_r+0x314>)
 80049e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80049f2:	f7fc f87b 	bl	8000aec <__aeabi_dcmplt>
 80049f6:	2800      	cmp	r0, #0
 80049f8:	d04b      	beq.n	8004a92 <_dtoa_r+0x23a>
 80049fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80049fe:	2300      	movs	r3, #0
 8004a00:	930e      	str	r3, [sp, #56]	; 0x38
 8004a02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a04:	1b5d      	subs	r5, r3, r5
 8004a06:	1e6b      	subs	r3, r5, #1
 8004a08:	9304      	str	r3, [sp, #16]
 8004a0a:	bf43      	ittte	mi
 8004a0c:	2300      	movmi	r3, #0
 8004a0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004a12:	9304      	strmi	r3, [sp, #16]
 8004a14:	f04f 0800 	movpl.w	r8, #0
 8004a18:	f1ba 0f00 	cmp.w	sl, #0
 8004a1c:	db3b      	blt.n	8004a96 <_dtoa_r+0x23e>
 8004a1e:	9b04      	ldr	r3, [sp, #16]
 8004a20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004a24:	4453      	add	r3, sl
 8004a26:	9304      	str	r3, [sp, #16]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9306      	str	r3, [sp, #24]
 8004a2c:	9b05      	ldr	r3, [sp, #20]
 8004a2e:	2b09      	cmp	r3, #9
 8004a30:	d869      	bhi.n	8004b06 <_dtoa_r+0x2ae>
 8004a32:	2b05      	cmp	r3, #5
 8004a34:	bfc4      	itt	gt
 8004a36:	3b04      	subgt	r3, #4
 8004a38:	9305      	strgt	r3, [sp, #20]
 8004a3a:	9b05      	ldr	r3, [sp, #20]
 8004a3c:	f1a3 0302 	sub.w	r3, r3, #2
 8004a40:	bfcc      	ite	gt
 8004a42:	2500      	movgt	r5, #0
 8004a44:	2501      	movle	r5, #1
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d869      	bhi.n	8004b1e <_dtoa_r+0x2c6>
 8004a4a:	e8df f003 	tbb	[pc, r3]
 8004a4e:	4e2c      	.short	0x4e2c
 8004a50:	5a4c      	.short	0x5a4c
 8004a52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004a56:	441d      	add	r5, r3
 8004a58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	bfc1      	itttt	gt
 8004a60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004a68:	fa09 f303 	lslgt.w	r3, r9, r3
 8004a6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004a70:	bfda      	itte	le
 8004a72:	f1c3 0320 	rsble	r3, r3, #32
 8004a76:	fa06 f003 	lslle.w	r0, r6, r3
 8004a7a:	4318      	orrgt	r0, r3
 8004a7c:	f7fb fd4a 	bl	8000514 <__aeabi_ui2d>
 8004a80:	2301      	movs	r3, #1
 8004a82:	4606      	mov	r6, r0
 8004a84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004a88:	3d01      	subs	r5, #1
 8004a8a:	9310      	str	r3, [sp, #64]	; 0x40
 8004a8c:	e771      	b.n	8004972 <_dtoa_r+0x11a>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e7b6      	b.n	8004a00 <_dtoa_r+0x1a8>
 8004a92:	900e      	str	r0, [sp, #56]	; 0x38
 8004a94:	e7b5      	b.n	8004a02 <_dtoa_r+0x1aa>
 8004a96:	f1ca 0300 	rsb	r3, sl, #0
 8004a9a:	9306      	str	r3, [sp, #24]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	eba8 080a 	sub.w	r8, r8, sl
 8004aa2:	930d      	str	r3, [sp, #52]	; 0x34
 8004aa4:	e7c2      	b.n	8004a2c <_dtoa_r+0x1d4>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	9308      	str	r3, [sp, #32]
 8004aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	dc39      	bgt.n	8004b24 <_dtoa_r+0x2cc>
 8004ab0:	f04f 0901 	mov.w	r9, #1
 8004ab4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ab8:	464b      	mov	r3, r9
 8004aba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004abe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	6042      	str	r2, [r0, #4]
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	f102 0614 	add.w	r6, r2, #20
 8004aca:	429e      	cmp	r6, r3
 8004acc:	6841      	ldr	r1, [r0, #4]
 8004ace:	d92f      	bls.n	8004b30 <_dtoa_r+0x2d8>
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f000 fceb 	bl	80054ac <_Balloc>
 8004ad6:	9000      	str	r0, [sp, #0]
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	d14b      	bne.n	8004b74 <_dtoa_r+0x31c>
 8004adc:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <_dtoa_r+0x318>)
 8004ade:	4602      	mov	r2, r0
 8004ae0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ae4:	e6d1      	b.n	800488a <_dtoa_r+0x32>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e7de      	b.n	8004aa8 <_dtoa_r+0x250>
 8004aea:	2300      	movs	r3, #0
 8004aec:	9308      	str	r3, [sp, #32]
 8004aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af0:	eb0a 0903 	add.w	r9, sl, r3
 8004af4:	f109 0301 	add.w	r3, r9, #1
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	9301      	str	r3, [sp, #4]
 8004afc:	bfb8      	it	lt
 8004afe:	2301      	movlt	r3, #1
 8004b00:	e7dd      	b.n	8004abe <_dtoa_r+0x266>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e7f2      	b.n	8004aec <_dtoa_r+0x294>
 8004b06:	2501      	movs	r5, #1
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9305      	str	r3, [sp, #20]
 8004b0c:	9508      	str	r5, [sp, #32]
 8004b0e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b18:	2312      	movs	r3, #18
 8004b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8004b1c:	e7cf      	b.n	8004abe <_dtoa_r+0x266>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	9308      	str	r3, [sp, #32]
 8004b22:	e7f4      	b.n	8004b0e <_dtoa_r+0x2b6>
 8004b24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004b28:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	e7c6      	b.n	8004abe <_dtoa_r+0x266>
 8004b30:	3101      	adds	r1, #1
 8004b32:	6041      	str	r1, [r0, #4]
 8004b34:	0052      	lsls	r2, r2, #1
 8004b36:	e7c6      	b.n	8004ac6 <_dtoa_r+0x26e>
 8004b38:	636f4361 	.word	0x636f4361
 8004b3c:	3fd287a7 	.word	0x3fd287a7
 8004b40:	8b60c8b3 	.word	0x8b60c8b3
 8004b44:	3fc68a28 	.word	0x3fc68a28
 8004b48:	509f79fb 	.word	0x509f79fb
 8004b4c:	3fd34413 	.word	0x3fd34413
 8004b50:	08006889 	.word	0x08006889
 8004b54:	080068a0 	.word	0x080068a0
 8004b58:	7ff00000 	.word	0x7ff00000
 8004b5c:	08006885 	.word	0x08006885
 8004b60:	0800687c 	.word	0x0800687c
 8004b64:	0800681d 	.word	0x0800681d
 8004b68:	3ff80000 	.word	0x3ff80000
 8004b6c:	080069a8 	.word	0x080069a8
 8004b70:	080068ff 	.word	0x080068ff
 8004b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b76:	9a00      	ldr	r2, [sp, #0]
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	9b01      	ldr	r3, [sp, #4]
 8004b7c:	2b0e      	cmp	r3, #14
 8004b7e:	f200 80ad 	bhi.w	8004cdc <_dtoa_r+0x484>
 8004b82:	2d00      	cmp	r5, #0
 8004b84:	f000 80aa 	beq.w	8004cdc <_dtoa_r+0x484>
 8004b88:	f1ba 0f00 	cmp.w	sl, #0
 8004b8c:	dd36      	ble.n	8004bfc <_dtoa_r+0x3a4>
 8004b8e:	4ac3      	ldr	r2, [pc, #780]	; (8004e9c <_dtoa_r+0x644>)
 8004b90:	f00a 030f 	and.w	r3, sl, #15
 8004b94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b98:	ed93 7b00 	vldr	d7, [r3]
 8004b9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004ba0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004ba4:	eeb0 8a47 	vmov.f32	s16, s14
 8004ba8:	eef0 8a67 	vmov.f32	s17, s15
 8004bac:	d016      	beq.n	8004bdc <_dtoa_r+0x384>
 8004bae:	4bbc      	ldr	r3, [pc, #752]	; (8004ea0 <_dtoa_r+0x648>)
 8004bb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004bb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004bb8:	f7fb fe50 	bl	800085c <__aeabi_ddiv>
 8004bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bc0:	f007 070f 	and.w	r7, r7, #15
 8004bc4:	2503      	movs	r5, #3
 8004bc6:	4eb6      	ldr	r6, [pc, #728]	; (8004ea0 <_dtoa_r+0x648>)
 8004bc8:	b957      	cbnz	r7, 8004be0 <_dtoa_r+0x388>
 8004bca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bce:	ec53 2b18 	vmov	r2, r3, d8
 8004bd2:	f7fb fe43 	bl	800085c <__aeabi_ddiv>
 8004bd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bda:	e029      	b.n	8004c30 <_dtoa_r+0x3d8>
 8004bdc:	2502      	movs	r5, #2
 8004bde:	e7f2      	b.n	8004bc6 <_dtoa_r+0x36e>
 8004be0:	07f9      	lsls	r1, r7, #31
 8004be2:	d508      	bpl.n	8004bf6 <_dtoa_r+0x39e>
 8004be4:	ec51 0b18 	vmov	r0, r1, d8
 8004be8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004bec:	f7fb fd0c 	bl	8000608 <__aeabi_dmul>
 8004bf0:	ec41 0b18 	vmov	d8, r0, r1
 8004bf4:	3501      	adds	r5, #1
 8004bf6:	107f      	asrs	r7, r7, #1
 8004bf8:	3608      	adds	r6, #8
 8004bfa:	e7e5      	b.n	8004bc8 <_dtoa_r+0x370>
 8004bfc:	f000 80a6 	beq.w	8004d4c <_dtoa_r+0x4f4>
 8004c00:	f1ca 0600 	rsb	r6, sl, #0
 8004c04:	4ba5      	ldr	r3, [pc, #660]	; (8004e9c <_dtoa_r+0x644>)
 8004c06:	4fa6      	ldr	r7, [pc, #664]	; (8004ea0 <_dtoa_r+0x648>)
 8004c08:	f006 020f 	and.w	r2, r6, #15
 8004c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c18:	f7fb fcf6 	bl	8000608 <__aeabi_dmul>
 8004c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c20:	1136      	asrs	r6, r6, #4
 8004c22:	2300      	movs	r3, #0
 8004c24:	2502      	movs	r5, #2
 8004c26:	2e00      	cmp	r6, #0
 8004c28:	f040 8085 	bne.w	8004d36 <_dtoa_r+0x4de>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1d2      	bne.n	8004bd6 <_dtoa_r+0x37e>
 8004c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 808c 	beq.w	8004d50 <_dtoa_r+0x4f8>
 8004c38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004c3c:	4b99      	ldr	r3, [pc, #612]	; (8004ea4 <_dtoa_r+0x64c>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	4630      	mov	r0, r6
 8004c42:	4639      	mov	r1, r7
 8004c44:	f7fb ff52 	bl	8000aec <__aeabi_dcmplt>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	f000 8081 	beq.w	8004d50 <_dtoa_r+0x4f8>
 8004c4e:	9b01      	ldr	r3, [sp, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d07d      	beq.n	8004d50 <_dtoa_r+0x4f8>
 8004c54:	f1b9 0f00 	cmp.w	r9, #0
 8004c58:	dd3c      	ble.n	8004cd4 <_dtoa_r+0x47c>
 8004c5a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004c5e:	9307      	str	r3, [sp, #28]
 8004c60:	2200      	movs	r2, #0
 8004c62:	4b91      	ldr	r3, [pc, #580]	; (8004ea8 <_dtoa_r+0x650>)
 8004c64:	4630      	mov	r0, r6
 8004c66:	4639      	mov	r1, r7
 8004c68:	f7fb fcce 	bl	8000608 <__aeabi_dmul>
 8004c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c70:	3501      	adds	r5, #1
 8004c72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004c76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	f7fb fc5a 	bl	8000534 <__aeabi_i2d>
 8004c80:	4632      	mov	r2, r6
 8004c82:	463b      	mov	r3, r7
 8004c84:	f7fb fcc0 	bl	8000608 <__aeabi_dmul>
 8004c88:	4b88      	ldr	r3, [pc, #544]	; (8004eac <_dtoa_r+0x654>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f7fb fb06 	bl	800029c <__adddf3>
 8004c90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c98:	9303      	str	r3, [sp, #12]
 8004c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d15c      	bne.n	8004d5a <_dtoa_r+0x502>
 8004ca0:	4b83      	ldr	r3, [pc, #524]	; (8004eb0 <_dtoa_r+0x658>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	4639      	mov	r1, r7
 8004ca8:	f7fb faf6 	bl	8000298 <__aeabi_dsub>
 8004cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cb0:	4606      	mov	r6, r0
 8004cb2:	460f      	mov	r7, r1
 8004cb4:	f7fb ff38 	bl	8000b28 <__aeabi_dcmpgt>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	f040 8296 	bne.w	80051ea <_dtoa_r+0x992>
 8004cbe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cc8:	4639      	mov	r1, r7
 8004cca:	f7fb ff0f 	bl	8000aec <__aeabi_dcmplt>
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	f040 8288 	bne.w	80051e4 <_dtoa_r+0x98c>
 8004cd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004cd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f2c0 8158 	blt.w	8004f94 <_dtoa_r+0x73c>
 8004ce4:	f1ba 0f0e 	cmp.w	sl, #14
 8004ce8:	f300 8154 	bgt.w	8004f94 <_dtoa_r+0x73c>
 8004cec:	4b6b      	ldr	r3, [pc, #428]	; (8004e9c <_dtoa_r+0x644>)
 8004cee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004cf2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f280 80e3 	bge.w	8004ec4 <_dtoa_r+0x66c>
 8004cfe:	9b01      	ldr	r3, [sp, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f300 80df 	bgt.w	8004ec4 <_dtoa_r+0x66c>
 8004d06:	f040 826d 	bne.w	80051e4 <_dtoa_r+0x98c>
 8004d0a:	4b69      	ldr	r3, [pc, #420]	; (8004eb0 <_dtoa_r+0x658>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4640      	mov	r0, r8
 8004d10:	4649      	mov	r1, r9
 8004d12:	f7fb fc79 	bl	8000608 <__aeabi_dmul>
 8004d16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d1a:	f7fb fefb 	bl	8000b14 <__aeabi_dcmpge>
 8004d1e:	9e01      	ldr	r6, [sp, #4]
 8004d20:	4637      	mov	r7, r6
 8004d22:	2800      	cmp	r0, #0
 8004d24:	f040 8243 	bne.w	80051ae <_dtoa_r+0x956>
 8004d28:	9d00      	ldr	r5, [sp, #0]
 8004d2a:	2331      	movs	r3, #49	; 0x31
 8004d2c:	f805 3b01 	strb.w	r3, [r5], #1
 8004d30:	f10a 0a01 	add.w	sl, sl, #1
 8004d34:	e23f      	b.n	80051b6 <_dtoa_r+0x95e>
 8004d36:	07f2      	lsls	r2, r6, #31
 8004d38:	d505      	bpl.n	8004d46 <_dtoa_r+0x4ee>
 8004d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d3e:	f7fb fc63 	bl	8000608 <__aeabi_dmul>
 8004d42:	3501      	adds	r5, #1
 8004d44:	2301      	movs	r3, #1
 8004d46:	1076      	asrs	r6, r6, #1
 8004d48:	3708      	adds	r7, #8
 8004d4a:	e76c      	b.n	8004c26 <_dtoa_r+0x3ce>
 8004d4c:	2502      	movs	r5, #2
 8004d4e:	e76f      	b.n	8004c30 <_dtoa_r+0x3d8>
 8004d50:	9b01      	ldr	r3, [sp, #4]
 8004d52:	f8cd a01c 	str.w	sl, [sp, #28]
 8004d56:	930c      	str	r3, [sp, #48]	; 0x30
 8004d58:	e78d      	b.n	8004c76 <_dtoa_r+0x41e>
 8004d5a:	9900      	ldr	r1, [sp, #0]
 8004d5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004d5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d60:	4b4e      	ldr	r3, [pc, #312]	; (8004e9c <_dtoa_r+0x644>)
 8004d62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d66:	4401      	add	r1, r0
 8004d68:	9102      	str	r1, [sp, #8]
 8004d6a:	9908      	ldr	r1, [sp, #32]
 8004d6c:	eeb0 8a47 	vmov.f32	s16, s14
 8004d70:	eef0 8a67 	vmov.f32	s17, s15
 8004d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d7c:	2900      	cmp	r1, #0
 8004d7e:	d045      	beq.n	8004e0c <_dtoa_r+0x5b4>
 8004d80:	494c      	ldr	r1, [pc, #304]	; (8004eb4 <_dtoa_r+0x65c>)
 8004d82:	2000      	movs	r0, #0
 8004d84:	f7fb fd6a 	bl	800085c <__aeabi_ddiv>
 8004d88:	ec53 2b18 	vmov	r2, r3, d8
 8004d8c:	f7fb fa84 	bl	8000298 <__aeabi_dsub>
 8004d90:	9d00      	ldr	r5, [sp, #0]
 8004d92:	ec41 0b18 	vmov	d8, r0, r1
 8004d96:	4639      	mov	r1, r7
 8004d98:	4630      	mov	r0, r6
 8004d9a:	f7fb fee5 	bl	8000b68 <__aeabi_d2iz>
 8004d9e:	900c      	str	r0, [sp, #48]	; 0x30
 8004da0:	f7fb fbc8 	bl	8000534 <__aeabi_i2d>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4630      	mov	r0, r6
 8004daa:	4639      	mov	r1, r7
 8004dac:	f7fb fa74 	bl	8000298 <__aeabi_dsub>
 8004db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004db2:	3330      	adds	r3, #48	; 0x30
 8004db4:	f805 3b01 	strb.w	r3, [r5], #1
 8004db8:	ec53 2b18 	vmov	r2, r3, d8
 8004dbc:	4606      	mov	r6, r0
 8004dbe:	460f      	mov	r7, r1
 8004dc0:	f7fb fe94 	bl	8000aec <__aeabi_dcmplt>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d165      	bne.n	8004e94 <_dtoa_r+0x63c>
 8004dc8:	4632      	mov	r2, r6
 8004dca:	463b      	mov	r3, r7
 8004dcc:	4935      	ldr	r1, [pc, #212]	; (8004ea4 <_dtoa_r+0x64c>)
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f7fb fa62 	bl	8000298 <__aeabi_dsub>
 8004dd4:	ec53 2b18 	vmov	r2, r3, d8
 8004dd8:	f7fb fe88 	bl	8000aec <__aeabi_dcmplt>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	f040 80b9 	bne.w	8004f54 <_dtoa_r+0x6fc>
 8004de2:	9b02      	ldr	r3, [sp, #8]
 8004de4:	429d      	cmp	r5, r3
 8004de6:	f43f af75 	beq.w	8004cd4 <_dtoa_r+0x47c>
 8004dea:	4b2f      	ldr	r3, [pc, #188]	; (8004ea8 <_dtoa_r+0x650>)
 8004dec:	ec51 0b18 	vmov	r0, r1, d8
 8004df0:	2200      	movs	r2, #0
 8004df2:	f7fb fc09 	bl	8000608 <__aeabi_dmul>
 8004df6:	4b2c      	ldr	r3, [pc, #176]	; (8004ea8 <_dtoa_r+0x650>)
 8004df8:	ec41 0b18 	vmov	d8, r0, r1
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	4630      	mov	r0, r6
 8004e00:	4639      	mov	r1, r7
 8004e02:	f7fb fc01 	bl	8000608 <__aeabi_dmul>
 8004e06:	4606      	mov	r6, r0
 8004e08:	460f      	mov	r7, r1
 8004e0a:	e7c4      	b.n	8004d96 <_dtoa_r+0x53e>
 8004e0c:	ec51 0b17 	vmov	r0, r1, d7
 8004e10:	f7fb fbfa 	bl	8000608 <__aeabi_dmul>
 8004e14:	9b02      	ldr	r3, [sp, #8]
 8004e16:	9d00      	ldr	r5, [sp, #0]
 8004e18:	930c      	str	r3, [sp, #48]	; 0x30
 8004e1a:	ec41 0b18 	vmov	d8, r0, r1
 8004e1e:	4639      	mov	r1, r7
 8004e20:	4630      	mov	r0, r6
 8004e22:	f7fb fea1 	bl	8000b68 <__aeabi_d2iz>
 8004e26:	9011      	str	r0, [sp, #68]	; 0x44
 8004e28:	f7fb fb84 	bl	8000534 <__aeabi_i2d>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4630      	mov	r0, r6
 8004e32:	4639      	mov	r1, r7
 8004e34:	f7fb fa30 	bl	8000298 <__aeabi_dsub>
 8004e38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e3a:	3330      	adds	r3, #48	; 0x30
 8004e3c:	f805 3b01 	strb.w	r3, [r5], #1
 8004e40:	9b02      	ldr	r3, [sp, #8]
 8004e42:	429d      	cmp	r5, r3
 8004e44:	4606      	mov	r6, r0
 8004e46:	460f      	mov	r7, r1
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	d134      	bne.n	8004eb8 <_dtoa_r+0x660>
 8004e4e:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <_dtoa_r+0x65c>)
 8004e50:	ec51 0b18 	vmov	r0, r1, d8
 8004e54:	f7fb fa22 	bl	800029c <__adddf3>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	4639      	mov	r1, r7
 8004e60:	f7fb fe62 	bl	8000b28 <__aeabi_dcmpgt>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d175      	bne.n	8004f54 <_dtoa_r+0x6fc>
 8004e68:	ec53 2b18 	vmov	r2, r3, d8
 8004e6c:	4911      	ldr	r1, [pc, #68]	; (8004eb4 <_dtoa_r+0x65c>)
 8004e6e:	2000      	movs	r0, #0
 8004e70:	f7fb fa12 	bl	8000298 <__aeabi_dsub>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4630      	mov	r0, r6
 8004e7a:	4639      	mov	r1, r7
 8004e7c:	f7fb fe36 	bl	8000aec <__aeabi_dcmplt>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	f43f af27 	beq.w	8004cd4 <_dtoa_r+0x47c>
 8004e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e88:	1e6b      	subs	r3, r5, #1
 8004e8a:	930c      	str	r3, [sp, #48]	; 0x30
 8004e8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e90:	2b30      	cmp	r3, #48	; 0x30
 8004e92:	d0f8      	beq.n	8004e86 <_dtoa_r+0x62e>
 8004e94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004e98:	e04a      	b.n	8004f30 <_dtoa_r+0x6d8>
 8004e9a:	bf00      	nop
 8004e9c:	080069a8 	.word	0x080069a8
 8004ea0:	08006980 	.word	0x08006980
 8004ea4:	3ff00000 	.word	0x3ff00000
 8004ea8:	40240000 	.word	0x40240000
 8004eac:	401c0000 	.word	0x401c0000
 8004eb0:	40140000 	.word	0x40140000
 8004eb4:	3fe00000 	.word	0x3fe00000
 8004eb8:	4baf      	ldr	r3, [pc, #700]	; (8005178 <_dtoa_r+0x920>)
 8004eba:	f7fb fba5 	bl	8000608 <__aeabi_dmul>
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	460f      	mov	r7, r1
 8004ec2:	e7ac      	b.n	8004e1e <_dtoa_r+0x5c6>
 8004ec4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004ec8:	9d00      	ldr	r5, [sp, #0]
 8004eca:	4642      	mov	r2, r8
 8004ecc:	464b      	mov	r3, r9
 8004ece:	4630      	mov	r0, r6
 8004ed0:	4639      	mov	r1, r7
 8004ed2:	f7fb fcc3 	bl	800085c <__aeabi_ddiv>
 8004ed6:	f7fb fe47 	bl	8000b68 <__aeabi_d2iz>
 8004eda:	9002      	str	r0, [sp, #8]
 8004edc:	f7fb fb2a 	bl	8000534 <__aeabi_i2d>
 8004ee0:	4642      	mov	r2, r8
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	f7fb fb90 	bl	8000608 <__aeabi_dmul>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4630      	mov	r0, r6
 8004eee:	4639      	mov	r1, r7
 8004ef0:	f7fb f9d2 	bl	8000298 <__aeabi_dsub>
 8004ef4:	9e02      	ldr	r6, [sp, #8]
 8004ef6:	9f01      	ldr	r7, [sp, #4]
 8004ef8:	3630      	adds	r6, #48	; 0x30
 8004efa:	f805 6b01 	strb.w	r6, [r5], #1
 8004efe:	9e00      	ldr	r6, [sp, #0]
 8004f00:	1bae      	subs	r6, r5, r6
 8004f02:	42b7      	cmp	r7, r6
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	d137      	bne.n	8004f7a <_dtoa_r+0x722>
 8004f0a:	f7fb f9c7 	bl	800029c <__adddf3>
 8004f0e:	4642      	mov	r2, r8
 8004f10:	464b      	mov	r3, r9
 8004f12:	4606      	mov	r6, r0
 8004f14:	460f      	mov	r7, r1
 8004f16:	f7fb fe07 	bl	8000b28 <__aeabi_dcmpgt>
 8004f1a:	b9c8      	cbnz	r0, 8004f50 <_dtoa_r+0x6f8>
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	464b      	mov	r3, r9
 8004f20:	4630      	mov	r0, r6
 8004f22:	4639      	mov	r1, r7
 8004f24:	f7fb fdd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f28:	b110      	cbz	r0, 8004f30 <_dtoa_r+0x6d8>
 8004f2a:	9b02      	ldr	r3, [sp, #8]
 8004f2c:	07d9      	lsls	r1, r3, #31
 8004f2e:	d40f      	bmi.n	8004f50 <_dtoa_r+0x6f8>
 8004f30:	4620      	mov	r0, r4
 8004f32:	4659      	mov	r1, fp
 8004f34:	f000 fafa 	bl	800552c <_Bfree>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	702b      	strb	r3, [r5, #0]
 8004f3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f3e:	f10a 0001 	add.w	r0, sl, #1
 8004f42:	6018      	str	r0, [r3, #0]
 8004f44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f43f acd8 	beq.w	80048fc <_dtoa_r+0xa4>
 8004f4c:	601d      	str	r5, [r3, #0]
 8004f4e:	e4d5      	b.n	80048fc <_dtoa_r+0xa4>
 8004f50:	f8cd a01c 	str.w	sl, [sp, #28]
 8004f54:	462b      	mov	r3, r5
 8004f56:	461d      	mov	r5, r3
 8004f58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f5c:	2a39      	cmp	r2, #57	; 0x39
 8004f5e:	d108      	bne.n	8004f72 <_dtoa_r+0x71a>
 8004f60:	9a00      	ldr	r2, [sp, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d1f7      	bne.n	8004f56 <_dtoa_r+0x6fe>
 8004f66:	9a07      	ldr	r2, [sp, #28]
 8004f68:	9900      	ldr	r1, [sp, #0]
 8004f6a:	3201      	adds	r2, #1
 8004f6c:	9207      	str	r2, [sp, #28]
 8004f6e:	2230      	movs	r2, #48	; 0x30
 8004f70:	700a      	strb	r2, [r1, #0]
 8004f72:	781a      	ldrb	r2, [r3, #0]
 8004f74:	3201      	adds	r2, #1
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	e78c      	b.n	8004e94 <_dtoa_r+0x63c>
 8004f7a:	4b7f      	ldr	r3, [pc, #508]	; (8005178 <_dtoa_r+0x920>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f7fb fb43 	bl	8000608 <__aeabi_dmul>
 8004f82:	2200      	movs	r2, #0
 8004f84:	2300      	movs	r3, #0
 8004f86:	4606      	mov	r6, r0
 8004f88:	460f      	mov	r7, r1
 8004f8a:	f7fb fda5 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d09b      	beq.n	8004eca <_dtoa_r+0x672>
 8004f92:	e7cd      	b.n	8004f30 <_dtoa_r+0x6d8>
 8004f94:	9a08      	ldr	r2, [sp, #32]
 8004f96:	2a00      	cmp	r2, #0
 8004f98:	f000 80c4 	beq.w	8005124 <_dtoa_r+0x8cc>
 8004f9c:	9a05      	ldr	r2, [sp, #20]
 8004f9e:	2a01      	cmp	r2, #1
 8004fa0:	f300 80a8 	bgt.w	80050f4 <_dtoa_r+0x89c>
 8004fa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004fa6:	2a00      	cmp	r2, #0
 8004fa8:	f000 80a0 	beq.w	80050ec <_dtoa_r+0x894>
 8004fac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004fb0:	9e06      	ldr	r6, [sp, #24]
 8004fb2:	4645      	mov	r5, r8
 8004fb4:	9a04      	ldr	r2, [sp, #16]
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	441a      	add	r2, r3
 8004fba:	4620      	mov	r0, r4
 8004fbc:	4498      	add	r8, r3
 8004fbe:	9204      	str	r2, [sp, #16]
 8004fc0:	f000 fb70 	bl	80056a4 <__i2b>
 8004fc4:	4607      	mov	r7, r0
 8004fc6:	2d00      	cmp	r5, #0
 8004fc8:	dd0b      	ble.n	8004fe2 <_dtoa_r+0x78a>
 8004fca:	9b04      	ldr	r3, [sp, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dd08      	ble.n	8004fe2 <_dtoa_r+0x78a>
 8004fd0:	42ab      	cmp	r3, r5
 8004fd2:	9a04      	ldr	r2, [sp, #16]
 8004fd4:	bfa8      	it	ge
 8004fd6:	462b      	movge	r3, r5
 8004fd8:	eba8 0803 	sub.w	r8, r8, r3
 8004fdc:	1aed      	subs	r5, r5, r3
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	9304      	str	r3, [sp, #16]
 8004fe2:	9b06      	ldr	r3, [sp, #24]
 8004fe4:	b1fb      	cbz	r3, 8005026 <_dtoa_r+0x7ce>
 8004fe6:	9b08      	ldr	r3, [sp, #32]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 809f 	beq.w	800512c <_dtoa_r+0x8d4>
 8004fee:	2e00      	cmp	r6, #0
 8004ff0:	dd11      	ble.n	8005016 <_dtoa_r+0x7be>
 8004ff2:	4639      	mov	r1, r7
 8004ff4:	4632      	mov	r2, r6
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f000 fc10 	bl	800581c <__pow5mult>
 8004ffc:	465a      	mov	r2, fp
 8004ffe:	4601      	mov	r1, r0
 8005000:	4607      	mov	r7, r0
 8005002:	4620      	mov	r0, r4
 8005004:	f000 fb64 	bl	80056d0 <__multiply>
 8005008:	4659      	mov	r1, fp
 800500a:	9007      	str	r0, [sp, #28]
 800500c:	4620      	mov	r0, r4
 800500e:	f000 fa8d 	bl	800552c <_Bfree>
 8005012:	9b07      	ldr	r3, [sp, #28]
 8005014:	469b      	mov	fp, r3
 8005016:	9b06      	ldr	r3, [sp, #24]
 8005018:	1b9a      	subs	r2, r3, r6
 800501a:	d004      	beq.n	8005026 <_dtoa_r+0x7ce>
 800501c:	4659      	mov	r1, fp
 800501e:	4620      	mov	r0, r4
 8005020:	f000 fbfc 	bl	800581c <__pow5mult>
 8005024:	4683      	mov	fp, r0
 8005026:	2101      	movs	r1, #1
 8005028:	4620      	mov	r0, r4
 800502a:	f000 fb3b 	bl	80056a4 <__i2b>
 800502e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005030:	2b00      	cmp	r3, #0
 8005032:	4606      	mov	r6, r0
 8005034:	dd7c      	ble.n	8005130 <_dtoa_r+0x8d8>
 8005036:	461a      	mov	r2, r3
 8005038:	4601      	mov	r1, r0
 800503a:	4620      	mov	r0, r4
 800503c:	f000 fbee 	bl	800581c <__pow5mult>
 8005040:	9b05      	ldr	r3, [sp, #20]
 8005042:	2b01      	cmp	r3, #1
 8005044:	4606      	mov	r6, r0
 8005046:	dd76      	ble.n	8005136 <_dtoa_r+0x8de>
 8005048:	2300      	movs	r3, #0
 800504a:	9306      	str	r3, [sp, #24]
 800504c:	6933      	ldr	r3, [r6, #16]
 800504e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005052:	6918      	ldr	r0, [r3, #16]
 8005054:	f000 fad6 	bl	8005604 <__hi0bits>
 8005058:	f1c0 0020 	rsb	r0, r0, #32
 800505c:	9b04      	ldr	r3, [sp, #16]
 800505e:	4418      	add	r0, r3
 8005060:	f010 001f 	ands.w	r0, r0, #31
 8005064:	f000 8086 	beq.w	8005174 <_dtoa_r+0x91c>
 8005068:	f1c0 0320 	rsb	r3, r0, #32
 800506c:	2b04      	cmp	r3, #4
 800506e:	dd7f      	ble.n	8005170 <_dtoa_r+0x918>
 8005070:	f1c0 001c 	rsb	r0, r0, #28
 8005074:	9b04      	ldr	r3, [sp, #16]
 8005076:	4403      	add	r3, r0
 8005078:	4480      	add	r8, r0
 800507a:	4405      	add	r5, r0
 800507c:	9304      	str	r3, [sp, #16]
 800507e:	f1b8 0f00 	cmp.w	r8, #0
 8005082:	dd05      	ble.n	8005090 <_dtoa_r+0x838>
 8005084:	4659      	mov	r1, fp
 8005086:	4642      	mov	r2, r8
 8005088:	4620      	mov	r0, r4
 800508a:	f000 fc21 	bl	80058d0 <__lshift>
 800508e:	4683      	mov	fp, r0
 8005090:	9b04      	ldr	r3, [sp, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	dd05      	ble.n	80050a2 <_dtoa_r+0x84a>
 8005096:	4631      	mov	r1, r6
 8005098:	461a      	mov	r2, r3
 800509a:	4620      	mov	r0, r4
 800509c:	f000 fc18 	bl	80058d0 <__lshift>
 80050a0:	4606      	mov	r6, r0
 80050a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d069      	beq.n	800517c <_dtoa_r+0x924>
 80050a8:	4631      	mov	r1, r6
 80050aa:	4658      	mov	r0, fp
 80050ac:	f000 fc7c 	bl	80059a8 <__mcmp>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	da63      	bge.n	800517c <_dtoa_r+0x924>
 80050b4:	2300      	movs	r3, #0
 80050b6:	4659      	mov	r1, fp
 80050b8:	220a      	movs	r2, #10
 80050ba:	4620      	mov	r0, r4
 80050bc:	f000 fa58 	bl	8005570 <__multadd>
 80050c0:	9b08      	ldr	r3, [sp, #32]
 80050c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80050c6:	4683      	mov	fp, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 818f 	beq.w	80053ec <_dtoa_r+0xb94>
 80050ce:	4639      	mov	r1, r7
 80050d0:	2300      	movs	r3, #0
 80050d2:	220a      	movs	r2, #10
 80050d4:	4620      	mov	r0, r4
 80050d6:	f000 fa4b 	bl	8005570 <__multadd>
 80050da:	f1b9 0f00 	cmp.w	r9, #0
 80050de:	4607      	mov	r7, r0
 80050e0:	f300 808e 	bgt.w	8005200 <_dtoa_r+0x9a8>
 80050e4:	9b05      	ldr	r3, [sp, #20]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	dc50      	bgt.n	800518c <_dtoa_r+0x934>
 80050ea:	e089      	b.n	8005200 <_dtoa_r+0x9a8>
 80050ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80050f2:	e75d      	b.n	8004fb0 <_dtoa_r+0x758>
 80050f4:	9b01      	ldr	r3, [sp, #4]
 80050f6:	1e5e      	subs	r6, r3, #1
 80050f8:	9b06      	ldr	r3, [sp, #24]
 80050fa:	42b3      	cmp	r3, r6
 80050fc:	bfbf      	itttt	lt
 80050fe:	9b06      	ldrlt	r3, [sp, #24]
 8005100:	9606      	strlt	r6, [sp, #24]
 8005102:	1af2      	sublt	r2, r6, r3
 8005104:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005106:	bfb6      	itet	lt
 8005108:	189b      	addlt	r3, r3, r2
 800510a:	1b9e      	subge	r6, r3, r6
 800510c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800510e:	9b01      	ldr	r3, [sp, #4]
 8005110:	bfb8      	it	lt
 8005112:	2600      	movlt	r6, #0
 8005114:	2b00      	cmp	r3, #0
 8005116:	bfb5      	itete	lt
 8005118:	eba8 0503 	sublt.w	r5, r8, r3
 800511c:	9b01      	ldrge	r3, [sp, #4]
 800511e:	2300      	movlt	r3, #0
 8005120:	4645      	movge	r5, r8
 8005122:	e747      	b.n	8004fb4 <_dtoa_r+0x75c>
 8005124:	9e06      	ldr	r6, [sp, #24]
 8005126:	9f08      	ldr	r7, [sp, #32]
 8005128:	4645      	mov	r5, r8
 800512a:	e74c      	b.n	8004fc6 <_dtoa_r+0x76e>
 800512c:	9a06      	ldr	r2, [sp, #24]
 800512e:	e775      	b.n	800501c <_dtoa_r+0x7c4>
 8005130:	9b05      	ldr	r3, [sp, #20]
 8005132:	2b01      	cmp	r3, #1
 8005134:	dc18      	bgt.n	8005168 <_dtoa_r+0x910>
 8005136:	9b02      	ldr	r3, [sp, #8]
 8005138:	b9b3      	cbnz	r3, 8005168 <_dtoa_r+0x910>
 800513a:	9b03      	ldr	r3, [sp, #12]
 800513c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005140:	b9a3      	cbnz	r3, 800516c <_dtoa_r+0x914>
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005148:	0d1b      	lsrs	r3, r3, #20
 800514a:	051b      	lsls	r3, r3, #20
 800514c:	b12b      	cbz	r3, 800515a <_dtoa_r+0x902>
 800514e:	9b04      	ldr	r3, [sp, #16]
 8005150:	3301      	adds	r3, #1
 8005152:	9304      	str	r3, [sp, #16]
 8005154:	f108 0801 	add.w	r8, r8, #1
 8005158:	2301      	movs	r3, #1
 800515a:	9306      	str	r3, [sp, #24]
 800515c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800515e:	2b00      	cmp	r3, #0
 8005160:	f47f af74 	bne.w	800504c <_dtoa_r+0x7f4>
 8005164:	2001      	movs	r0, #1
 8005166:	e779      	b.n	800505c <_dtoa_r+0x804>
 8005168:	2300      	movs	r3, #0
 800516a:	e7f6      	b.n	800515a <_dtoa_r+0x902>
 800516c:	9b02      	ldr	r3, [sp, #8]
 800516e:	e7f4      	b.n	800515a <_dtoa_r+0x902>
 8005170:	d085      	beq.n	800507e <_dtoa_r+0x826>
 8005172:	4618      	mov	r0, r3
 8005174:	301c      	adds	r0, #28
 8005176:	e77d      	b.n	8005074 <_dtoa_r+0x81c>
 8005178:	40240000 	.word	0x40240000
 800517c:	9b01      	ldr	r3, [sp, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	dc38      	bgt.n	80051f4 <_dtoa_r+0x99c>
 8005182:	9b05      	ldr	r3, [sp, #20]
 8005184:	2b02      	cmp	r3, #2
 8005186:	dd35      	ble.n	80051f4 <_dtoa_r+0x99c>
 8005188:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800518c:	f1b9 0f00 	cmp.w	r9, #0
 8005190:	d10d      	bne.n	80051ae <_dtoa_r+0x956>
 8005192:	4631      	mov	r1, r6
 8005194:	464b      	mov	r3, r9
 8005196:	2205      	movs	r2, #5
 8005198:	4620      	mov	r0, r4
 800519a:	f000 f9e9 	bl	8005570 <__multadd>
 800519e:	4601      	mov	r1, r0
 80051a0:	4606      	mov	r6, r0
 80051a2:	4658      	mov	r0, fp
 80051a4:	f000 fc00 	bl	80059a8 <__mcmp>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	f73f adbd 	bgt.w	8004d28 <_dtoa_r+0x4d0>
 80051ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b0:	9d00      	ldr	r5, [sp, #0]
 80051b2:	ea6f 0a03 	mvn.w	sl, r3
 80051b6:	f04f 0800 	mov.w	r8, #0
 80051ba:	4631      	mov	r1, r6
 80051bc:	4620      	mov	r0, r4
 80051be:	f000 f9b5 	bl	800552c <_Bfree>
 80051c2:	2f00      	cmp	r7, #0
 80051c4:	f43f aeb4 	beq.w	8004f30 <_dtoa_r+0x6d8>
 80051c8:	f1b8 0f00 	cmp.w	r8, #0
 80051cc:	d005      	beq.n	80051da <_dtoa_r+0x982>
 80051ce:	45b8      	cmp	r8, r7
 80051d0:	d003      	beq.n	80051da <_dtoa_r+0x982>
 80051d2:	4641      	mov	r1, r8
 80051d4:	4620      	mov	r0, r4
 80051d6:	f000 f9a9 	bl	800552c <_Bfree>
 80051da:	4639      	mov	r1, r7
 80051dc:	4620      	mov	r0, r4
 80051de:	f000 f9a5 	bl	800552c <_Bfree>
 80051e2:	e6a5      	b.n	8004f30 <_dtoa_r+0x6d8>
 80051e4:	2600      	movs	r6, #0
 80051e6:	4637      	mov	r7, r6
 80051e8:	e7e1      	b.n	80051ae <_dtoa_r+0x956>
 80051ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80051ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80051f0:	4637      	mov	r7, r6
 80051f2:	e599      	b.n	8004d28 <_dtoa_r+0x4d0>
 80051f4:	9b08      	ldr	r3, [sp, #32]
 80051f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 80fd 	beq.w	80053fa <_dtoa_r+0xba2>
 8005200:	2d00      	cmp	r5, #0
 8005202:	dd05      	ble.n	8005210 <_dtoa_r+0x9b8>
 8005204:	4639      	mov	r1, r7
 8005206:	462a      	mov	r2, r5
 8005208:	4620      	mov	r0, r4
 800520a:	f000 fb61 	bl	80058d0 <__lshift>
 800520e:	4607      	mov	r7, r0
 8005210:	9b06      	ldr	r3, [sp, #24]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d05c      	beq.n	80052d0 <_dtoa_r+0xa78>
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4620      	mov	r0, r4
 800521a:	f000 f947 	bl	80054ac <_Balloc>
 800521e:	4605      	mov	r5, r0
 8005220:	b928      	cbnz	r0, 800522e <_dtoa_r+0x9d6>
 8005222:	4b80      	ldr	r3, [pc, #512]	; (8005424 <_dtoa_r+0xbcc>)
 8005224:	4602      	mov	r2, r0
 8005226:	f240 21ea 	movw	r1, #746	; 0x2ea
 800522a:	f7ff bb2e 	b.w	800488a <_dtoa_r+0x32>
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	3202      	adds	r2, #2
 8005232:	0092      	lsls	r2, r2, #2
 8005234:	f107 010c 	add.w	r1, r7, #12
 8005238:	300c      	adds	r0, #12
 800523a:	f000 f929 	bl	8005490 <memcpy>
 800523e:	2201      	movs	r2, #1
 8005240:	4629      	mov	r1, r5
 8005242:	4620      	mov	r0, r4
 8005244:	f000 fb44 	bl	80058d0 <__lshift>
 8005248:	9b00      	ldr	r3, [sp, #0]
 800524a:	3301      	adds	r3, #1
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	9b00      	ldr	r3, [sp, #0]
 8005250:	444b      	add	r3, r9
 8005252:	9307      	str	r3, [sp, #28]
 8005254:	9b02      	ldr	r3, [sp, #8]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	46b8      	mov	r8, r7
 800525c:	9306      	str	r3, [sp, #24]
 800525e:	4607      	mov	r7, r0
 8005260:	9b01      	ldr	r3, [sp, #4]
 8005262:	4631      	mov	r1, r6
 8005264:	3b01      	subs	r3, #1
 8005266:	4658      	mov	r0, fp
 8005268:	9302      	str	r3, [sp, #8]
 800526a:	f7ff fa67 	bl	800473c <quorem>
 800526e:	4603      	mov	r3, r0
 8005270:	3330      	adds	r3, #48	; 0x30
 8005272:	9004      	str	r0, [sp, #16]
 8005274:	4641      	mov	r1, r8
 8005276:	4658      	mov	r0, fp
 8005278:	9308      	str	r3, [sp, #32]
 800527a:	f000 fb95 	bl	80059a8 <__mcmp>
 800527e:	463a      	mov	r2, r7
 8005280:	4681      	mov	r9, r0
 8005282:	4631      	mov	r1, r6
 8005284:	4620      	mov	r0, r4
 8005286:	f000 fbab 	bl	80059e0 <__mdiff>
 800528a:	68c2      	ldr	r2, [r0, #12]
 800528c:	9b08      	ldr	r3, [sp, #32]
 800528e:	4605      	mov	r5, r0
 8005290:	bb02      	cbnz	r2, 80052d4 <_dtoa_r+0xa7c>
 8005292:	4601      	mov	r1, r0
 8005294:	4658      	mov	r0, fp
 8005296:	f000 fb87 	bl	80059a8 <__mcmp>
 800529a:	9b08      	ldr	r3, [sp, #32]
 800529c:	4602      	mov	r2, r0
 800529e:	4629      	mov	r1, r5
 80052a0:	4620      	mov	r0, r4
 80052a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80052a6:	f000 f941 	bl	800552c <_Bfree>
 80052aa:	9b05      	ldr	r3, [sp, #20]
 80052ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052ae:	9d01      	ldr	r5, [sp, #4]
 80052b0:	ea43 0102 	orr.w	r1, r3, r2
 80052b4:	9b06      	ldr	r3, [sp, #24]
 80052b6:	430b      	orrs	r3, r1
 80052b8:	9b08      	ldr	r3, [sp, #32]
 80052ba:	d10d      	bne.n	80052d8 <_dtoa_r+0xa80>
 80052bc:	2b39      	cmp	r3, #57	; 0x39
 80052be:	d029      	beq.n	8005314 <_dtoa_r+0xabc>
 80052c0:	f1b9 0f00 	cmp.w	r9, #0
 80052c4:	dd01      	ble.n	80052ca <_dtoa_r+0xa72>
 80052c6:	9b04      	ldr	r3, [sp, #16]
 80052c8:	3331      	adds	r3, #49	; 0x31
 80052ca:	9a02      	ldr	r2, [sp, #8]
 80052cc:	7013      	strb	r3, [r2, #0]
 80052ce:	e774      	b.n	80051ba <_dtoa_r+0x962>
 80052d0:	4638      	mov	r0, r7
 80052d2:	e7b9      	b.n	8005248 <_dtoa_r+0x9f0>
 80052d4:	2201      	movs	r2, #1
 80052d6:	e7e2      	b.n	800529e <_dtoa_r+0xa46>
 80052d8:	f1b9 0f00 	cmp.w	r9, #0
 80052dc:	db06      	blt.n	80052ec <_dtoa_r+0xa94>
 80052de:	9905      	ldr	r1, [sp, #20]
 80052e0:	ea41 0909 	orr.w	r9, r1, r9
 80052e4:	9906      	ldr	r1, [sp, #24]
 80052e6:	ea59 0101 	orrs.w	r1, r9, r1
 80052ea:	d120      	bne.n	800532e <_dtoa_r+0xad6>
 80052ec:	2a00      	cmp	r2, #0
 80052ee:	ddec      	ble.n	80052ca <_dtoa_r+0xa72>
 80052f0:	4659      	mov	r1, fp
 80052f2:	2201      	movs	r2, #1
 80052f4:	4620      	mov	r0, r4
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	f000 faea 	bl	80058d0 <__lshift>
 80052fc:	4631      	mov	r1, r6
 80052fe:	4683      	mov	fp, r0
 8005300:	f000 fb52 	bl	80059a8 <__mcmp>
 8005304:	2800      	cmp	r0, #0
 8005306:	9b01      	ldr	r3, [sp, #4]
 8005308:	dc02      	bgt.n	8005310 <_dtoa_r+0xab8>
 800530a:	d1de      	bne.n	80052ca <_dtoa_r+0xa72>
 800530c:	07da      	lsls	r2, r3, #31
 800530e:	d5dc      	bpl.n	80052ca <_dtoa_r+0xa72>
 8005310:	2b39      	cmp	r3, #57	; 0x39
 8005312:	d1d8      	bne.n	80052c6 <_dtoa_r+0xa6e>
 8005314:	9a02      	ldr	r2, [sp, #8]
 8005316:	2339      	movs	r3, #57	; 0x39
 8005318:	7013      	strb	r3, [r2, #0]
 800531a:	462b      	mov	r3, r5
 800531c:	461d      	mov	r5, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005324:	2a39      	cmp	r2, #57	; 0x39
 8005326:	d050      	beq.n	80053ca <_dtoa_r+0xb72>
 8005328:	3201      	adds	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	e745      	b.n	80051ba <_dtoa_r+0x962>
 800532e:	2a00      	cmp	r2, #0
 8005330:	dd03      	ble.n	800533a <_dtoa_r+0xae2>
 8005332:	2b39      	cmp	r3, #57	; 0x39
 8005334:	d0ee      	beq.n	8005314 <_dtoa_r+0xabc>
 8005336:	3301      	adds	r3, #1
 8005338:	e7c7      	b.n	80052ca <_dtoa_r+0xa72>
 800533a:	9a01      	ldr	r2, [sp, #4]
 800533c:	9907      	ldr	r1, [sp, #28]
 800533e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005342:	428a      	cmp	r2, r1
 8005344:	d02a      	beq.n	800539c <_dtoa_r+0xb44>
 8005346:	4659      	mov	r1, fp
 8005348:	2300      	movs	r3, #0
 800534a:	220a      	movs	r2, #10
 800534c:	4620      	mov	r0, r4
 800534e:	f000 f90f 	bl	8005570 <__multadd>
 8005352:	45b8      	cmp	r8, r7
 8005354:	4683      	mov	fp, r0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	f04f 020a 	mov.w	r2, #10
 800535e:	4641      	mov	r1, r8
 8005360:	4620      	mov	r0, r4
 8005362:	d107      	bne.n	8005374 <_dtoa_r+0xb1c>
 8005364:	f000 f904 	bl	8005570 <__multadd>
 8005368:	4680      	mov	r8, r0
 800536a:	4607      	mov	r7, r0
 800536c:	9b01      	ldr	r3, [sp, #4]
 800536e:	3301      	adds	r3, #1
 8005370:	9301      	str	r3, [sp, #4]
 8005372:	e775      	b.n	8005260 <_dtoa_r+0xa08>
 8005374:	f000 f8fc 	bl	8005570 <__multadd>
 8005378:	4639      	mov	r1, r7
 800537a:	4680      	mov	r8, r0
 800537c:	2300      	movs	r3, #0
 800537e:	220a      	movs	r2, #10
 8005380:	4620      	mov	r0, r4
 8005382:	f000 f8f5 	bl	8005570 <__multadd>
 8005386:	4607      	mov	r7, r0
 8005388:	e7f0      	b.n	800536c <_dtoa_r+0xb14>
 800538a:	f1b9 0f00 	cmp.w	r9, #0
 800538e:	9a00      	ldr	r2, [sp, #0]
 8005390:	bfcc      	ite	gt
 8005392:	464d      	movgt	r5, r9
 8005394:	2501      	movle	r5, #1
 8005396:	4415      	add	r5, r2
 8005398:	f04f 0800 	mov.w	r8, #0
 800539c:	4659      	mov	r1, fp
 800539e:	2201      	movs	r2, #1
 80053a0:	4620      	mov	r0, r4
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	f000 fa94 	bl	80058d0 <__lshift>
 80053a8:	4631      	mov	r1, r6
 80053aa:	4683      	mov	fp, r0
 80053ac:	f000 fafc 	bl	80059a8 <__mcmp>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	dcb2      	bgt.n	800531a <_dtoa_r+0xac2>
 80053b4:	d102      	bne.n	80053bc <_dtoa_r+0xb64>
 80053b6:	9b01      	ldr	r3, [sp, #4]
 80053b8:	07db      	lsls	r3, r3, #31
 80053ba:	d4ae      	bmi.n	800531a <_dtoa_r+0xac2>
 80053bc:	462b      	mov	r3, r5
 80053be:	461d      	mov	r5, r3
 80053c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053c4:	2a30      	cmp	r2, #48	; 0x30
 80053c6:	d0fa      	beq.n	80053be <_dtoa_r+0xb66>
 80053c8:	e6f7      	b.n	80051ba <_dtoa_r+0x962>
 80053ca:	9a00      	ldr	r2, [sp, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d1a5      	bne.n	800531c <_dtoa_r+0xac4>
 80053d0:	f10a 0a01 	add.w	sl, sl, #1
 80053d4:	2331      	movs	r3, #49	; 0x31
 80053d6:	e779      	b.n	80052cc <_dtoa_r+0xa74>
 80053d8:	4b13      	ldr	r3, [pc, #76]	; (8005428 <_dtoa_r+0xbd0>)
 80053da:	f7ff baaf 	b.w	800493c <_dtoa_r+0xe4>
 80053de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f47f aa86 	bne.w	80048f2 <_dtoa_r+0x9a>
 80053e6:	4b11      	ldr	r3, [pc, #68]	; (800542c <_dtoa_r+0xbd4>)
 80053e8:	f7ff baa8 	b.w	800493c <_dtoa_r+0xe4>
 80053ec:	f1b9 0f00 	cmp.w	r9, #0
 80053f0:	dc03      	bgt.n	80053fa <_dtoa_r+0xba2>
 80053f2:	9b05      	ldr	r3, [sp, #20]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	f73f aec9 	bgt.w	800518c <_dtoa_r+0x934>
 80053fa:	9d00      	ldr	r5, [sp, #0]
 80053fc:	4631      	mov	r1, r6
 80053fe:	4658      	mov	r0, fp
 8005400:	f7ff f99c 	bl	800473c <quorem>
 8005404:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005408:	f805 3b01 	strb.w	r3, [r5], #1
 800540c:	9a00      	ldr	r2, [sp, #0]
 800540e:	1aaa      	subs	r2, r5, r2
 8005410:	4591      	cmp	r9, r2
 8005412:	ddba      	ble.n	800538a <_dtoa_r+0xb32>
 8005414:	4659      	mov	r1, fp
 8005416:	2300      	movs	r3, #0
 8005418:	220a      	movs	r2, #10
 800541a:	4620      	mov	r0, r4
 800541c:	f000 f8a8 	bl	8005570 <__multadd>
 8005420:	4683      	mov	fp, r0
 8005422:	e7eb      	b.n	80053fc <_dtoa_r+0xba4>
 8005424:	080068ff 	.word	0x080068ff
 8005428:	0800681c 	.word	0x0800681c
 800542c:	0800687c 	.word	0x0800687c

08005430 <fiprintf>:
 8005430:	b40e      	push	{r1, r2, r3}
 8005432:	b503      	push	{r0, r1, lr}
 8005434:	4601      	mov	r1, r0
 8005436:	ab03      	add	r3, sp, #12
 8005438:	4805      	ldr	r0, [pc, #20]	; (8005450 <fiprintf+0x20>)
 800543a:	f853 2b04 	ldr.w	r2, [r3], #4
 800543e:	6800      	ldr	r0, [r0, #0]
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	f000 fc95 	bl	8005d70 <_vfiprintf_r>
 8005446:	b002      	add	sp, #8
 8005448:	f85d eb04 	ldr.w	lr, [sp], #4
 800544c:	b003      	add	sp, #12
 800544e:	4770      	bx	lr
 8005450:	2000000c 	.word	0x2000000c

08005454 <_localeconv_r>:
 8005454:	4800      	ldr	r0, [pc, #0]	; (8005458 <_localeconv_r+0x4>)
 8005456:	4770      	bx	lr
 8005458:	20000160 	.word	0x20000160

0800545c <malloc>:
 800545c:	4b02      	ldr	r3, [pc, #8]	; (8005468 <malloc+0xc>)
 800545e:	4601      	mov	r1, r0
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	f000 bc01 	b.w	8005c68 <_malloc_r>
 8005466:	bf00      	nop
 8005468:	2000000c 	.word	0x2000000c

0800546c <__ascii_mbtowc>:
 800546c:	b082      	sub	sp, #8
 800546e:	b901      	cbnz	r1, 8005472 <__ascii_mbtowc+0x6>
 8005470:	a901      	add	r1, sp, #4
 8005472:	b142      	cbz	r2, 8005486 <__ascii_mbtowc+0x1a>
 8005474:	b14b      	cbz	r3, 800548a <__ascii_mbtowc+0x1e>
 8005476:	7813      	ldrb	r3, [r2, #0]
 8005478:	600b      	str	r3, [r1, #0]
 800547a:	7812      	ldrb	r2, [r2, #0]
 800547c:	1e10      	subs	r0, r2, #0
 800547e:	bf18      	it	ne
 8005480:	2001      	movne	r0, #1
 8005482:	b002      	add	sp, #8
 8005484:	4770      	bx	lr
 8005486:	4610      	mov	r0, r2
 8005488:	e7fb      	b.n	8005482 <__ascii_mbtowc+0x16>
 800548a:	f06f 0001 	mvn.w	r0, #1
 800548e:	e7f8      	b.n	8005482 <__ascii_mbtowc+0x16>

08005490 <memcpy>:
 8005490:	440a      	add	r2, r1
 8005492:	4291      	cmp	r1, r2
 8005494:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005498:	d100      	bne.n	800549c <memcpy+0xc>
 800549a:	4770      	bx	lr
 800549c:	b510      	push	{r4, lr}
 800549e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054a6:	4291      	cmp	r1, r2
 80054a8:	d1f9      	bne.n	800549e <memcpy+0xe>
 80054aa:	bd10      	pop	{r4, pc}

080054ac <_Balloc>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054b0:	4604      	mov	r4, r0
 80054b2:	460d      	mov	r5, r1
 80054b4:	b976      	cbnz	r6, 80054d4 <_Balloc+0x28>
 80054b6:	2010      	movs	r0, #16
 80054b8:	f7ff ffd0 	bl	800545c <malloc>
 80054bc:	4602      	mov	r2, r0
 80054be:	6260      	str	r0, [r4, #36]	; 0x24
 80054c0:	b920      	cbnz	r0, 80054cc <_Balloc+0x20>
 80054c2:	4b18      	ldr	r3, [pc, #96]	; (8005524 <_Balloc+0x78>)
 80054c4:	4818      	ldr	r0, [pc, #96]	; (8005528 <_Balloc+0x7c>)
 80054c6:	2166      	movs	r1, #102	; 0x66
 80054c8:	f7ff f91a 	bl	8004700 <__assert_func>
 80054cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054d0:	6006      	str	r6, [r0, #0]
 80054d2:	60c6      	str	r6, [r0, #12]
 80054d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054d6:	68f3      	ldr	r3, [r6, #12]
 80054d8:	b183      	cbz	r3, 80054fc <_Balloc+0x50>
 80054da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80054e2:	b9b8      	cbnz	r0, 8005514 <_Balloc+0x68>
 80054e4:	2101      	movs	r1, #1
 80054e6:	fa01 f605 	lsl.w	r6, r1, r5
 80054ea:	1d72      	adds	r2, r6, #5
 80054ec:	0092      	lsls	r2, r2, #2
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 fb5a 	bl	8005ba8 <_calloc_r>
 80054f4:	b160      	cbz	r0, 8005510 <_Balloc+0x64>
 80054f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054fa:	e00e      	b.n	800551a <_Balloc+0x6e>
 80054fc:	2221      	movs	r2, #33	; 0x21
 80054fe:	2104      	movs	r1, #4
 8005500:	4620      	mov	r0, r4
 8005502:	f000 fb51 	bl	8005ba8 <_calloc_r>
 8005506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005508:	60f0      	str	r0, [r6, #12]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e4      	bne.n	80054da <_Balloc+0x2e>
 8005510:	2000      	movs	r0, #0
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	6802      	ldr	r2, [r0, #0]
 8005516:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800551a:	2300      	movs	r3, #0
 800551c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005520:	e7f7      	b.n	8005512 <_Balloc+0x66>
 8005522:	bf00      	nop
 8005524:	08006889 	.word	0x08006889
 8005528:	0800691a 	.word	0x0800691a

0800552c <_Bfree>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005530:	4605      	mov	r5, r0
 8005532:	460c      	mov	r4, r1
 8005534:	b976      	cbnz	r6, 8005554 <_Bfree+0x28>
 8005536:	2010      	movs	r0, #16
 8005538:	f7ff ff90 	bl	800545c <malloc>
 800553c:	4602      	mov	r2, r0
 800553e:	6268      	str	r0, [r5, #36]	; 0x24
 8005540:	b920      	cbnz	r0, 800554c <_Bfree+0x20>
 8005542:	4b09      	ldr	r3, [pc, #36]	; (8005568 <_Bfree+0x3c>)
 8005544:	4809      	ldr	r0, [pc, #36]	; (800556c <_Bfree+0x40>)
 8005546:	218a      	movs	r1, #138	; 0x8a
 8005548:	f7ff f8da 	bl	8004700 <__assert_func>
 800554c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005550:	6006      	str	r6, [r0, #0]
 8005552:	60c6      	str	r6, [r0, #12]
 8005554:	b13c      	cbz	r4, 8005566 <_Bfree+0x3a>
 8005556:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005558:	6862      	ldr	r2, [r4, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005560:	6021      	str	r1, [r4, #0]
 8005562:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005566:	bd70      	pop	{r4, r5, r6, pc}
 8005568:	08006889 	.word	0x08006889
 800556c:	0800691a 	.word	0x0800691a

08005570 <__multadd>:
 8005570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005574:	690e      	ldr	r6, [r1, #16]
 8005576:	4607      	mov	r7, r0
 8005578:	4698      	mov	r8, r3
 800557a:	460c      	mov	r4, r1
 800557c:	f101 0014 	add.w	r0, r1, #20
 8005580:	2300      	movs	r3, #0
 8005582:	6805      	ldr	r5, [r0, #0]
 8005584:	b2a9      	uxth	r1, r5
 8005586:	fb02 8101 	mla	r1, r2, r1, r8
 800558a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800558e:	0c2d      	lsrs	r5, r5, #16
 8005590:	fb02 c505 	mla	r5, r2, r5, ip
 8005594:	b289      	uxth	r1, r1
 8005596:	3301      	adds	r3, #1
 8005598:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800559c:	429e      	cmp	r6, r3
 800559e:	f840 1b04 	str.w	r1, [r0], #4
 80055a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80055a6:	dcec      	bgt.n	8005582 <__multadd+0x12>
 80055a8:	f1b8 0f00 	cmp.w	r8, #0
 80055ac:	d022      	beq.n	80055f4 <__multadd+0x84>
 80055ae:	68a3      	ldr	r3, [r4, #8]
 80055b0:	42b3      	cmp	r3, r6
 80055b2:	dc19      	bgt.n	80055e8 <__multadd+0x78>
 80055b4:	6861      	ldr	r1, [r4, #4]
 80055b6:	4638      	mov	r0, r7
 80055b8:	3101      	adds	r1, #1
 80055ba:	f7ff ff77 	bl	80054ac <_Balloc>
 80055be:	4605      	mov	r5, r0
 80055c0:	b928      	cbnz	r0, 80055ce <__multadd+0x5e>
 80055c2:	4602      	mov	r2, r0
 80055c4:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <__multadd+0x8c>)
 80055c6:	480e      	ldr	r0, [pc, #56]	; (8005600 <__multadd+0x90>)
 80055c8:	21b5      	movs	r1, #181	; 0xb5
 80055ca:	f7ff f899 	bl	8004700 <__assert_func>
 80055ce:	6922      	ldr	r2, [r4, #16]
 80055d0:	3202      	adds	r2, #2
 80055d2:	f104 010c 	add.w	r1, r4, #12
 80055d6:	0092      	lsls	r2, r2, #2
 80055d8:	300c      	adds	r0, #12
 80055da:	f7ff ff59 	bl	8005490 <memcpy>
 80055de:	4621      	mov	r1, r4
 80055e0:	4638      	mov	r0, r7
 80055e2:	f7ff ffa3 	bl	800552c <_Bfree>
 80055e6:	462c      	mov	r4, r5
 80055e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80055ec:	3601      	adds	r6, #1
 80055ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80055f2:	6126      	str	r6, [r4, #16]
 80055f4:	4620      	mov	r0, r4
 80055f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055fa:	bf00      	nop
 80055fc:	080068ff 	.word	0x080068ff
 8005600:	0800691a 	.word	0x0800691a

08005604 <__hi0bits>:
 8005604:	0c03      	lsrs	r3, r0, #16
 8005606:	041b      	lsls	r3, r3, #16
 8005608:	b9d3      	cbnz	r3, 8005640 <__hi0bits+0x3c>
 800560a:	0400      	lsls	r0, r0, #16
 800560c:	2310      	movs	r3, #16
 800560e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005612:	bf04      	itt	eq
 8005614:	0200      	lsleq	r0, r0, #8
 8005616:	3308      	addeq	r3, #8
 8005618:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800561c:	bf04      	itt	eq
 800561e:	0100      	lsleq	r0, r0, #4
 8005620:	3304      	addeq	r3, #4
 8005622:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005626:	bf04      	itt	eq
 8005628:	0080      	lsleq	r0, r0, #2
 800562a:	3302      	addeq	r3, #2
 800562c:	2800      	cmp	r0, #0
 800562e:	db05      	blt.n	800563c <__hi0bits+0x38>
 8005630:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005634:	f103 0301 	add.w	r3, r3, #1
 8005638:	bf08      	it	eq
 800563a:	2320      	moveq	r3, #32
 800563c:	4618      	mov	r0, r3
 800563e:	4770      	bx	lr
 8005640:	2300      	movs	r3, #0
 8005642:	e7e4      	b.n	800560e <__hi0bits+0xa>

08005644 <__lo0bits>:
 8005644:	6803      	ldr	r3, [r0, #0]
 8005646:	f013 0207 	ands.w	r2, r3, #7
 800564a:	4601      	mov	r1, r0
 800564c:	d00b      	beq.n	8005666 <__lo0bits+0x22>
 800564e:	07da      	lsls	r2, r3, #31
 8005650:	d424      	bmi.n	800569c <__lo0bits+0x58>
 8005652:	0798      	lsls	r0, r3, #30
 8005654:	bf49      	itett	mi
 8005656:	085b      	lsrmi	r3, r3, #1
 8005658:	089b      	lsrpl	r3, r3, #2
 800565a:	2001      	movmi	r0, #1
 800565c:	600b      	strmi	r3, [r1, #0]
 800565e:	bf5c      	itt	pl
 8005660:	600b      	strpl	r3, [r1, #0]
 8005662:	2002      	movpl	r0, #2
 8005664:	4770      	bx	lr
 8005666:	b298      	uxth	r0, r3
 8005668:	b9b0      	cbnz	r0, 8005698 <__lo0bits+0x54>
 800566a:	0c1b      	lsrs	r3, r3, #16
 800566c:	2010      	movs	r0, #16
 800566e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005672:	bf04      	itt	eq
 8005674:	0a1b      	lsreq	r3, r3, #8
 8005676:	3008      	addeq	r0, #8
 8005678:	071a      	lsls	r2, r3, #28
 800567a:	bf04      	itt	eq
 800567c:	091b      	lsreq	r3, r3, #4
 800567e:	3004      	addeq	r0, #4
 8005680:	079a      	lsls	r2, r3, #30
 8005682:	bf04      	itt	eq
 8005684:	089b      	lsreq	r3, r3, #2
 8005686:	3002      	addeq	r0, #2
 8005688:	07da      	lsls	r2, r3, #31
 800568a:	d403      	bmi.n	8005694 <__lo0bits+0x50>
 800568c:	085b      	lsrs	r3, r3, #1
 800568e:	f100 0001 	add.w	r0, r0, #1
 8005692:	d005      	beq.n	80056a0 <__lo0bits+0x5c>
 8005694:	600b      	str	r3, [r1, #0]
 8005696:	4770      	bx	lr
 8005698:	4610      	mov	r0, r2
 800569a:	e7e8      	b.n	800566e <__lo0bits+0x2a>
 800569c:	2000      	movs	r0, #0
 800569e:	4770      	bx	lr
 80056a0:	2020      	movs	r0, #32
 80056a2:	4770      	bx	lr

080056a4 <__i2b>:
 80056a4:	b510      	push	{r4, lr}
 80056a6:	460c      	mov	r4, r1
 80056a8:	2101      	movs	r1, #1
 80056aa:	f7ff feff 	bl	80054ac <_Balloc>
 80056ae:	4602      	mov	r2, r0
 80056b0:	b928      	cbnz	r0, 80056be <__i2b+0x1a>
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <__i2b+0x24>)
 80056b4:	4805      	ldr	r0, [pc, #20]	; (80056cc <__i2b+0x28>)
 80056b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80056ba:	f7ff f821 	bl	8004700 <__assert_func>
 80056be:	2301      	movs	r3, #1
 80056c0:	6144      	str	r4, [r0, #20]
 80056c2:	6103      	str	r3, [r0, #16]
 80056c4:	bd10      	pop	{r4, pc}
 80056c6:	bf00      	nop
 80056c8:	080068ff 	.word	0x080068ff
 80056cc:	0800691a 	.word	0x0800691a

080056d0 <__multiply>:
 80056d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d4:	4614      	mov	r4, r2
 80056d6:	690a      	ldr	r2, [r1, #16]
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	429a      	cmp	r2, r3
 80056dc:	bfb8      	it	lt
 80056de:	460b      	movlt	r3, r1
 80056e0:	460d      	mov	r5, r1
 80056e2:	bfbc      	itt	lt
 80056e4:	4625      	movlt	r5, r4
 80056e6:	461c      	movlt	r4, r3
 80056e8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80056ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80056f0:	68ab      	ldr	r3, [r5, #8]
 80056f2:	6869      	ldr	r1, [r5, #4]
 80056f4:	eb0a 0709 	add.w	r7, sl, r9
 80056f8:	42bb      	cmp	r3, r7
 80056fa:	b085      	sub	sp, #20
 80056fc:	bfb8      	it	lt
 80056fe:	3101      	addlt	r1, #1
 8005700:	f7ff fed4 	bl	80054ac <_Balloc>
 8005704:	b930      	cbnz	r0, 8005714 <__multiply+0x44>
 8005706:	4602      	mov	r2, r0
 8005708:	4b42      	ldr	r3, [pc, #264]	; (8005814 <__multiply+0x144>)
 800570a:	4843      	ldr	r0, [pc, #268]	; (8005818 <__multiply+0x148>)
 800570c:	f240 115d 	movw	r1, #349	; 0x15d
 8005710:	f7fe fff6 	bl	8004700 <__assert_func>
 8005714:	f100 0614 	add.w	r6, r0, #20
 8005718:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800571c:	4633      	mov	r3, r6
 800571e:	2200      	movs	r2, #0
 8005720:	4543      	cmp	r3, r8
 8005722:	d31e      	bcc.n	8005762 <__multiply+0x92>
 8005724:	f105 0c14 	add.w	ip, r5, #20
 8005728:	f104 0314 	add.w	r3, r4, #20
 800572c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005730:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005734:	9202      	str	r2, [sp, #8]
 8005736:	ebac 0205 	sub.w	r2, ip, r5
 800573a:	3a15      	subs	r2, #21
 800573c:	f022 0203 	bic.w	r2, r2, #3
 8005740:	3204      	adds	r2, #4
 8005742:	f105 0115 	add.w	r1, r5, #21
 8005746:	458c      	cmp	ip, r1
 8005748:	bf38      	it	cc
 800574a:	2204      	movcc	r2, #4
 800574c:	9201      	str	r2, [sp, #4]
 800574e:	9a02      	ldr	r2, [sp, #8]
 8005750:	9303      	str	r3, [sp, #12]
 8005752:	429a      	cmp	r2, r3
 8005754:	d808      	bhi.n	8005768 <__multiply+0x98>
 8005756:	2f00      	cmp	r7, #0
 8005758:	dc55      	bgt.n	8005806 <__multiply+0x136>
 800575a:	6107      	str	r7, [r0, #16]
 800575c:	b005      	add	sp, #20
 800575e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005762:	f843 2b04 	str.w	r2, [r3], #4
 8005766:	e7db      	b.n	8005720 <__multiply+0x50>
 8005768:	f8b3 a000 	ldrh.w	sl, [r3]
 800576c:	f1ba 0f00 	cmp.w	sl, #0
 8005770:	d020      	beq.n	80057b4 <__multiply+0xe4>
 8005772:	f105 0e14 	add.w	lr, r5, #20
 8005776:	46b1      	mov	r9, r6
 8005778:	2200      	movs	r2, #0
 800577a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800577e:	f8d9 b000 	ldr.w	fp, [r9]
 8005782:	b2a1      	uxth	r1, r4
 8005784:	fa1f fb8b 	uxth.w	fp, fp
 8005788:	fb0a b101 	mla	r1, sl, r1, fp
 800578c:	4411      	add	r1, r2
 800578e:	f8d9 2000 	ldr.w	r2, [r9]
 8005792:	0c24      	lsrs	r4, r4, #16
 8005794:	0c12      	lsrs	r2, r2, #16
 8005796:	fb0a 2404 	mla	r4, sl, r4, r2
 800579a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800579e:	b289      	uxth	r1, r1
 80057a0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80057a4:	45f4      	cmp	ip, lr
 80057a6:	f849 1b04 	str.w	r1, [r9], #4
 80057aa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80057ae:	d8e4      	bhi.n	800577a <__multiply+0xaa>
 80057b0:	9901      	ldr	r1, [sp, #4]
 80057b2:	5072      	str	r2, [r6, r1]
 80057b4:	9a03      	ldr	r2, [sp, #12]
 80057b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80057ba:	3304      	adds	r3, #4
 80057bc:	f1b9 0f00 	cmp.w	r9, #0
 80057c0:	d01f      	beq.n	8005802 <__multiply+0x132>
 80057c2:	6834      	ldr	r4, [r6, #0]
 80057c4:	f105 0114 	add.w	r1, r5, #20
 80057c8:	46b6      	mov	lr, r6
 80057ca:	f04f 0a00 	mov.w	sl, #0
 80057ce:	880a      	ldrh	r2, [r1, #0]
 80057d0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80057d4:	fb09 b202 	mla	r2, r9, r2, fp
 80057d8:	4492      	add	sl, r2
 80057da:	b2a4      	uxth	r4, r4
 80057dc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80057e0:	f84e 4b04 	str.w	r4, [lr], #4
 80057e4:	f851 4b04 	ldr.w	r4, [r1], #4
 80057e8:	f8be 2000 	ldrh.w	r2, [lr]
 80057ec:	0c24      	lsrs	r4, r4, #16
 80057ee:	fb09 2404 	mla	r4, r9, r4, r2
 80057f2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80057f6:	458c      	cmp	ip, r1
 80057f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80057fc:	d8e7      	bhi.n	80057ce <__multiply+0xfe>
 80057fe:	9a01      	ldr	r2, [sp, #4]
 8005800:	50b4      	str	r4, [r6, r2]
 8005802:	3604      	adds	r6, #4
 8005804:	e7a3      	b.n	800574e <__multiply+0x7e>
 8005806:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1a5      	bne.n	800575a <__multiply+0x8a>
 800580e:	3f01      	subs	r7, #1
 8005810:	e7a1      	b.n	8005756 <__multiply+0x86>
 8005812:	bf00      	nop
 8005814:	080068ff 	.word	0x080068ff
 8005818:	0800691a 	.word	0x0800691a

0800581c <__pow5mult>:
 800581c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005820:	4615      	mov	r5, r2
 8005822:	f012 0203 	ands.w	r2, r2, #3
 8005826:	4606      	mov	r6, r0
 8005828:	460f      	mov	r7, r1
 800582a:	d007      	beq.n	800583c <__pow5mult+0x20>
 800582c:	4c25      	ldr	r4, [pc, #148]	; (80058c4 <__pow5mult+0xa8>)
 800582e:	3a01      	subs	r2, #1
 8005830:	2300      	movs	r3, #0
 8005832:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005836:	f7ff fe9b 	bl	8005570 <__multadd>
 800583a:	4607      	mov	r7, r0
 800583c:	10ad      	asrs	r5, r5, #2
 800583e:	d03d      	beq.n	80058bc <__pow5mult+0xa0>
 8005840:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005842:	b97c      	cbnz	r4, 8005864 <__pow5mult+0x48>
 8005844:	2010      	movs	r0, #16
 8005846:	f7ff fe09 	bl	800545c <malloc>
 800584a:	4602      	mov	r2, r0
 800584c:	6270      	str	r0, [r6, #36]	; 0x24
 800584e:	b928      	cbnz	r0, 800585c <__pow5mult+0x40>
 8005850:	4b1d      	ldr	r3, [pc, #116]	; (80058c8 <__pow5mult+0xac>)
 8005852:	481e      	ldr	r0, [pc, #120]	; (80058cc <__pow5mult+0xb0>)
 8005854:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005858:	f7fe ff52 	bl	8004700 <__assert_func>
 800585c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005860:	6004      	str	r4, [r0, #0]
 8005862:	60c4      	str	r4, [r0, #12]
 8005864:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005868:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800586c:	b94c      	cbnz	r4, 8005882 <__pow5mult+0x66>
 800586e:	f240 2171 	movw	r1, #625	; 0x271
 8005872:	4630      	mov	r0, r6
 8005874:	f7ff ff16 	bl	80056a4 <__i2b>
 8005878:	2300      	movs	r3, #0
 800587a:	f8c8 0008 	str.w	r0, [r8, #8]
 800587e:	4604      	mov	r4, r0
 8005880:	6003      	str	r3, [r0, #0]
 8005882:	f04f 0900 	mov.w	r9, #0
 8005886:	07eb      	lsls	r3, r5, #31
 8005888:	d50a      	bpl.n	80058a0 <__pow5mult+0x84>
 800588a:	4639      	mov	r1, r7
 800588c:	4622      	mov	r2, r4
 800588e:	4630      	mov	r0, r6
 8005890:	f7ff ff1e 	bl	80056d0 <__multiply>
 8005894:	4639      	mov	r1, r7
 8005896:	4680      	mov	r8, r0
 8005898:	4630      	mov	r0, r6
 800589a:	f7ff fe47 	bl	800552c <_Bfree>
 800589e:	4647      	mov	r7, r8
 80058a0:	106d      	asrs	r5, r5, #1
 80058a2:	d00b      	beq.n	80058bc <__pow5mult+0xa0>
 80058a4:	6820      	ldr	r0, [r4, #0]
 80058a6:	b938      	cbnz	r0, 80058b8 <__pow5mult+0x9c>
 80058a8:	4622      	mov	r2, r4
 80058aa:	4621      	mov	r1, r4
 80058ac:	4630      	mov	r0, r6
 80058ae:	f7ff ff0f 	bl	80056d0 <__multiply>
 80058b2:	6020      	str	r0, [r4, #0]
 80058b4:	f8c0 9000 	str.w	r9, [r0]
 80058b8:	4604      	mov	r4, r0
 80058ba:	e7e4      	b.n	8005886 <__pow5mult+0x6a>
 80058bc:	4638      	mov	r0, r7
 80058be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058c2:	bf00      	nop
 80058c4:	08006a70 	.word	0x08006a70
 80058c8:	08006889 	.word	0x08006889
 80058cc:	0800691a 	.word	0x0800691a

080058d0 <__lshift>:
 80058d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d4:	460c      	mov	r4, r1
 80058d6:	6849      	ldr	r1, [r1, #4]
 80058d8:	6923      	ldr	r3, [r4, #16]
 80058da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80058de:	68a3      	ldr	r3, [r4, #8]
 80058e0:	4607      	mov	r7, r0
 80058e2:	4691      	mov	r9, r2
 80058e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058e8:	f108 0601 	add.w	r6, r8, #1
 80058ec:	42b3      	cmp	r3, r6
 80058ee:	db0b      	blt.n	8005908 <__lshift+0x38>
 80058f0:	4638      	mov	r0, r7
 80058f2:	f7ff fddb 	bl	80054ac <_Balloc>
 80058f6:	4605      	mov	r5, r0
 80058f8:	b948      	cbnz	r0, 800590e <__lshift+0x3e>
 80058fa:	4602      	mov	r2, r0
 80058fc:	4b28      	ldr	r3, [pc, #160]	; (80059a0 <__lshift+0xd0>)
 80058fe:	4829      	ldr	r0, [pc, #164]	; (80059a4 <__lshift+0xd4>)
 8005900:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005904:	f7fe fefc 	bl	8004700 <__assert_func>
 8005908:	3101      	adds	r1, #1
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	e7ee      	b.n	80058ec <__lshift+0x1c>
 800590e:	2300      	movs	r3, #0
 8005910:	f100 0114 	add.w	r1, r0, #20
 8005914:	f100 0210 	add.w	r2, r0, #16
 8005918:	4618      	mov	r0, r3
 800591a:	4553      	cmp	r3, sl
 800591c:	db33      	blt.n	8005986 <__lshift+0xb6>
 800591e:	6920      	ldr	r0, [r4, #16]
 8005920:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005924:	f104 0314 	add.w	r3, r4, #20
 8005928:	f019 091f 	ands.w	r9, r9, #31
 800592c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005930:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005934:	d02b      	beq.n	800598e <__lshift+0xbe>
 8005936:	f1c9 0e20 	rsb	lr, r9, #32
 800593a:	468a      	mov	sl, r1
 800593c:	2200      	movs	r2, #0
 800593e:	6818      	ldr	r0, [r3, #0]
 8005940:	fa00 f009 	lsl.w	r0, r0, r9
 8005944:	4302      	orrs	r2, r0
 8005946:	f84a 2b04 	str.w	r2, [sl], #4
 800594a:	f853 2b04 	ldr.w	r2, [r3], #4
 800594e:	459c      	cmp	ip, r3
 8005950:	fa22 f20e 	lsr.w	r2, r2, lr
 8005954:	d8f3      	bhi.n	800593e <__lshift+0x6e>
 8005956:	ebac 0304 	sub.w	r3, ip, r4
 800595a:	3b15      	subs	r3, #21
 800595c:	f023 0303 	bic.w	r3, r3, #3
 8005960:	3304      	adds	r3, #4
 8005962:	f104 0015 	add.w	r0, r4, #21
 8005966:	4584      	cmp	ip, r0
 8005968:	bf38      	it	cc
 800596a:	2304      	movcc	r3, #4
 800596c:	50ca      	str	r2, [r1, r3]
 800596e:	b10a      	cbz	r2, 8005974 <__lshift+0xa4>
 8005970:	f108 0602 	add.w	r6, r8, #2
 8005974:	3e01      	subs	r6, #1
 8005976:	4638      	mov	r0, r7
 8005978:	612e      	str	r6, [r5, #16]
 800597a:	4621      	mov	r1, r4
 800597c:	f7ff fdd6 	bl	800552c <_Bfree>
 8005980:	4628      	mov	r0, r5
 8005982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005986:	f842 0f04 	str.w	r0, [r2, #4]!
 800598a:	3301      	adds	r3, #1
 800598c:	e7c5      	b.n	800591a <__lshift+0x4a>
 800598e:	3904      	subs	r1, #4
 8005990:	f853 2b04 	ldr.w	r2, [r3], #4
 8005994:	f841 2f04 	str.w	r2, [r1, #4]!
 8005998:	459c      	cmp	ip, r3
 800599a:	d8f9      	bhi.n	8005990 <__lshift+0xc0>
 800599c:	e7ea      	b.n	8005974 <__lshift+0xa4>
 800599e:	bf00      	nop
 80059a0:	080068ff 	.word	0x080068ff
 80059a4:	0800691a 	.word	0x0800691a

080059a8 <__mcmp>:
 80059a8:	b530      	push	{r4, r5, lr}
 80059aa:	6902      	ldr	r2, [r0, #16]
 80059ac:	690c      	ldr	r4, [r1, #16]
 80059ae:	1b12      	subs	r2, r2, r4
 80059b0:	d10e      	bne.n	80059d0 <__mcmp+0x28>
 80059b2:	f100 0314 	add.w	r3, r0, #20
 80059b6:	3114      	adds	r1, #20
 80059b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80059bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80059c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80059c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80059c8:	42a5      	cmp	r5, r4
 80059ca:	d003      	beq.n	80059d4 <__mcmp+0x2c>
 80059cc:	d305      	bcc.n	80059da <__mcmp+0x32>
 80059ce:	2201      	movs	r2, #1
 80059d0:	4610      	mov	r0, r2
 80059d2:	bd30      	pop	{r4, r5, pc}
 80059d4:	4283      	cmp	r3, r0
 80059d6:	d3f3      	bcc.n	80059c0 <__mcmp+0x18>
 80059d8:	e7fa      	b.n	80059d0 <__mcmp+0x28>
 80059da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059de:	e7f7      	b.n	80059d0 <__mcmp+0x28>

080059e0 <__mdiff>:
 80059e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	460c      	mov	r4, r1
 80059e6:	4606      	mov	r6, r0
 80059e8:	4611      	mov	r1, r2
 80059ea:	4620      	mov	r0, r4
 80059ec:	4617      	mov	r7, r2
 80059ee:	f7ff ffdb 	bl	80059a8 <__mcmp>
 80059f2:	1e05      	subs	r5, r0, #0
 80059f4:	d110      	bne.n	8005a18 <__mdiff+0x38>
 80059f6:	4629      	mov	r1, r5
 80059f8:	4630      	mov	r0, r6
 80059fa:	f7ff fd57 	bl	80054ac <_Balloc>
 80059fe:	b930      	cbnz	r0, 8005a0e <__mdiff+0x2e>
 8005a00:	4b39      	ldr	r3, [pc, #228]	; (8005ae8 <__mdiff+0x108>)
 8005a02:	4602      	mov	r2, r0
 8005a04:	f240 2132 	movw	r1, #562	; 0x232
 8005a08:	4838      	ldr	r0, [pc, #224]	; (8005aec <__mdiff+0x10c>)
 8005a0a:	f7fe fe79 	bl	8004700 <__assert_func>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a18:	bfa4      	itt	ge
 8005a1a:	463b      	movge	r3, r7
 8005a1c:	4627      	movge	r7, r4
 8005a1e:	4630      	mov	r0, r6
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	bfa6      	itte	ge
 8005a24:	461c      	movge	r4, r3
 8005a26:	2500      	movge	r5, #0
 8005a28:	2501      	movlt	r5, #1
 8005a2a:	f7ff fd3f 	bl	80054ac <_Balloc>
 8005a2e:	b920      	cbnz	r0, 8005a3a <__mdiff+0x5a>
 8005a30:	4b2d      	ldr	r3, [pc, #180]	; (8005ae8 <__mdiff+0x108>)
 8005a32:	4602      	mov	r2, r0
 8005a34:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005a38:	e7e6      	b.n	8005a08 <__mdiff+0x28>
 8005a3a:	693e      	ldr	r6, [r7, #16]
 8005a3c:	60c5      	str	r5, [r0, #12]
 8005a3e:	6925      	ldr	r5, [r4, #16]
 8005a40:	f107 0114 	add.w	r1, r7, #20
 8005a44:	f104 0914 	add.w	r9, r4, #20
 8005a48:	f100 0e14 	add.w	lr, r0, #20
 8005a4c:	f107 0210 	add.w	r2, r7, #16
 8005a50:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005a54:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005a58:	46f2      	mov	sl, lr
 8005a5a:	2700      	movs	r7, #0
 8005a5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005a64:	fa1f f883 	uxth.w	r8, r3
 8005a68:	fa17 f78b 	uxtah	r7, r7, fp
 8005a6c:	0c1b      	lsrs	r3, r3, #16
 8005a6e:	eba7 0808 	sub.w	r8, r7, r8
 8005a72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005a76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005a7a:	fa1f f888 	uxth.w	r8, r8
 8005a7e:	141f      	asrs	r7, r3, #16
 8005a80:	454d      	cmp	r5, r9
 8005a82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005a86:	f84a 3b04 	str.w	r3, [sl], #4
 8005a8a:	d8e7      	bhi.n	8005a5c <__mdiff+0x7c>
 8005a8c:	1b2b      	subs	r3, r5, r4
 8005a8e:	3b15      	subs	r3, #21
 8005a90:	f023 0303 	bic.w	r3, r3, #3
 8005a94:	3304      	adds	r3, #4
 8005a96:	3415      	adds	r4, #21
 8005a98:	42a5      	cmp	r5, r4
 8005a9a:	bf38      	it	cc
 8005a9c:	2304      	movcc	r3, #4
 8005a9e:	4419      	add	r1, r3
 8005aa0:	4473      	add	r3, lr
 8005aa2:	469e      	mov	lr, r3
 8005aa4:	460d      	mov	r5, r1
 8005aa6:	4565      	cmp	r5, ip
 8005aa8:	d30e      	bcc.n	8005ac8 <__mdiff+0xe8>
 8005aaa:	f10c 0203 	add.w	r2, ip, #3
 8005aae:	1a52      	subs	r2, r2, r1
 8005ab0:	f022 0203 	bic.w	r2, r2, #3
 8005ab4:	3903      	subs	r1, #3
 8005ab6:	458c      	cmp	ip, r1
 8005ab8:	bf38      	it	cc
 8005aba:	2200      	movcc	r2, #0
 8005abc:	441a      	add	r2, r3
 8005abe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005ac2:	b17b      	cbz	r3, 8005ae4 <__mdiff+0x104>
 8005ac4:	6106      	str	r6, [r0, #16]
 8005ac6:	e7a5      	b.n	8005a14 <__mdiff+0x34>
 8005ac8:	f855 8b04 	ldr.w	r8, [r5], #4
 8005acc:	fa17 f488 	uxtah	r4, r7, r8
 8005ad0:	1422      	asrs	r2, r4, #16
 8005ad2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005ad6:	b2a4      	uxth	r4, r4
 8005ad8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005adc:	f84e 4b04 	str.w	r4, [lr], #4
 8005ae0:	1417      	asrs	r7, r2, #16
 8005ae2:	e7e0      	b.n	8005aa6 <__mdiff+0xc6>
 8005ae4:	3e01      	subs	r6, #1
 8005ae6:	e7ea      	b.n	8005abe <__mdiff+0xde>
 8005ae8:	080068ff 	.word	0x080068ff
 8005aec:	0800691a 	.word	0x0800691a

08005af0 <__d2b>:
 8005af0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005af4:	4689      	mov	r9, r1
 8005af6:	2101      	movs	r1, #1
 8005af8:	ec57 6b10 	vmov	r6, r7, d0
 8005afc:	4690      	mov	r8, r2
 8005afe:	f7ff fcd5 	bl	80054ac <_Balloc>
 8005b02:	4604      	mov	r4, r0
 8005b04:	b930      	cbnz	r0, 8005b14 <__d2b+0x24>
 8005b06:	4602      	mov	r2, r0
 8005b08:	4b25      	ldr	r3, [pc, #148]	; (8005ba0 <__d2b+0xb0>)
 8005b0a:	4826      	ldr	r0, [pc, #152]	; (8005ba4 <__d2b+0xb4>)
 8005b0c:	f240 310a 	movw	r1, #778	; 0x30a
 8005b10:	f7fe fdf6 	bl	8004700 <__assert_func>
 8005b14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005b18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005b1c:	bb35      	cbnz	r5, 8005b6c <__d2b+0x7c>
 8005b1e:	2e00      	cmp	r6, #0
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	d028      	beq.n	8005b76 <__d2b+0x86>
 8005b24:	4668      	mov	r0, sp
 8005b26:	9600      	str	r6, [sp, #0]
 8005b28:	f7ff fd8c 	bl	8005644 <__lo0bits>
 8005b2c:	9900      	ldr	r1, [sp, #0]
 8005b2e:	b300      	cbz	r0, 8005b72 <__d2b+0x82>
 8005b30:	9a01      	ldr	r2, [sp, #4]
 8005b32:	f1c0 0320 	rsb	r3, r0, #32
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	40c2      	lsrs	r2, r0
 8005b3e:	6163      	str	r3, [r4, #20]
 8005b40:	9201      	str	r2, [sp, #4]
 8005b42:	9b01      	ldr	r3, [sp, #4]
 8005b44:	61a3      	str	r3, [r4, #24]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bf14      	ite	ne
 8005b4a:	2202      	movne	r2, #2
 8005b4c:	2201      	moveq	r2, #1
 8005b4e:	6122      	str	r2, [r4, #16]
 8005b50:	b1d5      	cbz	r5, 8005b88 <__d2b+0x98>
 8005b52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005b56:	4405      	add	r5, r0
 8005b58:	f8c9 5000 	str.w	r5, [r9]
 8005b5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005b60:	f8c8 0000 	str.w	r0, [r8]
 8005b64:	4620      	mov	r0, r4
 8005b66:	b003      	add	sp, #12
 8005b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b70:	e7d5      	b.n	8005b1e <__d2b+0x2e>
 8005b72:	6161      	str	r1, [r4, #20]
 8005b74:	e7e5      	b.n	8005b42 <__d2b+0x52>
 8005b76:	a801      	add	r0, sp, #4
 8005b78:	f7ff fd64 	bl	8005644 <__lo0bits>
 8005b7c:	9b01      	ldr	r3, [sp, #4]
 8005b7e:	6163      	str	r3, [r4, #20]
 8005b80:	2201      	movs	r2, #1
 8005b82:	6122      	str	r2, [r4, #16]
 8005b84:	3020      	adds	r0, #32
 8005b86:	e7e3      	b.n	8005b50 <__d2b+0x60>
 8005b88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b90:	f8c9 0000 	str.w	r0, [r9]
 8005b94:	6918      	ldr	r0, [r3, #16]
 8005b96:	f7ff fd35 	bl	8005604 <__hi0bits>
 8005b9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b9e:	e7df      	b.n	8005b60 <__d2b+0x70>
 8005ba0:	080068ff 	.word	0x080068ff
 8005ba4:	0800691a 	.word	0x0800691a

08005ba8 <_calloc_r>:
 8005ba8:	b513      	push	{r0, r1, r4, lr}
 8005baa:	434a      	muls	r2, r1
 8005bac:	4611      	mov	r1, r2
 8005bae:	9201      	str	r2, [sp, #4]
 8005bb0:	f000 f85a 	bl	8005c68 <_malloc_r>
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	b118      	cbz	r0, 8005bc0 <_calloc_r+0x18>
 8005bb8:	9a01      	ldr	r2, [sp, #4]
 8005bba:	2100      	movs	r1, #0
 8005bbc:	f7fe f92e 	bl	8003e1c <memset>
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	b002      	add	sp, #8
 8005bc4:	bd10      	pop	{r4, pc}
	...

08005bc8 <_free_r>:
 8005bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bca:	2900      	cmp	r1, #0
 8005bcc:	d048      	beq.n	8005c60 <_free_r+0x98>
 8005bce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bd2:	9001      	str	r0, [sp, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f1a1 0404 	sub.w	r4, r1, #4
 8005bda:	bfb8      	it	lt
 8005bdc:	18e4      	addlt	r4, r4, r3
 8005bde:	f000 fcfb 	bl	80065d8 <__malloc_lock>
 8005be2:	4a20      	ldr	r2, [pc, #128]	; (8005c64 <_free_r+0x9c>)
 8005be4:	9801      	ldr	r0, [sp, #4]
 8005be6:	6813      	ldr	r3, [r2, #0]
 8005be8:	4615      	mov	r5, r2
 8005bea:	b933      	cbnz	r3, 8005bfa <_free_r+0x32>
 8005bec:	6063      	str	r3, [r4, #4]
 8005bee:	6014      	str	r4, [r2, #0]
 8005bf0:	b003      	add	sp, #12
 8005bf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bf6:	f000 bcf5 	b.w	80065e4 <__malloc_unlock>
 8005bfa:	42a3      	cmp	r3, r4
 8005bfc:	d90b      	bls.n	8005c16 <_free_r+0x4e>
 8005bfe:	6821      	ldr	r1, [r4, #0]
 8005c00:	1862      	adds	r2, r4, r1
 8005c02:	4293      	cmp	r3, r2
 8005c04:	bf04      	itt	eq
 8005c06:	681a      	ldreq	r2, [r3, #0]
 8005c08:	685b      	ldreq	r3, [r3, #4]
 8005c0a:	6063      	str	r3, [r4, #4]
 8005c0c:	bf04      	itt	eq
 8005c0e:	1852      	addeq	r2, r2, r1
 8005c10:	6022      	streq	r2, [r4, #0]
 8005c12:	602c      	str	r4, [r5, #0]
 8005c14:	e7ec      	b.n	8005bf0 <_free_r+0x28>
 8005c16:	461a      	mov	r2, r3
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	b10b      	cbz	r3, 8005c20 <_free_r+0x58>
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	d9fa      	bls.n	8005c16 <_free_r+0x4e>
 8005c20:	6811      	ldr	r1, [r2, #0]
 8005c22:	1855      	adds	r5, r2, r1
 8005c24:	42a5      	cmp	r5, r4
 8005c26:	d10b      	bne.n	8005c40 <_free_r+0x78>
 8005c28:	6824      	ldr	r4, [r4, #0]
 8005c2a:	4421      	add	r1, r4
 8005c2c:	1854      	adds	r4, r2, r1
 8005c2e:	42a3      	cmp	r3, r4
 8005c30:	6011      	str	r1, [r2, #0]
 8005c32:	d1dd      	bne.n	8005bf0 <_free_r+0x28>
 8005c34:	681c      	ldr	r4, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	6053      	str	r3, [r2, #4]
 8005c3a:	4421      	add	r1, r4
 8005c3c:	6011      	str	r1, [r2, #0]
 8005c3e:	e7d7      	b.n	8005bf0 <_free_r+0x28>
 8005c40:	d902      	bls.n	8005c48 <_free_r+0x80>
 8005c42:	230c      	movs	r3, #12
 8005c44:	6003      	str	r3, [r0, #0]
 8005c46:	e7d3      	b.n	8005bf0 <_free_r+0x28>
 8005c48:	6825      	ldr	r5, [r4, #0]
 8005c4a:	1961      	adds	r1, r4, r5
 8005c4c:	428b      	cmp	r3, r1
 8005c4e:	bf04      	itt	eq
 8005c50:	6819      	ldreq	r1, [r3, #0]
 8005c52:	685b      	ldreq	r3, [r3, #4]
 8005c54:	6063      	str	r3, [r4, #4]
 8005c56:	bf04      	itt	eq
 8005c58:	1949      	addeq	r1, r1, r5
 8005c5a:	6021      	streq	r1, [r4, #0]
 8005c5c:	6054      	str	r4, [r2, #4]
 8005c5e:	e7c7      	b.n	8005bf0 <_free_r+0x28>
 8005c60:	b003      	add	sp, #12
 8005c62:	bd30      	pop	{r4, r5, pc}
 8005c64:	200001fc 	.word	0x200001fc

08005c68 <_malloc_r>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	1ccd      	adds	r5, r1, #3
 8005c6c:	f025 0503 	bic.w	r5, r5, #3
 8005c70:	3508      	adds	r5, #8
 8005c72:	2d0c      	cmp	r5, #12
 8005c74:	bf38      	it	cc
 8005c76:	250c      	movcc	r5, #12
 8005c78:	2d00      	cmp	r5, #0
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	db01      	blt.n	8005c82 <_malloc_r+0x1a>
 8005c7e:	42a9      	cmp	r1, r5
 8005c80:	d903      	bls.n	8005c8a <_malloc_r+0x22>
 8005c82:	230c      	movs	r3, #12
 8005c84:	6033      	str	r3, [r6, #0]
 8005c86:	2000      	movs	r0, #0
 8005c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c8a:	f000 fca5 	bl	80065d8 <__malloc_lock>
 8005c8e:	4921      	ldr	r1, [pc, #132]	; (8005d14 <_malloc_r+0xac>)
 8005c90:	680a      	ldr	r2, [r1, #0]
 8005c92:	4614      	mov	r4, r2
 8005c94:	b99c      	cbnz	r4, 8005cbe <_malloc_r+0x56>
 8005c96:	4f20      	ldr	r7, [pc, #128]	; (8005d18 <_malloc_r+0xb0>)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	b923      	cbnz	r3, 8005ca6 <_malloc_r+0x3e>
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	f000 f996 	bl	8005fd0 <_sbrk_r>
 8005ca4:	6038      	str	r0, [r7, #0]
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f000 f991 	bl	8005fd0 <_sbrk_r>
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	d123      	bne.n	8005cfa <_malloc_r+0x92>
 8005cb2:	230c      	movs	r3, #12
 8005cb4:	6033      	str	r3, [r6, #0]
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f000 fc94 	bl	80065e4 <__malloc_unlock>
 8005cbc:	e7e3      	b.n	8005c86 <_malloc_r+0x1e>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	1b5b      	subs	r3, r3, r5
 8005cc2:	d417      	bmi.n	8005cf4 <_malloc_r+0x8c>
 8005cc4:	2b0b      	cmp	r3, #11
 8005cc6:	d903      	bls.n	8005cd0 <_malloc_r+0x68>
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	441c      	add	r4, r3
 8005ccc:	6025      	str	r5, [r4, #0]
 8005cce:	e004      	b.n	8005cda <_malloc_r+0x72>
 8005cd0:	6863      	ldr	r3, [r4, #4]
 8005cd2:	42a2      	cmp	r2, r4
 8005cd4:	bf0c      	ite	eq
 8005cd6:	600b      	streq	r3, [r1, #0]
 8005cd8:	6053      	strne	r3, [r2, #4]
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f000 fc82 	bl	80065e4 <__malloc_unlock>
 8005ce0:	f104 000b 	add.w	r0, r4, #11
 8005ce4:	1d23      	adds	r3, r4, #4
 8005ce6:	f020 0007 	bic.w	r0, r0, #7
 8005cea:	1ac2      	subs	r2, r0, r3
 8005cec:	d0cc      	beq.n	8005c88 <_malloc_r+0x20>
 8005cee:	1a1b      	subs	r3, r3, r0
 8005cf0:	50a3      	str	r3, [r4, r2]
 8005cf2:	e7c9      	b.n	8005c88 <_malloc_r+0x20>
 8005cf4:	4622      	mov	r2, r4
 8005cf6:	6864      	ldr	r4, [r4, #4]
 8005cf8:	e7cc      	b.n	8005c94 <_malloc_r+0x2c>
 8005cfa:	1cc4      	adds	r4, r0, #3
 8005cfc:	f024 0403 	bic.w	r4, r4, #3
 8005d00:	42a0      	cmp	r0, r4
 8005d02:	d0e3      	beq.n	8005ccc <_malloc_r+0x64>
 8005d04:	1a21      	subs	r1, r4, r0
 8005d06:	4630      	mov	r0, r6
 8005d08:	f000 f962 	bl	8005fd0 <_sbrk_r>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d1dd      	bne.n	8005ccc <_malloc_r+0x64>
 8005d10:	e7cf      	b.n	8005cb2 <_malloc_r+0x4a>
 8005d12:	bf00      	nop
 8005d14:	200001fc 	.word	0x200001fc
 8005d18:	20000200 	.word	0x20000200

08005d1c <__sfputc_r>:
 8005d1c:	6893      	ldr	r3, [r2, #8]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	b410      	push	{r4}
 8005d24:	6093      	str	r3, [r2, #8]
 8005d26:	da08      	bge.n	8005d3a <__sfputc_r+0x1e>
 8005d28:	6994      	ldr	r4, [r2, #24]
 8005d2a:	42a3      	cmp	r3, r4
 8005d2c:	db01      	blt.n	8005d32 <__sfputc_r+0x16>
 8005d2e:	290a      	cmp	r1, #10
 8005d30:	d103      	bne.n	8005d3a <__sfputc_r+0x1e>
 8005d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d36:	f000 b95b 	b.w	8005ff0 <__swbuf_r>
 8005d3a:	6813      	ldr	r3, [r2, #0]
 8005d3c:	1c58      	adds	r0, r3, #1
 8005d3e:	6010      	str	r0, [r2, #0]
 8005d40:	7019      	strb	r1, [r3, #0]
 8005d42:	4608      	mov	r0, r1
 8005d44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <__sfputs_r>:
 8005d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4c:	4606      	mov	r6, r0
 8005d4e:	460f      	mov	r7, r1
 8005d50:	4614      	mov	r4, r2
 8005d52:	18d5      	adds	r5, r2, r3
 8005d54:	42ac      	cmp	r4, r5
 8005d56:	d101      	bne.n	8005d5c <__sfputs_r+0x12>
 8005d58:	2000      	movs	r0, #0
 8005d5a:	e007      	b.n	8005d6c <__sfputs_r+0x22>
 8005d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d60:	463a      	mov	r2, r7
 8005d62:	4630      	mov	r0, r6
 8005d64:	f7ff ffda 	bl	8005d1c <__sfputc_r>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d1f3      	bne.n	8005d54 <__sfputs_r+0xa>
 8005d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d70 <_vfiprintf_r>:
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	460d      	mov	r5, r1
 8005d76:	b09d      	sub	sp, #116	; 0x74
 8005d78:	4614      	mov	r4, r2
 8005d7a:	4698      	mov	r8, r3
 8005d7c:	4606      	mov	r6, r0
 8005d7e:	b118      	cbz	r0, 8005d88 <_vfiprintf_r+0x18>
 8005d80:	6983      	ldr	r3, [r0, #24]
 8005d82:	b90b      	cbnz	r3, 8005d88 <_vfiprintf_r+0x18>
 8005d84:	f000 fb24 	bl	80063d0 <__sinit>
 8005d88:	4b89      	ldr	r3, [pc, #548]	; (8005fb0 <_vfiprintf_r+0x240>)
 8005d8a:	429d      	cmp	r5, r3
 8005d8c:	d11b      	bne.n	8005dc6 <_vfiprintf_r+0x56>
 8005d8e:	6875      	ldr	r5, [r6, #4]
 8005d90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d92:	07d9      	lsls	r1, r3, #31
 8005d94:	d405      	bmi.n	8005da2 <_vfiprintf_r+0x32>
 8005d96:	89ab      	ldrh	r3, [r5, #12]
 8005d98:	059a      	lsls	r2, r3, #22
 8005d9a:	d402      	bmi.n	8005da2 <_vfiprintf_r+0x32>
 8005d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d9e:	f000 fbb5 	bl	800650c <__retarget_lock_acquire_recursive>
 8005da2:	89ab      	ldrh	r3, [r5, #12]
 8005da4:	071b      	lsls	r3, r3, #28
 8005da6:	d501      	bpl.n	8005dac <_vfiprintf_r+0x3c>
 8005da8:	692b      	ldr	r3, [r5, #16]
 8005daa:	b9eb      	cbnz	r3, 8005de8 <_vfiprintf_r+0x78>
 8005dac:	4629      	mov	r1, r5
 8005dae:	4630      	mov	r0, r6
 8005db0:	f000 f97e 	bl	80060b0 <__swsetup_r>
 8005db4:	b1c0      	cbz	r0, 8005de8 <_vfiprintf_r+0x78>
 8005db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005db8:	07dc      	lsls	r4, r3, #31
 8005dba:	d50e      	bpl.n	8005dda <_vfiprintf_r+0x6a>
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dc0:	b01d      	add	sp, #116	; 0x74
 8005dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc6:	4b7b      	ldr	r3, [pc, #492]	; (8005fb4 <_vfiprintf_r+0x244>)
 8005dc8:	429d      	cmp	r5, r3
 8005dca:	d101      	bne.n	8005dd0 <_vfiprintf_r+0x60>
 8005dcc:	68b5      	ldr	r5, [r6, #8]
 8005dce:	e7df      	b.n	8005d90 <_vfiprintf_r+0x20>
 8005dd0:	4b79      	ldr	r3, [pc, #484]	; (8005fb8 <_vfiprintf_r+0x248>)
 8005dd2:	429d      	cmp	r5, r3
 8005dd4:	bf08      	it	eq
 8005dd6:	68f5      	ldreq	r5, [r6, #12]
 8005dd8:	e7da      	b.n	8005d90 <_vfiprintf_r+0x20>
 8005dda:	89ab      	ldrh	r3, [r5, #12]
 8005ddc:	0598      	lsls	r0, r3, #22
 8005dde:	d4ed      	bmi.n	8005dbc <_vfiprintf_r+0x4c>
 8005de0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005de2:	f000 fb94 	bl	800650e <__retarget_lock_release_recursive>
 8005de6:	e7e9      	b.n	8005dbc <_vfiprintf_r+0x4c>
 8005de8:	2300      	movs	r3, #0
 8005dea:	9309      	str	r3, [sp, #36]	; 0x24
 8005dec:	2320      	movs	r3, #32
 8005dee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005df2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005df6:	2330      	movs	r3, #48	; 0x30
 8005df8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005fbc <_vfiprintf_r+0x24c>
 8005dfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e00:	f04f 0901 	mov.w	r9, #1
 8005e04:	4623      	mov	r3, r4
 8005e06:	469a      	mov	sl, r3
 8005e08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e0c:	b10a      	cbz	r2, 8005e12 <_vfiprintf_r+0xa2>
 8005e0e:	2a25      	cmp	r2, #37	; 0x25
 8005e10:	d1f9      	bne.n	8005e06 <_vfiprintf_r+0x96>
 8005e12:	ebba 0b04 	subs.w	fp, sl, r4
 8005e16:	d00b      	beq.n	8005e30 <_vfiprintf_r+0xc0>
 8005e18:	465b      	mov	r3, fp
 8005e1a:	4622      	mov	r2, r4
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f7ff ff93 	bl	8005d4a <__sfputs_r>
 8005e24:	3001      	adds	r0, #1
 8005e26:	f000 80aa 	beq.w	8005f7e <_vfiprintf_r+0x20e>
 8005e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e2c:	445a      	add	r2, fp
 8005e2e:	9209      	str	r2, [sp, #36]	; 0x24
 8005e30:	f89a 3000 	ldrb.w	r3, [sl]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 80a2 	beq.w	8005f7e <_vfiprintf_r+0x20e>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e44:	f10a 0a01 	add.w	sl, sl, #1
 8005e48:	9304      	str	r3, [sp, #16]
 8005e4a:	9307      	str	r3, [sp, #28]
 8005e4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e50:	931a      	str	r3, [sp, #104]	; 0x68
 8005e52:	4654      	mov	r4, sl
 8005e54:	2205      	movs	r2, #5
 8005e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e5a:	4858      	ldr	r0, [pc, #352]	; (8005fbc <_vfiprintf_r+0x24c>)
 8005e5c:	f7fa f9c8 	bl	80001f0 <memchr>
 8005e60:	9a04      	ldr	r2, [sp, #16]
 8005e62:	b9d8      	cbnz	r0, 8005e9c <_vfiprintf_r+0x12c>
 8005e64:	06d1      	lsls	r1, r2, #27
 8005e66:	bf44      	itt	mi
 8005e68:	2320      	movmi	r3, #32
 8005e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e6e:	0713      	lsls	r3, r2, #28
 8005e70:	bf44      	itt	mi
 8005e72:	232b      	movmi	r3, #43	; 0x2b
 8005e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e78:	f89a 3000 	ldrb.w	r3, [sl]
 8005e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e7e:	d015      	beq.n	8005eac <_vfiprintf_r+0x13c>
 8005e80:	9a07      	ldr	r2, [sp, #28]
 8005e82:	4654      	mov	r4, sl
 8005e84:	2000      	movs	r0, #0
 8005e86:	f04f 0c0a 	mov.w	ip, #10
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e90:	3b30      	subs	r3, #48	; 0x30
 8005e92:	2b09      	cmp	r3, #9
 8005e94:	d94e      	bls.n	8005f34 <_vfiprintf_r+0x1c4>
 8005e96:	b1b0      	cbz	r0, 8005ec6 <_vfiprintf_r+0x156>
 8005e98:	9207      	str	r2, [sp, #28]
 8005e9a:	e014      	b.n	8005ec6 <_vfiprintf_r+0x156>
 8005e9c:	eba0 0308 	sub.w	r3, r0, r8
 8005ea0:	fa09 f303 	lsl.w	r3, r9, r3
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	9304      	str	r3, [sp, #16]
 8005ea8:	46a2      	mov	sl, r4
 8005eaa:	e7d2      	b.n	8005e52 <_vfiprintf_r+0xe2>
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	1d19      	adds	r1, r3, #4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	9103      	str	r1, [sp, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bfbb      	ittet	lt
 8005eb8:	425b      	neglt	r3, r3
 8005eba:	f042 0202 	orrlt.w	r2, r2, #2
 8005ebe:	9307      	strge	r3, [sp, #28]
 8005ec0:	9307      	strlt	r3, [sp, #28]
 8005ec2:	bfb8      	it	lt
 8005ec4:	9204      	strlt	r2, [sp, #16]
 8005ec6:	7823      	ldrb	r3, [r4, #0]
 8005ec8:	2b2e      	cmp	r3, #46	; 0x2e
 8005eca:	d10c      	bne.n	8005ee6 <_vfiprintf_r+0x176>
 8005ecc:	7863      	ldrb	r3, [r4, #1]
 8005ece:	2b2a      	cmp	r3, #42	; 0x2a
 8005ed0:	d135      	bne.n	8005f3e <_vfiprintf_r+0x1ce>
 8005ed2:	9b03      	ldr	r3, [sp, #12]
 8005ed4:	1d1a      	adds	r2, r3, #4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	9203      	str	r2, [sp, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	bfb8      	it	lt
 8005ede:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ee2:	3402      	adds	r4, #2
 8005ee4:	9305      	str	r3, [sp, #20]
 8005ee6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005fcc <_vfiprintf_r+0x25c>
 8005eea:	7821      	ldrb	r1, [r4, #0]
 8005eec:	2203      	movs	r2, #3
 8005eee:	4650      	mov	r0, sl
 8005ef0:	f7fa f97e 	bl	80001f0 <memchr>
 8005ef4:	b140      	cbz	r0, 8005f08 <_vfiprintf_r+0x198>
 8005ef6:	2340      	movs	r3, #64	; 0x40
 8005ef8:	eba0 000a 	sub.w	r0, r0, sl
 8005efc:	fa03 f000 	lsl.w	r0, r3, r0
 8005f00:	9b04      	ldr	r3, [sp, #16]
 8005f02:	4303      	orrs	r3, r0
 8005f04:	3401      	adds	r4, #1
 8005f06:	9304      	str	r3, [sp, #16]
 8005f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f0c:	482c      	ldr	r0, [pc, #176]	; (8005fc0 <_vfiprintf_r+0x250>)
 8005f0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f12:	2206      	movs	r2, #6
 8005f14:	f7fa f96c 	bl	80001f0 <memchr>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d03f      	beq.n	8005f9c <_vfiprintf_r+0x22c>
 8005f1c:	4b29      	ldr	r3, [pc, #164]	; (8005fc4 <_vfiprintf_r+0x254>)
 8005f1e:	bb1b      	cbnz	r3, 8005f68 <_vfiprintf_r+0x1f8>
 8005f20:	9b03      	ldr	r3, [sp, #12]
 8005f22:	3307      	adds	r3, #7
 8005f24:	f023 0307 	bic.w	r3, r3, #7
 8005f28:	3308      	adds	r3, #8
 8005f2a:	9303      	str	r3, [sp, #12]
 8005f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f2e:	443b      	add	r3, r7
 8005f30:	9309      	str	r3, [sp, #36]	; 0x24
 8005f32:	e767      	b.n	8005e04 <_vfiprintf_r+0x94>
 8005f34:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f38:	460c      	mov	r4, r1
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	e7a5      	b.n	8005e8a <_vfiprintf_r+0x11a>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	3401      	adds	r4, #1
 8005f42:	9305      	str	r3, [sp, #20]
 8005f44:	4619      	mov	r1, r3
 8005f46:	f04f 0c0a 	mov.w	ip, #10
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f50:	3a30      	subs	r2, #48	; 0x30
 8005f52:	2a09      	cmp	r2, #9
 8005f54:	d903      	bls.n	8005f5e <_vfiprintf_r+0x1ee>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0c5      	beq.n	8005ee6 <_vfiprintf_r+0x176>
 8005f5a:	9105      	str	r1, [sp, #20]
 8005f5c:	e7c3      	b.n	8005ee6 <_vfiprintf_r+0x176>
 8005f5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f62:	4604      	mov	r4, r0
 8005f64:	2301      	movs	r3, #1
 8005f66:	e7f0      	b.n	8005f4a <_vfiprintf_r+0x1da>
 8005f68:	ab03      	add	r3, sp, #12
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	462a      	mov	r2, r5
 8005f6e:	4b16      	ldr	r3, [pc, #88]	; (8005fc8 <_vfiprintf_r+0x258>)
 8005f70:	a904      	add	r1, sp, #16
 8005f72:	4630      	mov	r0, r6
 8005f74:	f7fd fffa 	bl	8003f6c <_printf_float>
 8005f78:	4607      	mov	r7, r0
 8005f7a:	1c78      	adds	r0, r7, #1
 8005f7c:	d1d6      	bne.n	8005f2c <_vfiprintf_r+0x1bc>
 8005f7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f80:	07d9      	lsls	r1, r3, #31
 8005f82:	d405      	bmi.n	8005f90 <_vfiprintf_r+0x220>
 8005f84:	89ab      	ldrh	r3, [r5, #12]
 8005f86:	059a      	lsls	r2, r3, #22
 8005f88:	d402      	bmi.n	8005f90 <_vfiprintf_r+0x220>
 8005f8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f8c:	f000 fabf 	bl	800650e <__retarget_lock_release_recursive>
 8005f90:	89ab      	ldrh	r3, [r5, #12]
 8005f92:	065b      	lsls	r3, r3, #25
 8005f94:	f53f af12 	bmi.w	8005dbc <_vfiprintf_r+0x4c>
 8005f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f9a:	e711      	b.n	8005dc0 <_vfiprintf_r+0x50>
 8005f9c:	ab03      	add	r3, sp, #12
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	462a      	mov	r2, r5
 8005fa2:	4b09      	ldr	r3, [pc, #36]	; (8005fc8 <_vfiprintf_r+0x258>)
 8005fa4:	a904      	add	r1, sp, #16
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f7fe fa84 	bl	80044b4 <_printf_i>
 8005fac:	e7e4      	b.n	8005f78 <_vfiprintf_r+0x208>
 8005fae:	bf00      	nop
 8005fb0:	08006bb0 	.word	0x08006bb0
 8005fb4:	08006bd0 	.word	0x08006bd0
 8005fb8:	08006b90 	.word	0x08006b90
 8005fbc:	08006a7c 	.word	0x08006a7c
 8005fc0:	08006a86 	.word	0x08006a86
 8005fc4:	08003f6d 	.word	0x08003f6d
 8005fc8:	08005d4b 	.word	0x08005d4b
 8005fcc:	08006a82 	.word	0x08006a82

08005fd0 <_sbrk_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4d06      	ldr	r5, [pc, #24]	; (8005fec <_sbrk_r+0x1c>)
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4608      	mov	r0, r1
 8005fda:	602b      	str	r3, [r5, #0]
 8005fdc:	f7fb f9c2 	bl	8001364 <_sbrk>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_sbrk_r+0x1a>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_sbrk_r+0x1a>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	20000360 	.word	0x20000360

08005ff0 <__swbuf_r>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	460e      	mov	r6, r1
 8005ff4:	4614      	mov	r4, r2
 8005ff6:	4605      	mov	r5, r0
 8005ff8:	b118      	cbz	r0, 8006002 <__swbuf_r+0x12>
 8005ffa:	6983      	ldr	r3, [r0, #24]
 8005ffc:	b90b      	cbnz	r3, 8006002 <__swbuf_r+0x12>
 8005ffe:	f000 f9e7 	bl	80063d0 <__sinit>
 8006002:	4b21      	ldr	r3, [pc, #132]	; (8006088 <__swbuf_r+0x98>)
 8006004:	429c      	cmp	r4, r3
 8006006:	d12b      	bne.n	8006060 <__swbuf_r+0x70>
 8006008:	686c      	ldr	r4, [r5, #4]
 800600a:	69a3      	ldr	r3, [r4, #24]
 800600c:	60a3      	str	r3, [r4, #8]
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	071a      	lsls	r2, r3, #28
 8006012:	d52f      	bpl.n	8006074 <__swbuf_r+0x84>
 8006014:	6923      	ldr	r3, [r4, #16]
 8006016:	b36b      	cbz	r3, 8006074 <__swbuf_r+0x84>
 8006018:	6923      	ldr	r3, [r4, #16]
 800601a:	6820      	ldr	r0, [r4, #0]
 800601c:	1ac0      	subs	r0, r0, r3
 800601e:	6963      	ldr	r3, [r4, #20]
 8006020:	b2f6      	uxtb	r6, r6
 8006022:	4283      	cmp	r3, r0
 8006024:	4637      	mov	r7, r6
 8006026:	dc04      	bgt.n	8006032 <__swbuf_r+0x42>
 8006028:	4621      	mov	r1, r4
 800602a:	4628      	mov	r0, r5
 800602c:	f000 f93c 	bl	80062a8 <_fflush_r>
 8006030:	bb30      	cbnz	r0, 8006080 <__swbuf_r+0x90>
 8006032:	68a3      	ldr	r3, [r4, #8]
 8006034:	3b01      	subs	r3, #1
 8006036:	60a3      	str	r3, [r4, #8]
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	6022      	str	r2, [r4, #0]
 800603e:	701e      	strb	r6, [r3, #0]
 8006040:	6963      	ldr	r3, [r4, #20]
 8006042:	3001      	adds	r0, #1
 8006044:	4283      	cmp	r3, r0
 8006046:	d004      	beq.n	8006052 <__swbuf_r+0x62>
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	07db      	lsls	r3, r3, #31
 800604c:	d506      	bpl.n	800605c <__swbuf_r+0x6c>
 800604e:	2e0a      	cmp	r6, #10
 8006050:	d104      	bne.n	800605c <__swbuf_r+0x6c>
 8006052:	4621      	mov	r1, r4
 8006054:	4628      	mov	r0, r5
 8006056:	f000 f927 	bl	80062a8 <_fflush_r>
 800605a:	b988      	cbnz	r0, 8006080 <__swbuf_r+0x90>
 800605c:	4638      	mov	r0, r7
 800605e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006060:	4b0a      	ldr	r3, [pc, #40]	; (800608c <__swbuf_r+0x9c>)
 8006062:	429c      	cmp	r4, r3
 8006064:	d101      	bne.n	800606a <__swbuf_r+0x7a>
 8006066:	68ac      	ldr	r4, [r5, #8]
 8006068:	e7cf      	b.n	800600a <__swbuf_r+0x1a>
 800606a:	4b09      	ldr	r3, [pc, #36]	; (8006090 <__swbuf_r+0xa0>)
 800606c:	429c      	cmp	r4, r3
 800606e:	bf08      	it	eq
 8006070:	68ec      	ldreq	r4, [r5, #12]
 8006072:	e7ca      	b.n	800600a <__swbuf_r+0x1a>
 8006074:	4621      	mov	r1, r4
 8006076:	4628      	mov	r0, r5
 8006078:	f000 f81a 	bl	80060b0 <__swsetup_r>
 800607c:	2800      	cmp	r0, #0
 800607e:	d0cb      	beq.n	8006018 <__swbuf_r+0x28>
 8006080:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006084:	e7ea      	b.n	800605c <__swbuf_r+0x6c>
 8006086:	bf00      	nop
 8006088:	08006bb0 	.word	0x08006bb0
 800608c:	08006bd0 	.word	0x08006bd0
 8006090:	08006b90 	.word	0x08006b90

08006094 <__ascii_wctomb>:
 8006094:	b149      	cbz	r1, 80060aa <__ascii_wctomb+0x16>
 8006096:	2aff      	cmp	r2, #255	; 0xff
 8006098:	bf85      	ittet	hi
 800609a:	238a      	movhi	r3, #138	; 0x8a
 800609c:	6003      	strhi	r3, [r0, #0]
 800609e:	700a      	strbls	r2, [r1, #0]
 80060a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80060a4:	bf98      	it	ls
 80060a6:	2001      	movls	r0, #1
 80060a8:	4770      	bx	lr
 80060aa:	4608      	mov	r0, r1
 80060ac:	4770      	bx	lr
	...

080060b0 <__swsetup_r>:
 80060b0:	4b32      	ldr	r3, [pc, #200]	; (800617c <__swsetup_r+0xcc>)
 80060b2:	b570      	push	{r4, r5, r6, lr}
 80060b4:	681d      	ldr	r5, [r3, #0]
 80060b6:	4606      	mov	r6, r0
 80060b8:	460c      	mov	r4, r1
 80060ba:	b125      	cbz	r5, 80060c6 <__swsetup_r+0x16>
 80060bc:	69ab      	ldr	r3, [r5, #24]
 80060be:	b913      	cbnz	r3, 80060c6 <__swsetup_r+0x16>
 80060c0:	4628      	mov	r0, r5
 80060c2:	f000 f985 	bl	80063d0 <__sinit>
 80060c6:	4b2e      	ldr	r3, [pc, #184]	; (8006180 <__swsetup_r+0xd0>)
 80060c8:	429c      	cmp	r4, r3
 80060ca:	d10f      	bne.n	80060ec <__swsetup_r+0x3c>
 80060cc:	686c      	ldr	r4, [r5, #4]
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060d4:	0719      	lsls	r1, r3, #28
 80060d6:	d42c      	bmi.n	8006132 <__swsetup_r+0x82>
 80060d8:	06dd      	lsls	r5, r3, #27
 80060da:	d411      	bmi.n	8006100 <__swsetup_r+0x50>
 80060dc:	2309      	movs	r3, #9
 80060de:	6033      	str	r3, [r6, #0]
 80060e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060e4:	81a3      	strh	r3, [r4, #12]
 80060e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060ea:	e03e      	b.n	800616a <__swsetup_r+0xba>
 80060ec:	4b25      	ldr	r3, [pc, #148]	; (8006184 <__swsetup_r+0xd4>)
 80060ee:	429c      	cmp	r4, r3
 80060f0:	d101      	bne.n	80060f6 <__swsetup_r+0x46>
 80060f2:	68ac      	ldr	r4, [r5, #8]
 80060f4:	e7eb      	b.n	80060ce <__swsetup_r+0x1e>
 80060f6:	4b24      	ldr	r3, [pc, #144]	; (8006188 <__swsetup_r+0xd8>)
 80060f8:	429c      	cmp	r4, r3
 80060fa:	bf08      	it	eq
 80060fc:	68ec      	ldreq	r4, [r5, #12]
 80060fe:	e7e6      	b.n	80060ce <__swsetup_r+0x1e>
 8006100:	0758      	lsls	r0, r3, #29
 8006102:	d512      	bpl.n	800612a <__swsetup_r+0x7a>
 8006104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006106:	b141      	cbz	r1, 800611a <__swsetup_r+0x6a>
 8006108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800610c:	4299      	cmp	r1, r3
 800610e:	d002      	beq.n	8006116 <__swsetup_r+0x66>
 8006110:	4630      	mov	r0, r6
 8006112:	f7ff fd59 	bl	8005bc8 <_free_r>
 8006116:	2300      	movs	r3, #0
 8006118:	6363      	str	r3, [r4, #52]	; 0x34
 800611a:	89a3      	ldrh	r3, [r4, #12]
 800611c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006120:	81a3      	strh	r3, [r4, #12]
 8006122:	2300      	movs	r3, #0
 8006124:	6063      	str	r3, [r4, #4]
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	f043 0308 	orr.w	r3, r3, #8
 8006130:	81a3      	strh	r3, [r4, #12]
 8006132:	6923      	ldr	r3, [r4, #16]
 8006134:	b94b      	cbnz	r3, 800614a <__swsetup_r+0x9a>
 8006136:	89a3      	ldrh	r3, [r4, #12]
 8006138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800613c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006140:	d003      	beq.n	800614a <__swsetup_r+0x9a>
 8006142:	4621      	mov	r1, r4
 8006144:	4630      	mov	r0, r6
 8006146:	f000 fa07 	bl	8006558 <__smakebuf_r>
 800614a:	89a0      	ldrh	r0, [r4, #12]
 800614c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006150:	f010 0301 	ands.w	r3, r0, #1
 8006154:	d00a      	beq.n	800616c <__swsetup_r+0xbc>
 8006156:	2300      	movs	r3, #0
 8006158:	60a3      	str	r3, [r4, #8]
 800615a:	6963      	ldr	r3, [r4, #20]
 800615c:	425b      	negs	r3, r3
 800615e:	61a3      	str	r3, [r4, #24]
 8006160:	6923      	ldr	r3, [r4, #16]
 8006162:	b943      	cbnz	r3, 8006176 <__swsetup_r+0xc6>
 8006164:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006168:	d1ba      	bne.n	80060e0 <__swsetup_r+0x30>
 800616a:	bd70      	pop	{r4, r5, r6, pc}
 800616c:	0781      	lsls	r1, r0, #30
 800616e:	bf58      	it	pl
 8006170:	6963      	ldrpl	r3, [r4, #20]
 8006172:	60a3      	str	r3, [r4, #8]
 8006174:	e7f4      	b.n	8006160 <__swsetup_r+0xb0>
 8006176:	2000      	movs	r0, #0
 8006178:	e7f7      	b.n	800616a <__swsetup_r+0xba>
 800617a:	bf00      	nop
 800617c:	2000000c 	.word	0x2000000c
 8006180:	08006bb0 	.word	0x08006bb0
 8006184:	08006bd0 	.word	0x08006bd0
 8006188:	08006b90 	.word	0x08006b90

0800618c <abort>:
 800618c:	b508      	push	{r3, lr}
 800618e:	2006      	movs	r0, #6
 8006190:	f000 fa56 	bl	8006640 <raise>
 8006194:	2001      	movs	r0, #1
 8006196:	f7fb f86d 	bl	8001274 <_exit>
	...

0800619c <__sflush_r>:
 800619c:	898a      	ldrh	r2, [r1, #12]
 800619e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a2:	4605      	mov	r5, r0
 80061a4:	0710      	lsls	r0, r2, #28
 80061a6:	460c      	mov	r4, r1
 80061a8:	d458      	bmi.n	800625c <__sflush_r+0xc0>
 80061aa:	684b      	ldr	r3, [r1, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	dc05      	bgt.n	80061bc <__sflush_r+0x20>
 80061b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	dc02      	bgt.n	80061bc <__sflush_r+0x20>
 80061b6:	2000      	movs	r0, #0
 80061b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061be:	2e00      	cmp	r6, #0
 80061c0:	d0f9      	beq.n	80061b6 <__sflush_r+0x1a>
 80061c2:	2300      	movs	r3, #0
 80061c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061c8:	682f      	ldr	r7, [r5, #0]
 80061ca:	602b      	str	r3, [r5, #0]
 80061cc:	d032      	beq.n	8006234 <__sflush_r+0x98>
 80061ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061d0:	89a3      	ldrh	r3, [r4, #12]
 80061d2:	075a      	lsls	r2, r3, #29
 80061d4:	d505      	bpl.n	80061e2 <__sflush_r+0x46>
 80061d6:	6863      	ldr	r3, [r4, #4]
 80061d8:	1ac0      	subs	r0, r0, r3
 80061da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061dc:	b10b      	cbz	r3, 80061e2 <__sflush_r+0x46>
 80061de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061e0:	1ac0      	subs	r0, r0, r3
 80061e2:	2300      	movs	r3, #0
 80061e4:	4602      	mov	r2, r0
 80061e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061e8:	6a21      	ldr	r1, [r4, #32]
 80061ea:	4628      	mov	r0, r5
 80061ec:	47b0      	blx	r6
 80061ee:	1c43      	adds	r3, r0, #1
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	d106      	bne.n	8006202 <__sflush_r+0x66>
 80061f4:	6829      	ldr	r1, [r5, #0]
 80061f6:	291d      	cmp	r1, #29
 80061f8:	d82c      	bhi.n	8006254 <__sflush_r+0xb8>
 80061fa:	4a2a      	ldr	r2, [pc, #168]	; (80062a4 <__sflush_r+0x108>)
 80061fc:	40ca      	lsrs	r2, r1
 80061fe:	07d6      	lsls	r6, r2, #31
 8006200:	d528      	bpl.n	8006254 <__sflush_r+0xb8>
 8006202:	2200      	movs	r2, #0
 8006204:	6062      	str	r2, [r4, #4]
 8006206:	04d9      	lsls	r1, r3, #19
 8006208:	6922      	ldr	r2, [r4, #16]
 800620a:	6022      	str	r2, [r4, #0]
 800620c:	d504      	bpl.n	8006218 <__sflush_r+0x7c>
 800620e:	1c42      	adds	r2, r0, #1
 8006210:	d101      	bne.n	8006216 <__sflush_r+0x7a>
 8006212:	682b      	ldr	r3, [r5, #0]
 8006214:	b903      	cbnz	r3, 8006218 <__sflush_r+0x7c>
 8006216:	6560      	str	r0, [r4, #84]	; 0x54
 8006218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800621a:	602f      	str	r7, [r5, #0]
 800621c:	2900      	cmp	r1, #0
 800621e:	d0ca      	beq.n	80061b6 <__sflush_r+0x1a>
 8006220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006224:	4299      	cmp	r1, r3
 8006226:	d002      	beq.n	800622e <__sflush_r+0x92>
 8006228:	4628      	mov	r0, r5
 800622a:	f7ff fccd 	bl	8005bc8 <_free_r>
 800622e:	2000      	movs	r0, #0
 8006230:	6360      	str	r0, [r4, #52]	; 0x34
 8006232:	e7c1      	b.n	80061b8 <__sflush_r+0x1c>
 8006234:	6a21      	ldr	r1, [r4, #32]
 8006236:	2301      	movs	r3, #1
 8006238:	4628      	mov	r0, r5
 800623a:	47b0      	blx	r6
 800623c:	1c41      	adds	r1, r0, #1
 800623e:	d1c7      	bne.n	80061d0 <__sflush_r+0x34>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0c4      	beq.n	80061d0 <__sflush_r+0x34>
 8006246:	2b1d      	cmp	r3, #29
 8006248:	d001      	beq.n	800624e <__sflush_r+0xb2>
 800624a:	2b16      	cmp	r3, #22
 800624c:	d101      	bne.n	8006252 <__sflush_r+0xb6>
 800624e:	602f      	str	r7, [r5, #0]
 8006250:	e7b1      	b.n	80061b6 <__sflush_r+0x1a>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006258:	81a3      	strh	r3, [r4, #12]
 800625a:	e7ad      	b.n	80061b8 <__sflush_r+0x1c>
 800625c:	690f      	ldr	r7, [r1, #16]
 800625e:	2f00      	cmp	r7, #0
 8006260:	d0a9      	beq.n	80061b6 <__sflush_r+0x1a>
 8006262:	0793      	lsls	r3, r2, #30
 8006264:	680e      	ldr	r6, [r1, #0]
 8006266:	bf08      	it	eq
 8006268:	694b      	ldreq	r3, [r1, #20]
 800626a:	600f      	str	r7, [r1, #0]
 800626c:	bf18      	it	ne
 800626e:	2300      	movne	r3, #0
 8006270:	eba6 0807 	sub.w	r8, r6, r7
 8006274:	608b      	str	r3, [r1, #8]
 8006276:	f1b8 0f00 	cmp.w	r8, #0
 800627a:	dd9c      	ble.n	80061b6 <__sflush_r+0x1a>
 800627c:	6a21      	ldr	r1, [r4, #32]
 800627e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006280:	4643      	mov	r3, r8
 8006282:	463a      	mov	r2, r7
 8006284:	4628      	mov	r0, r5
 8006286:	47b0      	blx	r6
 8006288:	2800      	cmp	r0, #0
 800628a:	dc06      	bgt.n	800629a <__sflush_r+0xfe>
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006292:	81a3      	strh	r3, [r4, #12]
 8006294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006298:	e78e      	b.n	80061b8 <__sflush_r+0x1c>
 800629a:	4407      	add	r7, r0
 800629c:	eba8 0800 	sub.w	r8, r8, r0
 80062a0:	e7e9      	b.n	8006276 <__sflush_r+0xda>
 80062a2:	bf00      	nop
 80062a4:	20400001 	.word	0x20400001

080062a8 <_fflush_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	690b      	ldr	r3, [r1, #16]
 80062ac:	4605      	mov	r5, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	b913      	cbnz	r3, 80062b8 <_fflush_r+0x10>
 80062b2:	2500      	movs	r5, #0
 80062b4:	4628      	mov	r0, r5
 80062b6:	bd38      	pop	{r3, r4, r5, pc}
 80062b8:	b118      	cbz	r0, 80062c2 <_fflush_r+0x1a>
 80062ba:	6983      	ldr	r3, [r0, #24]
 80062bc:	b90b      	cbnz	r3, 80062c2 <_fflush_r+0x1a>
 80062be:	f000 f887 	bl	80063d0 <__sinit>
 80062c2:	4b14      	ldr	r3, [pc, #80]	; (8006314 <_fflush_r+0x6c>)
 80062c4:	429c      	cmp	r4, r3
 80062c6:	d11b      	bne.n	8006300 <_fflush_r+0x58>
 80062c8:	686c      	ldr	r4, [r5, #4]
 80062ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0ef      	beq.n	80062b2 <_fflush_r+0xa>
 80062d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062d4:	07d0      	lsls	r0, r2, #31
 80062d6:	d404      	bmi.n	80062e2 <_fflush_r+0x3a>
 80062d8:	0599      	lsls	r1, r3, #22
 80062da:	d402      	bmi.n	80062e2 <_fflush_r+0x3a>
 80062dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062de:	f000 f915 	bl	800650c <__retarget_lock_acquire_recursive>
 80062e2:	4628      	mov	r0, r5
 80062e4:	4621      	mov	r1, r4
 80062e6:	f7ff ff59 	bl	800619c <__sflush_r>
 80062ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062ec:	07da      	lsls	r2, r3, #31
 80062ee:	4605      	mov	r5, r0
 80062f0:	d4e0      	bmi.n	80062b4 <_fflush_r+0xc>
 80062f2:	89a3      	ldrh	r3, [r4, #12]
 80062f4:	059b      	lsls	r3, r3, #22
 80062f6:	d4dd      	bmi.n	80062b4 <_fflush_r+0xc>
 80062f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062fa:	f000 f908 	bl	800650e <__retarget_lock_release_recursive>
 80062fe:	e7d9      	b.n	80062b4 <_fflush_r+0xc>
 8006300:	4b05      	ldr	r3, [pc, #20]	; (8006318 <_fflush_r+0x70>)
 8006302:	429c      	cmp	r4, r3
 8006304:	d101      	bne.n	800630a <_fflush_r+0x62>
 8006306:	68ac      	ldr	r4, [r5, #8]
 8006308:	e7df      	b.n	80062ca <_fflush_r+0x22>
 800630a:	4b04      	ldr	r3, [pc, #16]	; (800631c <_fflush_r+0x74>)
 800630c:	429c      	cmp	r4, r3
 800630e:	bf08      	it	eq
 8006310:	68ec      	ldreq	r4, [r5, #12]
 8006312:	e7da      	b.n	80062ca <_fflush_r+0x22>
 8006314:	08006bb0 	.word	0x08006bb0
 8006318:	08006bd0 	.word	0x08006bd0
 800631c:	08006b90 	.word	0x08006b90

08006320 <std>:
 8006320:	2300      	movs	r3, #0
 8006322:	b510      	push	{r4, lr}
 8006324:	4604      	mov	r4, r0
 8006326:	e9c0 3300 	strd	r3, r3, [r0]
 800632a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800632e:	6083      	str	r3, [r0, #8]
 8006330:	8181      	strh	r1, [r0, #12]
 8006332:	6643      	str	r3, [r0, #100]	; 0x64
 8006334:	81c2      	strh	r2, [r0, #14]
 8006336:	6183      	str	r3, [r0, #24]
 8006338:	4619      	mov	r1, r3
 800633a:	2208      	movs	r2, #8
 800633c:	305c      	adds	r0, #92	; 0x5c
 800633e:	f7fd fd6d 	bl	8003e1c <memset>
 8006342:	4b05      	ldr	r3, [pc, #20]	; (8006358 <std+0x38>)
 8006344:	6263      	str	r3, [r4, #36]	; 0x24
 8006346:	4b05      	ldr	r3, [pc, #20]	; (800635c <std+0x3c>)
 8006348:	62a3      	str	r3, [r4, #40]	; 0x28
 800634a:	4b05      	ldr	r3, [pc, #20]	; (8006360 <std+0x40>)
 800634c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800634e:	4b05      	ldr	r3, [pc, #20]	; (8006364 <std+0x44>)
 8006350:	6224      	str	r4, [r4, #32]
 8006352:	6323      	str	r3, [r4, #48]	; 0x30
 8006354:	bd10      	pop	{r4, pc}
 8006356:	bf00      	nop
 8006358:	08006679 	.word	0x08006679
 800635c:	0800669b 	.word	0x0800669b
 8006360:	080066d3 	.word	0x080066d3
 8006364:	080066f7 	.word	0x080066f7

08006368 <_cleanup_r>:
 8006368:	4901      	ldr	r1, [pc, #4]	; (8006370 <_cleanup_r+0x8>)
 800636a:	f000 b8af 	b.w	80064cc <_fwalk_reent>
 800636e:	bf00      	nop
 8006370:	080062a9 	.word	0x080062a9

08006374 <__sfmoreglue>:
 8006374:	b570      	push	{r4, r5, r6, lr}
 8006376:	1e4a      	subs	r2, r1, #1
 8006378:	2568      	movs	r5, #104	; 0x68
 800637a:	4355      	muls	r5, r2
 800637c:	460e      	mov	r6, r1
 800637e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006382:	f7ff fc71 	bl	8005c68 <_malloc_r>
 8006386:	4604      	mov	r4, r0
 8006388:	b140      	cbz	r0, 800639c <__sfmoreglue+0x28>
 800638a:	2100      	movs	r1, #0
 800638c:	e9c0 1600 	strd	r1, r6, [r0]
 8006390:	300c      	adds	r0, #12
 8006392:	60a0      	str	r0, [r4, #8]
 8006394:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006398:	f7fd fd40 	bl	8003e1c <memset>
 800639c:	4620      	mov	r0, r4
 800639e:	bd70      	pop	{r4, r5, r6, pc}

080063a0 <__sfp_lock_acquire>:
 80063a0:	4801      	ldr	r0, [pc, #4]	; (80063a8 <__sfp_lock_acquire+0x8>)
 80063a2:	f000 b8b3 	b.w	800650c <__retarget_lock_acquire_recursive>
 80063a6:	bf00      	nop
 80063a8:	2000035c 	.word	0x2000035c

080063ac <__sfp_lock_release>:
 80063ac:	4801      	ldr	r0, [pc, #4]	; (80063b4 <__sfp_lock_release+0x8>)
 80063ae:	f000 b8ae 	b.w	800650e <__retarget_lock_release_recursive>
 80063b2:	bf00      	nop
 80063b4:	2000035c 	.word	0x2000035c

080063b8 <__sinit_lock_acquire>:
 80063b8:	4801      	ldr	r0, [pc, #4]	; (80063c0 <__sinit_lock_acquire+0x8>)
 80063ba:	f000 b8a7 	b.w	800650c <__retarget_lock_acquire_recursive>
 80063be:	bf00      	nop
 80063c0:	20000357 	.word	0x20000357

080063c4 <__sinit_lock_release>:
 80063c4:	4801      	ldr	r0, [pc, #4]	; (80063cc <__sinit_lock_release+0x8>)
 80063c6:	f000 b8a2 	b.w	800650e <__retarget_lock_release_recursive>
 80063ca:	bf00      	nop
 80063cc:	20000357 	.word	0x20000357

080063d0 <__sinit>:
 80063d0:	b510      	push	{r4, lr}
 80063d2:	4604      	mov	r4, r0
 80063d4:	f7ff fff0 	bl	80063b8 <__sinit_lock_acquire>
 80063d8:	69a3      	ldr	r3, [r4, #24]
 80063da:	b11b      	cbz	r3, 80063e4 <__sinit+0x14>
 80063dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063e0:	f7ff bff0 	b.w	80063c4 <__sinit_lock_release>
 80063e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063e8:	6523      	str	r3, [r4, #80]	; 0x50
 80063ea:	4b13      	ldr	r3, [pc, #76]	; (8006438 <__sinit+0x68>)
 80063ec:	4a13      	ldr	r2, [pc, #76]	; (800643c <__sinit+0x6c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80063f2:	42a3      	cmp	r3, r4
 80063f4:	bf04      	itt	eq
 80063f6:	2301      	moveq	r3, #1
 80063f8:	61a3      	streq	r3, [r4, #24]
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 f820 	bl	8006440 <__sfp>
 8006400:	6060      	str	r0, [r4, #4]
 8006402:	4620      	mov	r0, r4
 8006404:	f000 f81c 	bl	8006440 <__sfp>
 8006408:	60a0      	str	r0, [r4, #8]
 800640a:	4620      	mov	r0, r4
 800640c:	f000 f818 	bl	8006440 <__sfp>
 8006410:	2200      	movs	r2, #0
 8006412:	60e0      	str	r0, [r4, #12]
 8006414:	2104      	movs	r1, #4
 8006416:	6860      	ldr	r0, [r4, #4]
 8006418:	f7ff ff82 	bl	8006320 <std>
 800641c:	68a0      	ldr	r0, [r4, #8]
 800641e:	2201      	movs	r2, #1
 8006420:	2109      	movs	r1, #9
 8006422:	f7ff ff7d 	bl	8006320 <std>
 8006426:	68e0      	ldr	r0, [r4, #12]
 8006428:	2202      	movs	r2, #2
 800642a:	2112      	movs	r1, #18
 800642c:	f7ff ff78 	bl	8006320 <std>
 8006430:	2301      	movs	r3, #1
 8006432:	61a3      	str	r3, [r4, #24]
 8006434:	e7d2      	b.n	80063dc <__sinit+0xc>
 8006436:	bf00      	nop
 8006438:	08006808 	.word	0x08006808
 800643c:	08006369 	.word	0x08006369

08006440 <__sfp>:
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	4607      	mov	r7, r0
 8006444:	f7ff ffac 	bl	80063a0 <__sfp_lock_acquire>
 8006448:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <__sfp+0x84>)
 800644a:	681e      	ldr	r6, [r3, #0]
 800644c:	69b3      	ldr	r3, [r6, #24]
 800644e:	b913      	cbnz	r3, 8006456 <__sfp+0x16>
 8006450:	4630      	mov	r0, r6
 8006452:	f7ff ffbd 	bl	80063d0 <__sinit>
 8006456:	3648      	adds	r6, #72	; 0x48
 8006458:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800645c:	3b01      	subs	r3, #1
 800645e:	d503      	bpl.n	8006468 <__sfp+0x28>
 8006460:	6833      	ldr	r3, [r6, #0]
 8006462:	b30b      	cbz	r3, 80064a8 <__sfp+0x68>
 8006464:	6836      	ldr	r6, [r6, #0]
 8006466:	e7f7      	b.n	8006458 <__sfp+0x18>
 8006468:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800646c:	b9d5      	cbnz	r5, 80064a4 <__sfp+0x64>
 800646e:	4b16      	ldr	r3, [pc, #88]	; (80064c8 <__sfp+0x88>)
 8006470:	60e3      	str	r3, [r4, #12]
 8006472:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006476:	6665      	str	r5, [r4, #100]	; 0x64
 8006478:	f000 f847 	bl	800650a <__retarget_lock_init_recursive>
 800647c:	f7ff ff96 	bl	80063ac <__sfp_lock_release>
 8006480:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006484:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006488:	6025      	str	r5, [r4, #0]
 800648a:	61a5      	str	r5, [r4, #24]
 800648c:	2208      	movs	r2, #8
 800648e:	4629      	mov	r1, r5
 8006490:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006494:	f7fd fcc2 	bl	8003e1c <memset>
 8006498:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800649c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80064a0:	4620      	mov	r0, r4
 80064a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064a4:	3468      	adds	r4, #104	; 0x68
 80064a6:	e7d9      	b.n	800645c <__sfp+0x1c>
 80064a8:	2104      	movs	r1, #4
 80064aa:	4638      	mov	r0, r7
 80064ac:	f7ff ff62 	bl	8006374 <__sfmoreglue>
 80064b0:	4604      	mov	r4, r0
 80064b2:	6030      	str	r0, [r6, #0]
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d1d5      	bne.n	8006464 <__sfp+0x24>
 80064b8:	f7ff ff78 	bl	80063ac <__sfp_lock_release>
 80064bc:	230c      	movs	r3, #12
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	e7ee      	b.n	80064a0 <__sfp+0x60>
 80064c2:	bf00      	nop
 80064c4:	08006808 	.word	0x08006808
 80064c8:	ffff0001 	.word	0xffff0001

080064cc <_fwalk_reent>:
 80064cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d0:	4606      	mov	r6, r0
 80064d2:	4688      	mov	r8, r1
 80064d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80064d8:	2700      	movs	r7, #0
 80064da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064de:	f1b9 0901 	subs.w	r9, r9, #1
 80064e2:	d505      	bpl.n	80064f0 <_fwalk_reent+0x24>
 80064e4:	6824      	ldr	r4, [r4, #0]
 80064e6:	2c00      	cmp	r4, #0
 80064e8:	d1f7      	bne.n	80064da <_fwalk_reent+0xe>
 80064ea:	4638      	mov	r0, r7
 80064ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f0:	89ab      	ldrh	r3, [r5, #12]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d907      	bls.n	8006506 <_fwalk_reent+0x3a>
 80064f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064fa:	3301      	adds	r3, #1
 80064fc:	d003      	beq.n	8006506 <_fwalk_reent+0x3a>
 80064fe:	4629      	mov	r1, r5
 8006500:	4630      	mov	r0, r6
 8006502:	47c0      	blx	r8
 8006504:	4307      	orrs	r7, r0
 8006506:	3568      	adds	r5, #104	; 0x68
 8006508:	e7e9      	b.n	80064de <_fwalk_reent+0x12>

0800650a <__retarget_lock_init_recursive>:
 800650a:	4770      	bx	lr

0800650c <__retarget_lock_acquire_recursive>:
 800650c:	4770      	bx	lr

0800650e <__retarget_lock_release_recursive>:
 800650e:	4770      	bx	lr

08006510 <__swhatbuf_r>:
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	460e      	mov	r6, r1
 8006514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006518:	2900      	cmp	r1, #0
 800651a:	b096      	sub	sp, #88	; 0x58
 800651c:	4614      	mov	r4, r2
 800651e:	461d      	mov	r5, r3
 8006520:	da07      	bge.n	8006532 <__swhatbuf_r+0x22>
 8006522:	2300      	movs	r3, #0
 8006524:	602b      	str	r3, [r5, #0]
 8006526:	89b3      	ldrh	r3, [r6, #12]
 8006528:	061a      	lsls	r2, r3, #24
 800652a:	d410      	bmi.n	800654e <__swhatbuf_r+0x3e>
 800652c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006530:	e00e      	b.n	8006550 <__swhatbuf_r+0x40>
 8006532:	466a      	mov	r2, sp
 8006534:	f000 f906 	bl	8006744 <_fstat_r>
 8006538:	2800      	cmp	r0, #0
 800653a:	dbf2      	blt.n	8006522 <__swhatbuf_r+0x12>
 800653c:	9a01      	ldr	r2, [sp, #4]
 800653e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006542:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006546:	425a      	negs	r2, r3
 8006548:	415a      	adcs	r2, r3
 800654a:	602a      	str	r2, [r5, #0]
 800654c:	e7ee      	b.n	800652c <__swhatbuf_r+0x1c>
 800654e:	2340      	movs	r3, #64	; 0x40
 8006550:	2000      	movs	r0, #0
 8006552:	6023      	str	r3, [r4, #0]
 8006554:	b016      	add	sp, #88	; 0x58
 8006556:	bd70      	pop	{r4, r5, r6, pc}

08006558 <__smakebuf_r>:
 8006558:	898b      	ldrh	r3, [r1, #12]
 800655a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800655c:	079d      	lsls	r5, r3, #30
 800655e:	4606      	mov	r6, r0
 8006560:	460c      	mov	r4, r1
 8006562:	d507      	bpl.n	8006574 <__smakebuf_r+0x1c>
 8006564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	6123      	str	r3, [r4, #16]
 800656c:	2301      	movs	r3, #1
 800656e:	6163      	str	r3, [r4, #20]
 8006570:	b002      	add	sp, #8
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	ab01      	add	r3, sp, #4
 8006576:	466a      	mov	r2, sp
 8006578:	f7ff ffca 	bl	8006510 <__swhatbuf_r>
 800657c:	9900      	ldr	r1, [sp, #0]
 800657e:	4605      	mov	r5, r0
 8006580:	4630      	mov	r0, r6
 8006582:	f7ff fb71 	bl	8005c68 <_malloc_r>
 8006586:	b948      	cbnz	r0, 800659c <__smakebuf_r+0x44>
 8006588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800658c:	059a      	lsls	r2, r3, #22
 800658e:	d4ef      	bmi.n	8006570 <__smakebuf_r+0x18>
 8006590:	f023 0303 	bic.w	r3, r3, #3
 8006594:	f043 0302 	orr.w	r3, r3, #2
 8006598:	81a3      	strh	r3, [r4, #12]
 800659a:	e7e3      	b.n	8006564 <__smakebuf_r+0xc>
 800659c:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <__smakebuf_r+0x7c>)
 800659e:	62b3      	str	r3, [r6, #40]	; 0x28
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	6020      	str	r0, [r4, #0]
 80065a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a8:	81a3      	strh	r3, [r4, #12]
 80065aa:	9b00      	ldr	r3, [sp, #0]
 80065ac:	6163      	str	r3, [r4, #20]
 80065ae:	9b01      	ldr	r3, [sp, #4]
 80065b0:	6120      	str	r0, [r4, #16]
 80065b2:	b15b      	cbz	r3, 80065cc <__smakebuf_r+0x74>
 80065b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065b8:	4630      	mov	r0, r6
 80065ba:	f000 f8d5 	bl	8006768 <_isatty_r>
 80065be:	b128      	cbz	r0, 80065cc <__smakebuf_r+0x74>
 80065c0:	89a3      	ldrh	r3, [r4, #12]
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	81a3      	strh	r3, [r4, #12]
 80065cc:	89a0      	ldrh	r0, [r4, #12]
 80065ce:	4305      	orrs	r5, r0
 80065d0:	81a5      	strh	r5, [r4, #12]
 80065d2:	e7cd      	b.n	8006570 <__smakebuf_r+0x18>
 80065d4:	08006369 	.word	0x08006369

080065d8 <__malloc_lock>:
 80065d8:	4801      	ldr	r0, [pc, #4]	; (80065e0 <__malloc_lock+0x8>)
 80065da:	f7ff bf97 	b.w	800650c <__retarget_lock_acquire_recursive>
 80065de:	bf00      	nop
 80065e0:	20000358 	.word	0x20000358

080065e4 <__malloc_unlock>:
 80065e4:	4801      	ldr	r0, [pc, #4]	; (80065ec <__malloc_unlock+0x8>)
 80065e6:	f7ff bf92 	b.w	800650e <__retarget_lock_release_recursive>
 80065ea:	bf00      	nop
 80065ec:	20000358 	.word	0x20000358

080065f0 <_raise_r>:
 80065f0:	291f      	cmp	r1, #31
 80065f2:	b538      	push	{r3, r4, r5, lr}
 80065f4:	4604      	mov	r4, r0
 80065f6:	460d      	mov	r5, r1
 80065f8:	d904      	bls.n	8006604 <_raise_r+0x14>
 80065fa:	2316      	movs	r3, #22
 80065fc:	6003      	str	r3, [r0, #0]
 80065fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006606:	b112      	cbz	r2, 800660e <_raise_r+0x1e>
 8006608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800660c:	b94b      	cbnz	r3, 8006622 <_raise_r+0x32>
 800660e:	4620      	mov	r0, r4
 8006610:	f000 f830 	bl	8006674 <_getpid_r>
 8006614:	462a      	mov	r2, r5
 8006616:	4601      	mov	r1, r0
 8006618:	4620      	mov	r0, r4
 800661a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800661e:	f000 b817 	b.w	8006650 <_kill_r>
 8006622:	2b01      	cmp	r3, #1
 8006624:	d00a      	beq.n	800663c <_raise_r+0x4c>
 8006626:	1c59      	adds	r1, r3, #1
 8006628:	d103      	bne.n	8006632 <_raise_r+0x42>
 800662a:	2316      	movs	r3, #22
 800662c:	6003      	str	r3, [r0, #0]
 800662e:	2001      	movs	r0, #1
 8006630:	e7e7      	b.n	8006602 <_raise_r+0x12>
 8006632:	2400      	movs	r4, #0
 8006634:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006638:	4628      	mov	r0, r5
 800663a:	4798      	blx	r3
 800663c:	2000      	movs	r0, #0
 800663e:	e7e0      	b.n	8006602 <_raise_r+0x12>

08006640 <raise>:
 8006640:	4b02      	ldr	r3, [pc, #8]	; (800664c <raise+0xc>)
 8006642:	4601      	mov	r1, r0
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	f7ff bfd3 	b.w	80065f0 <_raise_r>
 800664a:	bf00      	nop
 800664c:	2000000c 	.word	0x2000000c

08006650 <_kill_r>:
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	4d07      	ldr	r5, [pc, #28]	; (8006670 <_kill_r+0x20>)
 8006654:	2300      	movs	r3, #0
 8006656:	4604      	mov	r4, r0
 8006658:	4608      	mov	r0, r1
 800665a:	4611      	mov	r1, r2
 800665c:	602b      	str	r3, [r5, #0]
 800665e:	f7fa fdf9 	bl	8001254 <_kill>
 8006662:	1c43      	adds	r3, r0, #1
 8006664:	d102      	bne.n	800666c <_kill_r+0x1c>
 8006666:	682b      	ldr	r3, [r5, #0]
 8006668:	b103      	cbz	r3, 800666c <_kill_r+0x1c>
 800666a:	6023      	str	r3, [r4, #0]
 800666c:	bd38      	pop	{r3, r4, r5, pc}
 800666e:	bf00      	nop
 8006670:	20000360 	.word	0x20000360

08006674 <_getpid_r>:
 8006674:	f7fa bde6 	b.w	8001244 <_getpid>

08006678 <__sread>:
 8006678:	b510      	push	{r4, lr}
 800667a:	460c      	mov	r4, r1
 800667c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006680:	f000 f894 	bl	80067ac <_read_r>
 8006684:	2800      	cmp	r0, #0
 8006686:	bfab      	itete	ge
 8006688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800668a:	89a3      	ldrhlt	r3, [r4, #12]
 800668c:	181b      	addge	r3, r3, r0
 800668e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006692:	bfac      	ite	ge
 8006694:	6563      	strge	r3, [r4, #84]	; 0x54
 8006696:	81a3      	strhlt	r3, [r4, #12]
 8006698:	bd10      	pop	{r4, pc}

0800669a <__swrite>:
 800669a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800669e:	461f      	mov	r7, r3
 80066a0:	898b      	ldrh	r3, [r1, #12]
 80066a2:	05db      	lsls	r3, r3, #23
 80066a4:	4605      	mov	r5, r0
 80066a6:	460c      	mov	r4, r1
 80066a8:	4616      	mov	r6, r2
 80066aa:	d505      	bpl.n	80066b8 <__swrite+0x1e>
 80066ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b0:	2302      	movs	r3, #2
 80066b2:	2200      	movs	r2, #0
 80066b4:	f000 f868 	bl	8006788 <_lseek_r>
 80066b8:	89a3      	ldrh	r3, [r4, #12]
 80066ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066c2:	81a3      	strh	r3, [r4, #12]
 80066c4:	4632      	mov	r2, r6
 80066c6:	463b      	mov	r3, r7
 80066c8:	4628      	mov	r0, r5
 80066ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ce:	f000 b817 	b.w	8006700 <_write_r>

080066d2 <__sseek>:
 80066d2:	b510      	push	{r4, lr}
 80066d4:	460c      	mov	r4, r1
 80066d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066da:	f000 f855 	bl	8006788 <_lseek_r>
 80066de:	1c43      	adds	r3, r0, #1
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	bf15      	itete	ne
 80066e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80066e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066ee:	81a3      	strheq	r3, [r4, #12]
 80066f0:	bf18      	it	ne
 80066f2:	81a3      	strhne	r3, [r4, #12]
 80066f4:	bd10      	pop	{r4, pc}

080066f6 <__sclose>:
 80066f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066fa:	f000 b813 	b.w	8006724 <_close_r>
	...

08006700 <_write_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d07      	ldr	r5, [pc, #28]	; (8006720 <_write_r+0x20>)
 8006704:	4604      	mov	r4, r0
 8006706:	4608      	mov	r0, r1
 8006708:	4611      	mov	r1, r2
 800670a:	2200      	movs	r2, #0
 800670c:	602a      	str	r2, [r5, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	f7fa fdd7 	bl	80012c2 <_write>
 8006714:	1c43      	adds	r3, r0, #1
 8006716:	d102      	bne.n	800671e <_write_r+0x1e>
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	b103      	cbz	r3, 800671e <_write_r+0x1e>
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	bd38      	pop	{r3, r4, r5, pc}
 8006720:	20000360 	.word	0x20000360

08006724 <_close_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4d06      	ldr	r5, [pc, #24]	; (8006740 <_close_r+0x1c>)
 8006728:	2300      	movs	r3, #0
 800672a:	4604      	mov	r4, r0
 800672c:	4608      	mov	r0, r1
 800672e:	602b      	str	r3, [r5, #0]
 8006730:	f7fa fde3 	bl	80012fa <_close>
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	d102      	bne.n	800673e <_close_r+0x1a>
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	b103      	cbz	r3, 800673e <_close_r+0x1a>
 800673c:	6023      	str	r3, [r4, #0]
 800673e:	bd38      	pop	{r3, r4, r5, pc}
 8006740:	20000360 	.word	0x20000360

08006744 <_fstat_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	4d07      	ldr	r5, [pc, #28]	; (8006764 <_fstat_r+0x20>)
 8006748:	2300      	movs	r3, #0
 800674a:	4604      	mov	r4, r0
 800674c:	4608      	mov	r0, r1
 800674e:	4611      	mov	r1, r2
 8006750:	602b      	str	r3, [r5, #0]
 8006752:	f7fa fdde 	bl	8001312 <_fstat>
 8006756:	1c43      	adds	r3, r0, #1
 8006758:	d102      	bne.n	8006760 <_fstat_r+0x1c>
 800675a:	682b      	ldr	r3, [r5, #0]
 800675c:	b103      	cbz	r3, 8006760 <_fstat_r+0x1c>
 800675e:	6023      	str	r3, [r4, #0]
 8006760:	bd38      	pop	{r3, r4, r5, pc}
 8006762:	bf00      	nop
 8006764:	20000360 	.word	0x20000360

08006768 <_isatty_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4d06      	ldr	r5, [pc, #24]	; (8006784 <_isatty_r+0x1c>)
 800676c:	2300      	movs	r3, #0
 800676e:	4604      	mov	r4, r0
 8006770:	4608      	mov	r0, r1
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	f7fa fddd 	bl	8001332 <_isatty>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_isatty_r+0x1a>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_isatty_r+0x1a>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	20000360 	.word	0x20000360

08006788 <_lseek_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4d07      	ldr	r5, [pc, #28]	; (80067a8 <_lseek_r+0x20>)
 800678c:	4604      	mov	r4, r0
 800678e:	4608      	mov	r0, r1
 8006790:	4611      	mov	r1, r2
 8006792:	2200      	movs	r2, #0
 8006794:	602a      	str	r2, [r5, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	f7fa fdd6 	bl	8001348 <_lseek>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_lseek_r+0x1e>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_lseek_r+0x1e>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	20000360 	.word	0x20000360

080067ac <_read_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d07      	ldr	r5, [pc, #28]	; (80067cc <_read_r+0x20>)
 80067b0:	4604      	mov	r4, r0
 80067b2:	4608      	mov	r0, r1
 80067b4:	4611      	mov	r1, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f7fa fd64 	bl	8001288 <_read>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_read_r+0x1e>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_read_r+0x1e>
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	20000360 	.word	0x20000360

080067d0 <_init>:
 80067d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d2:	bf00      	nop
 80067d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d6:	bc08      	pop	{r3}
 80067d8:	469e      	mov	lr, r3
 80067da:	4770      	bx	lr

080067dc <_fini>:
 80067dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067de:	bf00      	nop
 80067e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e2:	bc08      	pop	{r3}
 80067e4:	469e      	mov	lr, r3
 80067e6:	4770      	bx	lr
